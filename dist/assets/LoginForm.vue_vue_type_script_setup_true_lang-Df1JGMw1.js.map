{"version":3,"file":"LoginForm.vue_vue_type_script_setup_true_lang-Df1JGMw1.js","sources":["../../src/views/Login/components/LoginForm.vue"],"sourcesContent":["<script setup lang=\"tsx\">\r\nimport { reactive, ref, watch, onMounted, unref } from 'vue'\r\nimport { Form, FormSchema } from '@/components/Form'\r\nimport { useI18n } from '@/hooks/web/useI18n'\r\nimport { ElCheckbox, ElLink } from 'element-plus'\r\nimport { useForm } from '@/hooks/web/useForm'\r\nimport { loginApi, getTestRoleApi, getAdminRoleApi } from '@/api/login'\r\nimport { useAppStore } from '@/store/modules/app'\r\nimport { usePermissionStore } from '@/store/modules/permission'\r\nimport { useRouter } from 'vue-router'\r\nimport type { RouteLocationNormalizedLoaded, RouteRecordRaw } from 'vue-router'\r\nimport { UserType } from '@/api/login/types'\r\nimport { useValidator } from '@/hooks/web/useValidator'\r\nimport { Icon } from '@/components/Icon'\r\nimport { useUserStore } from '@/store/modules/user'\r\nimport { BaseButton } from '@/components/Button'\r\n\r\nconst { required } = useValidator()\r\n\r\nconst emit = defineEmits(['to-register'])\r\n\r\nconst appStore = useAppStore()\r\n\r\nconst userStore = useUserStore()\r\n\r\nconst permissionStore = usePermissionStore()\r\n\r\nconst { currentRoute, addRoute, push } = useRouter()\r\n\r\nconst { t } = useI18n()\r\n\r\nconst rules = {\r\n  username: [required()],\r\n  password: [required()]\r\n}\r\n\r\nconst schema = reactive<FormSchema[]>([\r\n  {\r\n    field: 'title',\r\n    colProps: {\r\n      span: 24\r\n    },\r\n    formItemProps: {\r\n      slots: {\r\n        default: () => {\r\n          return <h2 class=\"text-2xl font-bold text-center w-[100%]\">{t('login.login')}</h2>\r\n        }\r\n      }\r\n    }\r\n  },\r\n  {\r\n    field: 'username',\r\n    label: t('login.username'),\r\n    // value: 'admin',\r\n    component: 'Input',\r\n    colProps: {\r\n      span: 24\r\n    },\r\n    componentProps: {\r\n      placeholder: 'admin or test'\r\n    }\r\n  },\r\n  {\r\n    field: 'password',\r\n    label: t('login.password'),\r\n    // value: 'admin',\r\n    component: 'InputPassword',\r\n    colProps: {\r\n      span: 24\r\n    },\r\n    componentProps: {\r\n      style: {\r\n        width: '100%'\r\n      },\r\n      placeholder: 'admin or test'\r\n    }\r\n  },\r\n  {\r\n    field: 'tool',\r\n    colProps: {\r\n      span: 24\r\n    },\r\n    formItemProps: {\r\n      slots: {\r\n        default: () => {\r\n          return (\r\n            <>\r\n              <div class=\"flex justify-between items-center w-[100%]\">\r\n                <ElCheckbox v-model={remember.value} label={t('login.remember')} size=\"small\" />\r\n                <ElLink type=\"primary\" underline={false}>\r\n                  {t('login.forgetPassword')}\r\n                </ElLink>\r\n              </div>\r\n            </>\r\n          )\r\n        }\r\n      }\r\n    }\r\n  },\r\n  {\r\n    field: 'login',\r\n    colProps: {\r\n      span: 24\r\n    },\r\n    formItemProps: {\r\n      slots: {\r\n        default: () => {\r\n          return (\r\n            <>\r\n              <div class=\"w-[100%]\">\r\n                <BaseButton\r\n                  loading={loading.value}\r\n                  type=\"primary\"\r\n                  class=\"w-[100%]\"\r\n                  onClick={signIn}\r\n                >\r\n                  {t('login.login')}\r\n                </BaseButton>\r\n              </div>\r\n              <div class=\"w-[100%] mt-15px\">\r\n                <BaseButton class=\"w-[100%]\" onClick={toRegister}>\r\n                  {t('login.register')}\r\n                </BaseButton>\r\n              </div>\r\n            </>\r\n          )\r\n        }\r\n      }\r\n    }\r\n  },\r\n  {\r\n    field: 'other',\r\n    component: 'Divider',\r\n    label: t('login.otherLogin'),\r\n    componentProps: {\r\n      contentPosition: 'center'\r\n    }\r\n  },\r\n  {\r\n    field: 'otherIcon',\r\n    colProps: {\r\n      span: 24\r\n    },\r\n    formItemProps: {\r\n      slots: {\r\n        default: () => {\r\n          return (\r\n            <>\r\n              <div class=\"flex justify-between w-[100%]\">\r\n                <Icon\r\n                  icon=\"ant-design:github-filled\"\r\n                  size={iconSize}\r\n                  class=\"cursor-pointer ant-icon\"\r\n                  color={iconColor}\r\n                  hoverColor={hoverColor}\r\n                />\r\n                <Icon\r\n                  icon=\"ant-design:wechat-filled\"\r\n                  size={iconSize}\r\n                  class=\"cursor-pointer ant-icon\"\r\n                  color={iconColor}\r\n                  hoverColor={hoverColor}\r\n                />\r\n                <Icon\r\n                  icon=\"ant-design:alipay-circle-filled\"\r\n                  size={iconSize}\r\n                  color={iconColor}\r\n                  hoverColor={hoverColor}\r\n                  class=\"cursor-pointer ant-icon\"\r\n                />\r\n                <Icon\r\n                  icon=\"ant-design:weibo-circle-filled\"\r\n                  size={iconSize}\r\n                  color={iconColor}\r\n                  hoverColor={hoverColor}\r\n                  class=\"cursor-pointer ant-icon\"\r\n                />\r\n              </div>\r\n            </>\r\n          )\r\n        }\r\n      }\r\n    }\r\n  }\r\n])\r\n\r\nconst iconSize = 30\r\n\r\nconst remember = ref(userStore.getRememberMe)\r\n\r\nconst initLoginInfo = () => {\r\n  const loginInfo = userStore.getLoginInfo\r\n  if (loginInfo) {\r\n    const { username, password } = loginInfo\r\n    setValues({ username, password })\r\n  }\r\n}\r\nonMounted(() => {\r\n  initLoginInfo()\r\n})\r\n\r\nconst { formRegister, formMethods } = useForm()\r\nconst { getFormData, getElFormExpose, setValues } = formMethods\r\n\r\nconst loading = ref(false)\r\n\r\nconst iconColor = '#999'\r\n\r\nconst hoverColor = 'var(--el-color-primary)'\r\n\r\nconst redirect = ref<string>('')\r\n\r\nwatch(\r\n  () => currentRoute.value,\r\n  (route: RouteLocationNormalizedLoaded) => {\r\n    redirect.value = route?.query?.redirect as string\r\n  },\r\n  {\r\n    immediate: true\r\n  }\r\n)\r\n\r\n// 登录\r\nconst signIn = async () => {\r\n  const formRef = await getElFormExpose()\r\n  await formRef?.validate(async (isValid) => {\r\n    if (isValid) {\r\n      loading.value = true\r\n      const formData = await getFormData<UserType>()\r\n\r\n      try {\r\n        const res = await loginApi(formData)\r\n\r\n        if (res) {\r\n          // 是否记住我\r\n          if (unref(remember)) {\r\n            userStore.setLoginInfo({\r\n              username: formData.username,\r\n              password: formData.password\r\n            })\r\n          } else {\r\n            userStore.setLoginInfo(undefined)\r\n          }\r\n          userStore.setRememberMe(unref(remember))\r\n          userStore.setUserInfo(res.data)\r\n          // 是否使用动态路由\r\n          if (appStore.getDynamicRouter) {\r\n            getRole()\r\n          } else {\r\n            await permissionStore.generateRoutes('static').catch(() => {})\r\n            permissionStore.getAddRouters.forEach((route) => {\r\n              addRoute(route as RouteRecordRaw) // 动态添加可访问路由表\r\n            })\r\n            permissionStore.setIsAddRouters(true)\r\n            push({ path: redirect.value || permissionStore.addRouters[0].path })\r\n          }\r\n        }\r\n      } finally {\r\n        loading.value = false\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n// 获取角色信息\r\nconst getRole = async () => {\r\n  const formData = await getFormData<UserType>()\r\n  const params = {\r\n    roleName: formData.username\r\n  }\r\n  const res =\r\n    appStore.getDynamicRouter && appStore.getServerDynamicRouter\r\n      ? await getAdminRoleApi(params)\r\n      : await getTestRoleApi(params)\r\n  if (res) {\r\n    const routers = res.data || []\r\n    userStore.setRoleRouters(routers)\r\n    appStore.getDynamicRouter && appStore.getServerDynamicRouter\r\n      ? await permissionStore.generateRoutes('server', routers).catch(() => {})\r\n      : await permissionStore.generateRoutes('frontEnd', routers).catch(() => {})\r\n\r\n    permissionStore.getAddRouters.forEach((route) => {\r\n      addRoute(route as RouteRecordRaw) // 动态添加可访问路由表\r\n    })\r\n    permissionStore.setIsAddRouters(true)\r\n    push({ path: redirect.value || permissionStore.addRouters[0].path })\r\n  }\r\n}\r\n\r\n// 去注册页面\r\nconst toRegister = () => {\r\n  emit('to-register')\r\n}\r\n</script>\r\n\r\n<template>\r\n  <Form\r\n    :schema=\"schema\"\r\n    :rules=\"rules\"\r\n    label-position=\"top\"\r\n    hide-required-asterisk\r\n    size=\"large\"\r\n    class=\"dark:border-1 dark:border-[var(--el-border-color)] dark:border-solid\"\r\n    @register=\"formRegister\"\r\n  />\r\n</template>\r\n"],"names":["_isSlot","s","Object","prototype","toString","call","_isVNode","iconSize","iconColor","hoverColor","required","useValidator","emit","__emit","appStore","useAppStore","userStore","useUserStore","permissionStore","usePermissionStore","currentRoute","addRoute","push","useRouter","t","useI18n","rules","username","password","schema","reactive","field","colProps","span","formItemProps","slots","default","_createVNode","label","component","componentProps","placeholder","style","width","_slot","_Fragment","ElCheckbox","remember","value","$event","ElLink","_slot2","_slot3","BaseButton","loading","signIn","toRegister","contentPosition","Icon","ref","getRememberMe","initLoginInfo","loginInfo","getLoginInfo","setValues","onMounted","formRegister","formMethods","useForm","getFormData","getElFormExpose","redirect","watch","route","query","immediate","__async","formRef","validate","isValid","formData","res","loginApi","unref","setLoginInfo","undefined","setRememberMe","setUserInfo","data","getDynamicRouter","getRole","generateRoutes","catch","getAddRouters","forEach","setIsAddRouters","path","addRouters","params","roleName","getServerDynamicRouter","getAdminRoleApi","getTestRoleApi","routers","setRoleRouters"],"mappings":"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"}
{"version":3,"file":"index-DO19Fvpz.js","sources":["../../src/components/Cesium/CesiumDraw/index.ts"],"sourcesContent":["/* eslint-disable prefer-const */\r\n/**\r\n * 画笔模块\r\n * @param {*} viewer\r\n */\r\nimport * as Cesium from 'cesium'\r\nimport {\r\n  transformCartesianArrayToWGS84Array,\r\n  getCatesian3FromPX,\r\n  getPositionDistance,\r\n  getPositionsArea,\r\n  transformWGS84ArrayToCartesianArray\r\n} from '../CesiumBase'\r\n\r\nimport CesiumGraphics from '../CesiumGraphics'\r\n\r\nclass CesiumDraw {\r\n  declare _viewer: any\r\n  declare _drawLayer: any\r\n\r\n  constructor(viewer) {\r\n    this._viewer = viewer\r\n\r\n    this._drawLayer = new Cesium.CustomDataSource('drawLayer')\r\n\r\n    viewer && viewer.dataSources.add(this._drawLayer)\r\n  }\r\n\r\n  get drawLayer() {\r\n    return this._drawLayer\r\n  }\r\n\r\n  /**\r\n   * 在视图中绘制一个点图形。\r\n   * @param {Object} options 绘制点图形的配置项。\r\n   * @param {Object} options.style 点图形的样式配置，包括图片路径、宽度、高度、是否贴地、缩放比例和像素偏移。\r\n   * @param {Function} options.callback 点击右键时的回调函数，接收转换后的wgs84 坐标数组和对象作为参数。\r\n   */\r\n  drawPointGraphics({\r\n    style = {\r\n      image: 'src/assets/image/location4.png',\r\n      width: 35,\r\n      height: 50,\r\n      clampToGround: true,\r\n      scale: 1,\r\n      pixelOffset: new Cesium.Cartesian2(0, -20)\r\n    },\r\n    callback = () => {}\r\n  }) {\r\n    // 创建一个实体用于表示点图形\r\n    let _poiEntity = new Cesium.Entity(),\r\n      position,\r\n      positions = [],\r\n      poiObj: any,\r\n      _handlers = new Cesium.ScreenSpaceEventHandler(this._viewer.scene.canvas)\r\n    // 左键点击事件：获取点击位置并添加到位置数组\r\n    _handlers.setInputAction((movement) => {\r\n      const cartesian = this._viewer.scene.camera.pickEllipsoid(\r\n        movement.position,\r\n        this._viewer.scene.globe.ellipsoid\r\n      )\r\n      if (cartesian && cartesian.x) {\r\n        position = cartesian\r\n\r\n        positions.push(cartesian)\r\n      }\r\n    }, Cesium.ScreenSpaceEventType.LEFT_CLICK)\r\n    // 右键点击事件：移除事件处理器，调用回调函数，并传递位置数据\r\n    _handlers.setInputAction((movement) => {\r\n      _handlers.destroy()\r\n      _handlers = null\r\n\r\n      if (typeof callback === 'function') {\r\n        callback(transformCartesianArrayToWGS84Array(positions), poiObj)\r\n      }\r\n    }, Cesium.ScreenSpaceEventType.RIGHT_CLICK)\r\n\r\n    // 设置点图形的样式和位置\r\n    _poiEntity.billboard = style\r\n    _poiEntity.position = new Cesium.CallbackProperty(function () {\r\n      return position\r\n    }, false)\r\n\r\n    // 将点图形添加到绘制层\r\n    poiObj = this._drawLayer.entities.add(_poiEntity)\r\n  }\r\n  /**\r\n   * 画线 or 测距\r\n   * @param {*} options\r\n   */\r\n  drawLineGraphics(options) {\r\n    options = options || {}\r\n    if (this._viewer && options) {\r\n      let positions = [],\r\n        _lineEntity = new Cesium.Entity(),\r\n        $this = this,\r\n        lineObj,\r\n        _handlers = new Cesium.ScreenSpaceEventHandler(this._viewer.scene.canvas)\r\n      // left\r\n      _handlers.setInputAction(function (movement) {\r\n        const cartesian = getCatesian3FromPX($this._viewer, movement.position)\r\n        if (cartesian && cartesian.x) {\r\n          if (positions.length == 0) {\r\n            positions.push(cartesian.clone())\r\n          }\r\n          if (options.measure) {\r\n            _addInfoPoint(cartesian)\r\n          }\r\n          // 绘制直线 两个点\r\n          if (positions.length == 2 && options.type === 'straightLine') {\r\n            _handlers.destroy()\r\n            _handlers = null\r\n            if (typeof options.callback === 'function') {\r\n              options.callback(transformCartesianArrayToWGS84Array(positions), lineObj)\r\n            }\r\n          }\r\n          positions.push(cartesian)\r\n        }\r\n      }, Cesium.ScreenSpaceEventType.LEFT_CLICK)\r\n\r\n      _handlers.setInputAction(function (movement) {\r\n        const cartesian = getCatesian3FromPX($this._viewer, movement.endPosition)\r\n        if (positions.length >= 2) {\r\n          if (cartesian && cartesian.x) {\r\n            positions.pop()\r\n            positions.push(cartesian)\r\n          }\r\n        }\r\n      }, Cesium.ScreenSpaceEventType.MOUSE_MOVE)\r\n      // right\r\n      _handlers.setInputAction(function (movement) {\r\n        _handlers.destroy()\r\n        _handlers = null\r\n\r\n        const cartesian = getCatesian3FromPX($this._viewer, movement.position)\r\n        if (options.measure) {\r\n          _addInfoPoint(cartesian)\r\n        }\r\n        if (typeof options.callback === 'function') {\r\n          options.callback(transformCartesianArrayToWGS84Array(positions), lineObj)\r\n        }\r\n      }, Cesium.ScreenSpaceEventType.RIGHT_CLICK)\r\n\r\n      _lineEntity.polyline = {\r\n        width: options.width || 5,\r\n        material: options.material || Cesium.Color.BLUE.withAlpha(0.8),\r\n        clampToGround: options.clampToGround || false,\r\n        clampToS3M: options.clampToS3M || false\r\n      }\r\n      _lineEntity.polyline.positions = new Cesium.CallbackProperty(function () {\r\n        return positions\r\n      }, false)\r\n\r\n      lineObj = this._drawLayer.entities.add(_lineEntity)\r\n\r\n      //添加坐标点\r\n      function _addInfoPoint(position) {\r\n        const _labelEntity = new Cesium.Entity()\r\n        _labelEntity.position = position\r\n        _labelEntity.point = {\r\n          pixelSize: 10,\r\n          outlineColor: Cesium.Color.BLUE,\r\n          outlineWidth: 5\r\n        }\r\n        _labelEntity.label = {\r\n          text:\r\n            (getPositionDistance(transformCartesianArrayToWGS84Array(positions)) / 1000).toFixed(\r\n              4\r\n            ) + '公里',\r\n          show: true,\r\n          showBackground: true,\r\n          font: '14px monospace',\r\n          backgroundColor: Cesium.Color.YELLOW.withAlpha(0.8),\r\n          fillColor: Cesium.Color.BLACK,\r\n          horizontalOrigin: Cesium.HorizontalOrigin.LEFT,\r\n          verticalOrigin: Cesium.VerticalOrigin.BOTTOM,\r\n          pixelOffset: new Cesium.Cartesian2(-20, -20) //left top\r\n        }\r\n        $this._drawLayer.entities.add(_labelEntity)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 画面 or 测面积\r\n   * @param {*} options\r\n   */\r\n  drawPolygonGraphics(options) {\r\n    options = options || {}\r\n    options.style = options.style || {\r\n      width: 3,\r\n      material: Cesium.Color.BLUE.withAlpha(0.8),\r\n      clampToGround: true\r\n    }\r\n    if (this._viewer && options) {\r\n      let positions = [],\r\n        polygon = new Cesium.PolygonHierarchy(),\r\n        _polygonEntity = new Cesium.Entity(),\r\n        $this = this,\r\n        polyObj = null,\r\n        _label = '',\r\n        _handler = new Cesium.ScreenSpaceEventHandler(this._viewer.scene.canvas)\r\n      // left\r\n      _handler.setInputAction(function (movement) {\r\n        const cartesian = getCatesian3FromPX($this._viewer, movement.position)\r\n        if (cartesian && cartesian.x) {\r\n          if (positions.length == 0) {\r\n            polygon.positions.push(cartesian.clone())\r\n            positions.push(cartesian.clone())\r\n          }\r\n          positions.push(cartesian.clone())\r\n          polygon.positions.push(cartesian.clone())\r\n\r\n          if (!polyObj) create()\r\n        }\r\n      }, Cesium.ScreenSpaceEventType.LEFT_CLICK)\r\n      // mouse\r\n      _handler.setInputAction(function (movement) {\r\n        const cartesian = getCatesian3FromPX($this._viewer, movement.endPosition)\r\n        if (positions.length >= 2) {\r\n          if (cartesian && cartesian.x) {\r\n            positions.pop()\r\n            positions.push(cartesian)\r\n            polygon.positions.pop()\r\n            polygon.positions.push(cartesian)\r\n          }\r\n        }\r\n      }, Cesium.ScreenSpaceEventType.MOUSE_MOVE)\r\n\r\n      // right\r\n      _handler.setInputAction(function (movement) {\r\n        _handler.destroy()\r\n\r\n        positions.push(positions[0])\r\n\r\n        if (options.height) {\r\n          //立体\r\n          _polygonEntity.polygon.extrudedHeight = options.height\r\n          _polygonEntity.polygon.material = Cesium.Color.BLUE.withAlpha(0.5)\r\n        }\r\n        if (options.measure) {\r\n          // 量测\r\n          _addInfoPoint(positions[0])\r\n        }\r\n        if (typeof options.callback === 'function') {\r\n          options.callback(transformCartesianArrayToWGS84Array(positions), polyObj)\r\n        }\r\n      }, Cesium.ScreenSpaceEventType.RIGHT_CLICK)\r\n\r\n      function create() {\r\n        _polygonEntity.polyline = options.style\r\n\r\n        _polygonEntity.polyline.positions = new Cesium.CallbackProperty(function () {\r\n          return positions\r\n        }, false)\r\n\r\n        _polygonEntity.polygon = {\r\n          hierarchy: new Cesium.CallbackProperty(function () {\r\n            return polygon\r\n          }, false),\r\n\r\n          material: Cesium.Color.WHITE.withAlpha(0.1),\r\n          clampToGround: options.clampToGround || false\r\n        }\r\n        _polygonEntity.clampToS3M = true\r\n\r\n        polyObj = $this._drawLayer.entities.add(_polygonEntity)\r\n      }\r\n\r\n      function _addInfoPoint(position) {\r\n        const _labelEntity = new Cesium.Entity()\r\n        _labelEntity.position = position\r\n        _labelEntity.point = {\r\n          pixelSize: 10,\r\n          outlineColor: Cesium.Color.BLUE,\r\n          outlineWidth: 5\r\n        }\r\n        _labelEntity.label = {\r\n          text:\r\n            (getPositionsArea(transformCartesianArrayToWGS84Array(positions)) / 1000000.0).toFixed(\r\n              4\r\n            ) + '平方公里',\r\n          show: true,\r\n          showBackground: true,\r\n          font: '14px monospace',\r\n          backgroundColor: Cesium.Color.YELLOW.withAlpha(0.8),\r\n          fillColor: Cesium.Color.BLACK,\r\n          horizontalOrigin: Cesium.HorizontalOrigin.LEFT,\r\n          verticalOrigin: Cesium.VerticalOrigin.BOTTOM,\r\n          pixelOffset: new Cesium.Cartesian2(-20, -20) //left top\r\n        }\r\n        $this._drawLayer.entities.add(_labelEntity)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 画矩形\r\n   * @param {*} options\r\n   */\r\n  drawRectangleGraphics(options) {\r\n    options = options || {}\r\n    options.style = options.style || {\r\n      width: 3,\r\n      material: Cesium.Color.BLUE.withAlpha(0.5),\r\n      clampToGround: true\r\n    }\r\n    if (this._viewer && options) {\r\n      let _positions = [],\r\n        _rectangleEntity = new Cesium.Entity(),\r\n        _coordinates = new Cesium.Rectangle(),\r\n        $this = this,\r\n        rectangleObj,\r\n        _handler = new Cesium.ScreenSpaceEventHandler(this._viewer.scene.canvas)\r\n      // left\r\n      _handler.setInputAction(function (movement) {\r\n        const cartesian = getCatesian3FromPX($this._viewer, movement.position)\r\n        if (cartesian && cartesian.x) {\r\n          if (_positions.length == 0) {\r\n            _positions.push(cartesian.clone())\r\n          } else {\r\n            _handler.destroy()\r\n\r\n            _positions.push(cartesian.clone())\r\n\r\n            _coordinates = Cesium.Rectangle.fromCartesianArray(\r\n              [..._positions, cartesian],\r\n              Cesium.Ellipsoid.WGS84\r\n            )\r\n\r\n            if (typeof options.callback === 'function') {\r\n              options.callback(transformCartesianArrayToWGS84Array(_positions), rectangleObj)\r\n            }\r\n          }\r\n        }\r\n      }, Cesium.ScreenSpaceEventType.LEFT_CLICK)\r\n      // mouse\r\n      _handler.setInputAction(function (movement) {\r\n        const cartesian = getCatesian3FromPX($this._viewer, movement.endPosition)\r\n\r\n        if (cartesian) {\r\n          _coordinates = Cesium.Rectangle.fromCartesianArray(\r\n            [..._positions, cartesian],\r\n            Cesium.Ellipsoid.WGS84\r\n          )\r\n        }\r\n      }, Cesium.ScreenSpaceEventType.MOUSE_MOVE)\r\n\r\n      _rectangleEntity.rectangle = options.style\r\n\r\n      if (options.height) _rectangleEntity.rectangle.extrudedHeight = options.height\r\n      _rectangleEntity.rectangle.coordinates = new Cesium.CallbackProperty(function () {\r\n        return _coordinates\r\n      }, false)\r\n      rectangleObj = this._drawLayer.entities.add(_rectangleEntity)\r\n    }\r\n  }\r\n  /**\r\n   * 画圆\r\n   * @param {*} options\r\n   */\r\n  drawCircleGraphics(options) {\r\n    options = options || {}\r\n    options.style = options.style || {\r\n      width: 3,\r\n      material: Cesium.Color.BLUE.withAlpha(0.5),\r\n      clampToGround: true\r\n    }\r\n    if (this._viewer && options) {\r\n      let _center = undefined,\r\n        _circleEntity = new Cesium.Entity(),\r\n        $this = this,\r\n        circleObj,\r\n        _radius = 1,\r\n        _handler = new Cesium.ScreenSpaceEventHandler(this._viewer.scene.canvas)\r\n\r\n      // 计算半径\r\n      function computeRadius(src, dest) {\r\n        const srcCartographic = Cesium.Cartographic.fromCartesian(src)\r\n        const destCartographic = Cesium.Cartographic.fromCartesian(dest)\r\n        const geodesic = new Cesium.EllipsoidGeodesic()\r\n        geodesic.setEndPoints(srcCartographic, destCartographic)\r\n        const s = geodesic.surfaceDistance\r\n        _radius = Math.sqrt(\r\n          //开平方\r\n          Math.pow(s, 2) + Math.pow(destCartographic.height - srcCartographic.height, 2)\r\n        )\r\n      }\r\n      //\r\n      function drawGraphics() {\r\n        _circleEntity.ellipse = options.style\r\n        _circleEntity.ellipse.semiMajorAxis = new Cesium.CallbackProperty(function () {\r\n          return _radius\r\n        }, false)\r\n        _circleEntity.ellipse.semiMinorAxis = new Cesium.CallbackProperty(function () {\r\n          return _radius\r\n        }, false)\r\n        _circleEntity.position = new Cesium.CallbackProperty(function () {\r\n          return _center\r\n        }, false)\r\n\r\n        _circleEntity.point = {\r\n          pixelSize: 5,\r\n          outlineColor: Cesium.Color.RED,\r\n          outlineWidth: 3\r\n        }\r\n\r\n        if (options.height) _circleEntity.ellipse.extrudedHeight = options.height\r\n\r\n        circleObj = $this._drawLayer.entities.add(_circleEntity)\r\n      }\r\n      // left\r\n      _handler.setInputAction(function (movement) {\r\n        const cartesian = getCatesian3FromPX($this._viewer, movement.position)\r\n\r\n        if (cartesian && cartesian.x) {\r\n          if (!_center) {\r\n            _center = cartesian\r\n\r\n            drawGraphics()\r\n          } else {\r\n            computeRadius(_center, cartesian)\r\n\r\n            _handler.destroy()\r\n\r\n            if (typeof options.callback === 'function') {\r\n              options.callback({ center: _center, radius: _radius }, circleObj)\r\n            }\r\n          }\r\n        }\r\n      }, Cesium.ScreenSpaceEventType.LEFT_CLICK)\r\n      // mouse\r\n      _handler.setInputAction(function (movement) {\r\n        const cartesian = $this._viewer.scene.camera.pickEllipsoid(\r\n          movement.endPosition,\r\n          $this._viewer.scene.globe.ellipsoid\r\n        )\r\n        if (_center && cartesian && cartesian.x) {\r\n          computeRadius(_center, cartesian)\r\n        }\r\n      }, Cesium.ScreenSpaceEventType.MOUSE_MOVE)\r\n    }\r\n  }\r\n  /**\r\n   * 画三角量测\r\n   * @param {*} options\r\n   */\r\n  drawTrianglesGraphics(options) {\r\n    options = options || {}\r\n    options.style = options.style || {\r\n      width: 3,\r\n      material: Cesium.Color.BLUE.withAlpha(0.5)\r\n    }\r\n    if (this._viewer && options) {\r\n      const _trianglesEntity = new Cesium.Entity(),\r\n        _tempLineEntity = new Cesium.Entity(),\r\n        _tempLineEntity2 = new Cesium.Entity(),\r\n        _positions = [],\r\n        _tempPoints = [],\r\n        _tempPoints2 = [],\r\n        $this = this,\r\n        _handler = new Cesium.ScreenSpaceEventHandler(this._viewer.scene.canvas)\r\n      // 高度\r\n      function _getHeading(startPosition, endPosition) {\r\n        if (!startPosition && !endPosition) return 0\r\n        if (Cesium.Cartesian3.equals(startPosition, endPosition)) return 0\r\n        const cartographic = Cesium.Cartographic.fromCartesian(startPosition)\r\n        const cartographic2 = Cesium.Cartographic.fromCartesian(endPosition)\r\n        return (cartographic2.height - cartographic.height).toFixed(2)\r\n      }\r\n      // 偏移点\r\n      function _computesHorizontalLine(positions) {\r\n        const cartographic = Cesium.Cartographic.fromCartesian(positions[0])\r\n        const cartographic2 = Cesium.Cartographic.fromCartesian(positions[1])\r\n        return Cesium.Cartesian3.fromDegrees(\r\n          Cesium.Math.toDegrees(cartographic.longitude),\r\n          Cesium.Math.toDegrees(cartographic.latitude),\r\n          cartographic2.height\r\n        )\r\n      }\r\n      // left\r\n      _handler.setInputAction(function (movement) {\r\n        const position = getCatesian3FromPX($this._viewer, movement.position)\r\n        if (!position) return false\r\n        if (_positions.length == 0) {\r\n          _positions.push(position.clone())\r\n          _positions.push(position.clone())\r\n          _tempPoints.push(position.clone())\r\n          _tempPoints.push(position.clone())\r\n        } else {\r\n          _handler.destroy()\r\n          if (typeof options.callback === 'function') {\r\n            options.callback({ e: _trianglesEntity, e2: _tempLineEntity, e3: _tempLineEntity2 })\r\n          }\r\n        }\r\n      }, Cesium.ScreenSpaceEventType.LEFT_CLICK)\r\n      // mouse\r\n      _handler.setInputAction(function (movement) {\r\n        const position = getCatesian3FromPX($this._viewer, movement.endPosition)\r\n        if (position && _positions.length > 0) {\r\n          //直线\r\n          _positions.pop()\r\n          _positions.push(position.clone())\r\n          const horizontalPosition = _computesHorizontalLine(_positions)\r\n          //高度\r\n          _tempPoints.pop()\r\n          _tempPoints.push(horizontalPosition.clone())\r\n          //水平线\r\n          _tempPoints2.pop(), _tempPoints2.pop()\r\n          _tempPoints2.push(position.clone())\r\n          _tempPoints2.push(horizontalPosition.clone())\r\n        }\r\n      }, Cesium.ScreenSpaceEventType.MOUSE_MOVE)\r\n\r\n      // create entity\r\n\r\n      //直线\r\n      _trianglesEntity.polyline = {\r\n        positions: new Cesium.CallbackProperty(function () {\r\n          return _positions\r\n        }, false),\r\n        ...options.style\r\n      }\r\n      _trianglesEntity.position = new Cesium.CallbackProperty(function () {\r\n        return _positions[0]\r\n      }, false)\r\n      _trianglesEntity.point = {\r\n        pixelSize: 5,\r\n        outlineColor: Cesium.Color.BLUE,\r\n        outlineWidth: 5\r\n      }\r\n      _trianglesEntity.label = {\r\n        text: new Cesium.CallbackProperty(function () {\r\n          return (\r\n            '直线:' + getPositionDistance(transformCartesianArrayToWGS84Array(_positions)) + '米'\r\n          )\r\n        }, false),\r\n        show: true,\r\n        showBackground: true,\r\n        font: '14px monospace',\r\n        horizontalOrigin: Cesium.HorizontalOrigin.LEFT,\r\n        verticalOrigin: Cesium.VerticalOrigin.BOTTOM,\r\n        pixelOffset: new Cesium.Cartesian2(50, -100) //left top\r\n      }\r\n      //高度\r\n      _tempLineEntity.polyline = {\r\n        positions: new Cesium.CallbackProperty(function () {\r\n          return _tempPoints\r\n        }, false),\r\n        ...options.style\r\n      }\r\n      _tempLineEntity.position = new Cesium.CallbackProperty(function () {\r\n        return _tempPoints2[1]\r\n      }, false)\r\n      _tempLineEntity.point = {\r\n        pixelSize: 5,\r\n        outlineColor: Cesium.Color.BLUE,\r\n        outlineWidth: 5\r\n      }\r\n      _tempLineEntity.label = {\r\n        text: new Cesium.CallbackProperty(function () {\r\n          return '高度:' + _getHeading(_tempPoints[0], _tempPoints[1]) + '米'\r\n        }, false),\r\n        show: true,\r\n        showBackground: true,\r\n        font: '14px monospace',\r\n        horizontalOrigin: Cesium.HorizontalOrigin.LEFT,\r\n        verticalOrigin: Cesium.VerticalOrigin.BOTTOM,\r\n        pixelOffset: new Cesium.Cartesian2(-20, 100) //left top\r\n      }\r\n      //水平\r\n      _tempLineEntity2.polyline = {\r\n        positions: new Cesium.CallbackProperty(function () {\r\n          return _tempPoints2\r\n        }, false),\r\n        ...options.style\r\n      }\r\n      _tempLineEntity2.position = new Cesium.CallbackProperty(function () {\r\n        return _positions[1]\r\n      }, false)\r\n      _tempLineEntity2.point = {\r\n        pixelSize: 5,\r\n        outlineColor: Cesium.Color.BLUE,\r\n        outlineWidth: 5\r\n      }\r\n      _tempLineEntity2.label = {\r\n        text: new Cesium.CallbackProperty(function () {\r\n          return (\r\n            '水平距离:' +\r\n            getPositionDistance(transformCartesianArrayToWGS84Array(_tempPoints2)) +\r\n            '米'\r\n          )\r\n        }, false),\r\n        show: true,\r\n        showBackground: true,\r\n        font: '14px monospace',\r\n        horizontalOrigin: Cesium.HorizontalOrigin.LEFT,\r\n        verticalOrigin: Cesium.VerticalOrigin.BOTTOM,\r\n        pixelOffset: new Cesium.Cartesian2(-150, -20) //left top\r\n      }\r\n      this._drawLayer.entities.add(_tempLineEntity2)\r\n      this._drawLayer.entities.add(_tempLineEntity)\r\n      this._drawLayer.entities.add(_trianglesEntity)\r\n    }\r\n  }\r\n  /**\r\n   * 画围栏\r\n   * @param {*} options\r\n   */\r\n  drawWallGraphics(options) {\r\n    options = options || {}\r\n    options.style = options.style || {\r\n      material: Cesium.Color.BLUE.withAlpha(0.5),\r\n      outline: true,\r\n      outlineColor: Cesium.Color.WHITE\r\n    }\r\n    if (this._viewer && options) {\r\n      const $this = this\r\n      this.drawPolygonGraphics({\r\n        callback: function (polygon, polygonObj) {\r\n          const wallEntity = $this._drawLayer.entities.add({\r\n            wall: {\r\n              positions: transformWGS84ArrayToCartesianArray(polygon),\r\n              ...options.style\r\n            }\r\n          })\r\n          if (typeof options.callback === 'function') {\r\n            options.callback(polygon, wallEntity)\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n  /**\r\n   * 绘制球体\r\n   * @param {*} options\r\n   */\r\n  drawEllipsoidGraphics(options) {\r\n    options = options || {}\r\n    options.style = options.style || {}\r\n    if (this._viewer && options) {\r\n      const $this = this\r\n      const cesiumGraphics = new CesiumGraphics($this._viewer)\r\n      this.drawCircleGraphics({\r\n        callback: function (result, obj) {\r\n          console.log(result)\r\n          const entity = cesiumGraphics.createGraphics()\r\n          entity.ellipsoid = cesiumGraphics.getEllipsoidGraphics({})\r\n          entity.position = result.center\r\n\r\n          $this._drawLayer.entities.remove(obj)\r\n\r\n          const ellipsoidObj = $this._drawLayer.entities.add(entity)\r\n\r\n          if (typeof options.callback === 'function') {\r\n            options.callback({ center: result.center, radius: result.radius }, ellipsoidObj)\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n  /**\r\n   * 绘制圆柱体 or 圆锥\r\n   * @param {*} options\r\n   */\r\n  drawCylinderGraphics(options) {\r\n    options = options || {}\r\n    options.style = options.style || {}\r\n    if (this._viewer && options) {\r\n      const $this = this\r\n      this.drawCircleGraphics({\r\n        callback: function (result, obj) {\r\n          const cylinderObj = $this._drawLayer.entities.add({\r\n            position: result.center,\r\n            cylinder: {\r\n              length: result.radius * 2 || options.length,\r\n              topRadius: options.topRadius || result.radius,\r\n              bottomRadius: options.bottomRadius || result.radius,\r\n              material: Cesium.Color.BLUE.withAlpha(0.5),\r\n              outline: true,\r\n              outlineColor: Cesium.Color.WHITE\r\n            }\r\n          })\r\n          $this._drawLayer.entities.remove(obj)\r\n\r\n          if (typeof options.callback === 'function') {\r\n            options.callback({ center: result.center, radius: result.radius }, cylinderObj)\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n  /**\r\n   * 绘制走廊\r\n   * @param {*} options\r\n   */\r\n  drawCorridorGraphics(options) {\r\n    options = options || {}\r\n    options.style = options.style || {}\r\n    if (this._viewer && options) {\r\n      const $this = this\r\n      $this.drawLineGraphics({\r\n        callback: function (line, lineObj) {\r\n          const entity = new Cesium.Entity()\r\n          entity.corridor = {\r\n            positions: transformWGS84ArrayToCartesianArray(line),\r\n            height: options.height || 1,\r\n            width: options.width || 100,\r\n            cornerType: Cesium.CornerType.BEVELED,\r\n            extrudedHeight: options.extrudedHeight || 1,\r\n            material: Cesium.Color.BLUE.withAlpha(0.5),\r\n            outline: true, // height required for outlines to display\r\n            outlineColor: Cesium.Color.WHITE\r\n          }\r\n\r\n          $this._drawLayer.entities.remove(lineObj)\r\n\r\n          const corridorObj = $this._drawLayer.entities.add(entity)\r\n\r\n          if (typeof options.callback === 'function') {\r\n            options.callback(line, corridorObj)\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n  /**\r\n   * 计算星型\r\n   * @param {*} arms\r\n   * @param {*} rOuter\r\n   * @param {*} rInner\r\n   */\r\n  computeStar2d = (arms, rOuter, rInner) => {\r\n    let angle = Math.PI / arms\r\n    let length = 2 * arms\r\n    let positions = new Array(length)\r\n    for (let i = 0; i < length; i++) {\r\n      let r = i % 2 === 0 ? rOuter : rInner\r\n      positions[i] = new Cesium.Cartesian2(Math.cos(i * angle) * r, Math.sin(i * angle) * r)\r\n    }\r\n    return positions\r\n  }\r\n  /**\r\n   * 绘制管道\r\n   * @param {*} options\r\n   */\r\n  drawPolylineVolumeGraphics(options) {\r\n    options = options || {}\r\n    options.style = options.style || {}\r\n    if (this._viewer && options) {\r\n      const $this = this\r\n      $this.drawLineGraphics({\r\n        callback: function (line, lineObj) {\r\n          const entity = new Cesium.Entity()\r\n          entity.polylineVolume = {\r\n            positions: transformWGS84ArrayToCartesianArray(line),\r\n            shape: $this.computeStar2d(7, 150, 300),\r\n            cornerType: Cesium.CornerType.MITERED,\r\n            material: Cesium.Color.BLUE\r\n          }\r\n          $this._drawLayer.entities.remove(lineObj)\r\n\r\n          const polylineVolumeObj = $this._drawLayer.entities.add(entity)\r\n\r\n          if (typeof options.callback === 'function') {\r\n            options.callback(line, polylineVolumeObj)\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\nexport default CesiumDraw\r\n"],"names":["CesiumDraw","viewer","__publicField","arms","rOuter","rInner","angle","length","positions","i","r","style","callback","_poiEntity","position","poiObj","_handlers","movement","cartesian","transformCartesianArrayToWGS84Array","options","_addInfoPoint","_labelEntity","getPositionDistance","$this","_lineEntity","lineObj","getCatesian3FromPX","create","_polygonEntity","polygon","polyObj","getPositionsArea","_handler","_positions","_rectangleEntity","_coordinates","rectangleObj","computeRadius","src","dest","srcCartographic","destCartographic","geodesic","s","_radius","drawGraphics","_circleEntity","_center","circleObj","_getHeading","startPosition","endPosition","cartographic","_computesHorizontalLine","cartographic2","_trianglesEntity","_tempLineEntity","_tempLineEntity2","_tempPoints","_tempPoints2","horizontalPosition","__spreadValues","polygonObj","wallEntity","transformWGS84ArrayToCartesianArray","cesiumGraphics","CesiumGraphics","result","obj","entity","ellipsoidObj","cylinderObj","line","corridorObj","polylineVolumeObj"],"mappings":"yfAgBA,MAAAA,CAAA,CAAiB,YAAAC,EAAA,CAqsBfC,EAAA,qBAAA,CAAAC,EAAAC,EAAAC,IAAA,CAQE,IAAAC,EAAA,KAAA,GAAAH,EACAI,EAAA,EAAAJ,EACAK,EAAA,IAAA,MAAAD,CAAA,EACA,QAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAA,CACE,IAAAC,EAAAD,EAAA,IAAA,EAAAL,EAAAC,EACAG,EAAAC,CAAA,EAAA,IAAA,OAAA,WAAA,KAAA,IAAAA,EAAAH,CAAA,EAAAI,EAAA,KAAA,IAAAD,EAAAH,CAAA,EAAAI,CAAA,CAAqF,CAEvF,OAAAF,CAAO,GA/sBP,KAAA,QAAAP,EAEA,KAAA,WAAA,IAAA,OAAA,iBAAA,WAAA,EAEAA,GAAAA,EAAA,YAAA,IAAA,KAAA,UAAA,CAAgD,CAClD,IAAA,WAAA,CAGE,OAAA,KAAA,UAAY,CACd,kBAAA,CAQkB,MAAAU,EAAA,CACR,MAAA,iCACC,MAAA,GACA,OAAA,GACC,cAAA,GACO,MAAA,EACR,YAAA,IAAA,OAAA,WAAA,EAAA,GAAA,CACkC,EAC3C,SAAAC,EAAA,IAAA,CACiB,CAAC,EAAA,CAGlB,IAAAC,EAAA,IAAA,OAAA,OAAAC,EAAAN,EAAA,GAAAO,EAAAC,EAAA,IAAA,OAAA,wBAAA,KAAA,QAAA,MAAA,MAAA,EAMAA,EAAA,eAAAC,GAAA,CACE,MAAAC,EAAA,KAAA,QAAA,MAAA,OAAA,cAA4CD,EAAA,SACjC,KAAA,QAAA,MAAA,MAAA,SACgB,EAE3BC,GAAAA,EAAA,IACEJ,EAAAI,EAEAV,EAAA,KAAAU,CAAA,EACF,EAAA,OAAA,qBAAA,UAAA,EAGFF,EAAA,eAAAC,GAAA,CACED,EAAA,QAAA,EACAA,EAAA,KAEA,OAAAJ,GAAA,YACEA,EAAAO,EAAAX,CAAA,EAAAO,CAAA,CACF,EAAA,OAAA,qBAAA,WAAA,EAIFF,EAAA,UAAAF,EACAE,EAAA,SAAA,IAAA,OAAA,iBAAA,UAAA,CACE,OAAAC,CAAO,EAAA,EAAA,EAITC,EAAA,KAAA,WAAA,SAAA,IAAAF,CAAA,CAAgD,CAClD,iBAAAO,EAAA,CAOE,GADAA,EAAAA,GAAA,GACA,KAAA,SAAAA,EAAA,CAgEE,IAAAC,EAAA,SAAAP,EAAA,CACE,MAAAQ,EAAA,IAAA,OAAA,OACAA,EAAA,SAAAR,EACAQ,EAAA,MAAA,CAAqB,UAAA,GACR,aAAA,OAAA,MAAA,KACgB,aAAA,CACb,EAEhBA,EAAA,MAAA,CAAqB,MAAAC,EAAAJ,EAAAX,CAAA,CAAA,EAAA,KAAA,QAE4D,CAC3E,EAAA,KACE,KAAA,GACA,eAAA,GACU,KAAA,iBACV,gBAAA,OAAA,MAAA,OAAA,UAAA,EAAA,EAC4C,UAAA,OAAA,MAAA,MAC1B,iBAAA,OAAA,iBAAA,KACkB,eAAA,OAAA,eAAA,OACJ,YAAA,IAAA,OAAA,WAAA,IAAA,GAAA,CACK,EAE7CgB,EAAA,WAAA,SAAA,IAAAF,CAAA,CAA0C,EArF5Cd,EAAA,CAAA,EAAAiB,EAAA,IAAA,OAAA,OAAAD,EAAA,KAAAE,EAAAV,EAAA,IAAA,OAAA,wBAAA,KAAA,QAAA,MAAA,MAAA,EAMAA,EAAA,eAAA,SAAAC,EAAA,CACE,MAAAC,EAAAS,EAAAH,EAAA,QAAAP,EAAA,QAAA,EACAC,GAAAA,EAAA,IACEV,EAAA,QAAA,GACEA,EAAA,KAAAU,EAAA,MAAA,CAAA,EAEFE,EAAA,SACEC,EAAAH,CAAA,EAGFV,EAAA,QAAA,GAAAY,EAAA,OAAA,iBACEJ,EAAA,QAAA,EACAA,EAAA,KACA,OAAAI,EAAA,UAAA,YACEA,EAAA,SAAAD,EAAAX,CAAA,EAAAkB,CAAA,GAGJlB,EAAA,KAAAU,CAAA,EACF,EAAA,OAAA,qBAAA,UAAA,EAGFF,EAAA,eAAA,SAAAC,EAAA,CACE,MAAAC,EAAAS,EAAAH,EAAA,QAAAP,EAAA,WAAA,EACAT,EAAA,QAAA,GACEU,GAAAA,EAAA,IACEV,EAAA,IAAA,EACAA,EAAA,KAAAU,CAAA,EAEJ,EAAA,OAAA,qBAAA,UAAA,EAGFF,EAAA,eAAA,SAAAC,EAAA,CACED,EAAA,QAAA,EACAA,EAAA,KAEA,MAAAE,EAAAS,EAAAH,EAAA,QAAAP,EAAA,QAAA,EACAG,EAAA,SACEC,EAAAH,CAAA,EAEF,OAAAE,EAAA,UAAA,YACEA,EAAA,SAAAD,EAAAX,CAAA,EAAAkB,CAAA,CACF,EAAA,OAAA,qBAAA,WAAA,EAGFD,EAAA,SAAA,CAAuB,MAAAL,EAAA,OAAA,EACG,SAAAA,EAAA,UAAA,OAAA,MAAA,KAAA,UAAA,EAAA,EACqC,cAAAA,EAAA,eAAA,GACrB,WAAAA,EAAA,YAAA,EACN,EAEpCK,EAAA,SAAA,UAAA,IAAA,OAAA,iBAAA,UAAA,CACE,OAAAjB,CAAO,EAAA,EAAA,EAGTkB,EAAA,KAAA,WAAA,SAAA,IAAAD,CAAA,CAAkD,CA2BpD,CACF,oBAAAL,EAAA,CAaE,GANAA,EAAAA,GAAA,GACAA,EAAA,MAAAA,EAAA,OAAA,CAAiC,MAAA,EACxB,SAAA,OAAA,MAAA,KAAA,UAAA,EAAA,EACkC,cAAA,EAC1B,EAEjB,KAAA,SAAAA,EAAA,CAuDE,IAAAQ,EAAA,UAAA,CACEC,EAAA,SAAAT,EAAA,MAEAS,EAAA,SAAA,UAAA,IAAA,OAAA,iBAAA,UAAA,CACE,OAAArB,CAAO,EAAA,EAAA,EAGTqB,EAAA,QAAA,CAAyB,UAAA,IAAA,OAAA,iBAAA,UAAA,CAErB,OAAAC,CAAO,EAAA,EAAA,EACD,SAAA,OAAA,MAAA,MAAA,UAAA,EAAA,EAEkC,cAAAV,EAAA,eAAA,EACF,EAE1CS,EAAA,WAAA,GAEAE,EAAAP,EAAA,WAAA,SAAA,IAAAK,CAAA,CAAsD,EAAAR,EAAA,SAAAP,EAAA,CAItD,MAAAQ,EAAA,IAAA,OAAA,OACAA,EAAA,SAAAR,EACAQ,EAAA,MAAA,CAAqB,UAAA,GACR,aAAA,OAAA,MAAA,KACgB,aAAA,CACb,EAEhBA,EAAA,MAAA,CAAqB,MAAAU,EAAAb,EAAAX,CAAA,CAAA,EAAA,KAAA,QAE8D,CAC7E,EAAA,OACE,KAAA,GACA,eAAA,GACU,KAAA,iBACV,gBAAA,OAAA,MAAA,OAAA,UAAA,EAAA,EAC4C,UAAA,OAAA,MAAA,MAC1B,iBAAA,OAAA,iBAAA,KACkB,eAAA,OAAA,eAAA,OACJ,YAAA,IAAA,OAAA,WAAA,IAAA,GAAA,CACK,EAE7CgB,EAAA,WAAA,SAAA,IAAAF,CAAA,CAA0C,EAhG5Cd,EAAA,CAAA,EAAAsB,EAAA,IAAA,OAAA,iBAAAD,EAAA,IAAA,OAAA,OAAAL,EAAA,KAAAO,EAAA,KAAAE,EAAA,IAAA,OAAA,wBAAA,KAAA,QAAA,MAAA,MAAA,EAQAA,EAAA,eAAA,SAAAhB,EAAA,CACE,MAAAC,EAAAS,EAAAH,EAAA,QAAAP,EAAA,QAAA,EACAC,GAAAA,EAAA,IACEV,EAAA,QAAA,IACEsB,EAAA,UAAA,KAAAZ,EAAA,MAAA,CAAA,EACAV,EAAA,KAAAU,EAAA,MAAA,CAAA,GAEFV,EAAA,KAAAU,EAAA,MAAA,CAAA,EACAY,EAAA,UAAA,KAAAZ,EAAA,MAAA,CAAA,EAEAa,GAAcH,IAChB,EAAA,OAAA,qBAAA,UAAA,EAGFK,EAAA,eAAA,SAAAhB,EAAA,CACE,MAAAC,EAAAS,EAAAH,EAAA,QAAAP,EAAA,WAAA,EACAT,EAAA,QAAA,GACEU,GAAAA,EAAA,IACEV,EAAA,IAAA,EACAA,EAAA,KAAAU,CAAA,EACAY,EAAA,UAAA,MACAA,EAAA,UAAA,KAAAZ,CAAA,EAEJ,EAAA,OAAA,qBAAA,UAAA,EAIFe,EAAA,eAAA,SAAAhB,EAAA,CACEgB,EAAA,QAAA,EAEAzB,EAAA,KAAAA,EAAA,CAAA,CAAA,EAEAY,EAAA,SAEES,EAAA,QAAA,eAAAT,EAAA,OACAS,EAAA,QAAA,SAAA,OAAA,MAAA,KAAA,UAAA,EAAA,GAEFT,EAAA,SAEEC,EAAAb,EAAA,CAAA,CAAA,EAEF,OAAAY,EAAA,UAAA,YACEA,EAAA,SAAAD,EAAAX,CAAA,EAAAuB,CAAA,CACF,EAAA,OAAA,qBAAA,WAAA,CACwC,CA8C5C,CACF,sBAAAX,EAAA,CAaE,GANAA,EAAAA,GAAA,GACAA,EAAA,MAAAA,EAAA,OAAA,CAAiC,MAAA,EACxB,SAAA,OAAA,MAAA,KAAA,UAAA,EAAA,EACkC,cAAA,EAC1B,EAEjB,KAAA,SAAAA,EAAA,CACE,IAAAc,EAAA,GAAAC,EAAA,IAAA,OAAA,OAAAC,EAAA,IAAA,OAAA,UAAAZ,EAAA,KAAAa,EAAAJ,EAAA,IAAA,OAAA,wBAAA,KAAA,QAAA,MAAA,MAAA,EAOAA,EAAA,eAAA,SAAAhB,EAAA,CACE,MAAAC,EAAAS,EAAAH,EAAA,QAAAP,EAAA,QAAA,EACAC,GAAAA,EAAA,IACEgB,EAAA,QAAA,EACEA,EAAA,KAAAhB,EAAA,MAAA,CAAA,GAEAe,EAAA,QAAA,EAEAC,EAAA,KAAAhB,EAAA,MAAA,CAAA,EAEAkB,EAAA,OAAA,UAAA,mBAAgC,CAAA,GAAAF,EAAAhB,CAAA,EACL,OAAA,UAAA,KACR,EAGnB,OAAAE,EAAA,UAAA,YACEA,EAAA,SAAAD,EAAAe,CAAA,EAAAG,CAAA,GAGN,EAAA,OAAA,qBAAA,UAAA,EAGFJ,EAAA,eAAA,SAAAhB,EAAA,CACE,MAAAC,EAAAS,EAAAH,EAAA,QAAAP,EAAA,WAAA,EAEAC,IACEkB,EAAA,OAAA,UAAA,mBAAgC,CAAA,GAAAF,EAAAhB,CAAA,EACL,OAAA,UAAA,KACR,EAErB,EAAA,OAAA,qBAAA,UAAA,EAGFiB,EAAA,UAAAf,EAAA,MAEAA,EAAA,SAAoBe,EAAA,UAAA,eAAAf,EAAA,QACpBe,EAAA,UAAA,YAAA,IAAA,OAAA,iBAAA,UAAA,CACE,OAAAC,CAAO,EAAA,EAAA,EAETC,EAAA,KAAA,WAAA,SAAA,IAAAF,CAAA,CAA4D,CAC9D,CACF,mBAAAf,EAAA,CAYE,GANAA,EAAAA,GAAA,GACAA,EAAA,MAAAA,EAAA,OAAA,CAAiC,MAAA,EACxB,SAAA,OAAA,MAAA,KAAA,UAAA,EAAA,EACkC,cAAA,EAC1B,EAEjB,KAAA,SAAAA,EAAA,CASE,IAAAkB,EAAA,SAAAC,EAAAC,EAAA,CACE,MAAAC,EAAA,OAAA,aAAA,cAAAF,CAAA,EACAG,EAAA,OAAA,aAAA,cAAAF,CAAA,EACAG,EAAA,IAAA,OAAA,kBACAA,EAAA,aAAAF,EAAAC,CAAA,EACA,MAAAE,EAAAD,EAAA,gBACAE,EAAA,KAAA,KAAe,KAAA,IAAAD,EAAA,CAAA,EAAA,KAAA,IAAAF,EAAA,OAAAD,EAAA,OAAA,CAAA,CAEgE,CAC/E,EAAAK,EAAA,UAAA,CAIAC,EAAA,QAAA3B,EAAA,MACA2B,EAAA,QAAA,cAAA,IAAA,OAAA,iBAAA,UAAA,CACE,OAAAF,CAAO,EAAA,EAAA,EAETE,EAAA,QAAA,cAAA,IAAA,OAAA,iBAAA,UAAA,CACE,OAAAF,CAAO,EAAA,EAAA,EAETE,EAAA,SAAA,IAAA,OAAA,iBAAA,UAAA,CACE,OAAAC,CAAO,EAAA,EAAA,EAGTD,EAAA,MAAA,CAAsB,UAAA,EACT,aAAA,OAAA,MAAA,IACgB,aAAA,CACb,EAGhB3B,EAAA,SAAoB2B,EAAA,QAAA,eAAA3B,EAAA,QAEpB6B,EAAAzB,EAAA,WAAA,SAAA,IAAAuB,CAAA,CAAuD,EAxCzDC,EAAAD,EAAA,IAAA,OAAA,OAAAvB,EAAA,KAAAyB,EAAAJ,EAAA,EAAAZ,EAAA,IAAA,OAAA,wBAAA,KAAA,QAAA,MAAA,MAAA,EA2CAA,EAAA,eAAA,SAAAhB,EAAA,CACE,MAAAC,EAAAS,EAAAH,EAAA,QAAAP,EAAA,QAAA,EAEAC,GAAAA,EAAA,IACE8B,GAKEV,EAAAU,EAAA9B,CAAA,EAEAe,EAAA,QAAA,EAEA,OAAAb,EAAA,UAAA,YACEA,EAAA,SAAA,CAAA,OAAA4B,EAAA,OAAAH,CAAA,EAAAI,CAAA,IATFD,EAAA9B,EAEA4B,KAUJ,EAAA,OAAA,qBAAA,UAAA,EAGFb,EAAA,eAAA,SAAAhB,EAAA,CACE,MAAAC,EAAAM,EAAA,QAAA,MAAA,OAAA,cAA6CP,EAAA,YAClCO,EAAA,QAAA,MAAA,MAAA,SACiB,EAE5BwB,GAAA9B,GAAAA,EAAA,GACEoB,EAAAU,EAAA9B,CAAA,CACF,EAAA,OAAA,qBAAA,UAAA,CACuC,CAC3C,CACF,sBAAAE,EAAA,CAWE,GALAA,EAAAA,GAAA,GACAA,EAAA,MAAAA,EAAA,OAAA,CAAiC,MAAA,EACxB,SAAA,OAAA,MAAA,KAAA,UAAA,EAAA,CACkC,EAE3C,KAAA,SAAAA,EAAA,CAUE,IAAA8B,EAAA,SAAAC,EAAAC,EAAA,CAEE,GADA,CAAAD,GAAA,CAAAC,GACA,OAAA,WAAA,OAAAD,EAAAC,CAAA,EAA0D,MAAA,GAC1D,MAAAC,EAAA,OAAA,aAAA,cAAAF,CAAA,EAEA,OADA,OAAA,aAAA,cAAAC,CAAA,EACA,OAAAC,EAAA,QAAA,QAAA,CAAA,CAA6D,EAAAC,EAAA,SAAA9C,EAAA,CAI7D,MAAA6C,EAAA,OAAA,aAAA,cAAA7C,EAAA,CAAA,CAAA,EACA+C,EAAA,OAAA,aAAA,cAAA/C,EAAA,CAAA,CAAA,EACA,OAAA,OAAA,WAAA,YAAyB,OAAA,KAAA,UAAA6C,EAAA,SAAA,EACqB,OAAA,KAAA,UAAAA,EAAA,QAAA,EACDE,EAAA,MAC7B,CAChB,EAxBF,MAAAC,EAAA,IAAA,OAAA,OAAAC,EAAA,IAAA,OAAA,OAAAC,EAAA,IAAA,OAAA,OAAAxB,EAAA,CAAA,EAAAyB,EAAA,CAAA,EAAAC,EAAA,CAAA,EAAApC,EAAA,KAAAS,EAAA,IAAA,OAAA,wBAAA,KAAA,QAAA,MAAA,MAAA,EA2BAA,EAAA,eAAA,SAAAhB,EAAA,CACE,MAAAH,EAAAa,EAAAH,EAAA,QAAAP,EAAA,QAAA,EACA,GAAA,CAAAH,EAAe,MAAA,GACfoB,EAAA,QAAA,GACEA,EAAA,KAAApB,EAAA,MAAA,CAAA,EACAoB,EAAA,KAAApB,EAAA,MAAA,CAAA,EACA6C,EAAA,KAAA7C,EAAA,MAAA,CAAA,EACA6C,EAAA,KAAA7C,EAAA,MAAA,CAAA,IAEAmB,EAAA,QAAA,EACA,OAAAb,EAAA,UAAA,YACEA,EAAA,SAAA,CAAA,EAAAoC,EAAA,GAAAC,EAAA,GAAAC,CAAA,CAAA,EAEJ,EAAA,OAAA,qBAAA,UAAA,EAGFzB,EAAA,eAAA,SAAAhB,EAAA,CACE,MAAAH,EAAAa,EAAAH,EAAA,QAAAP,EAAA,WAAA,EACA,GAAAH,GAAAoB,EAAA,OAAA,EAAA,CAEEA,EAAA,IAAA,EACAA,EAAA,KAAApB,EAAA,MAAA,CAAA,EACA,MAAA+C,EAAAP,EAAApB,CAAA,EAEAyB,EAAA,IAAA,EACAA,EAAA,KAAAE,EAAA,MAAA,CAAA,EAEAD,EAAA,IAAA,EAAAA,EAAA,IAAA,EACAA,EAAA,KAAA9C,EAAA,MAAA,CAAA,EACA8C,EAAA,KAAAC,EAAA,MAAA,CAAA,CAA4C,CAC9C,EAAA,OAAA,qBAAA,UAAA,EAMFL,EAAA,SAAAM,EAAA,CAA4B,UAAA,IAAA,OAAA,iBAAA,UAAA,CAExB,OAAA5B,CAAO,EAAA,EAAA,GACDd,EAAA,OAGVoC,EAAA,SAAA,IAAA,OAAA,iBAAA,UAAA,CACE,OAAAtB,EAAA,CAAA,CAAmB,EAAA,EAAA,EAErBsB,EAAA,MAAA,CAAyB,UAAA,EACZ,aAAA,OAAA,MAAA,KACgB,aAAA,CACb,EAEhBA,EAAA,MAAA,CAAyB,KAAA,IAAA,OAAA,iBAAA,UAAA,CAErB,MAAA,MAAAjC,EAAAJ,EAAAe,CAAA,CAAA,EAAA,GACiF,EAAA,EAAA,EAE3E,KAAA,GACF,eAAA,GACU,KAAA,iBACV,iBAAA,OAAA,iBAAA,KACoC,eAAA,OAAA,eAAA,OACJ,YAAA,IAAA,OAAA,WAAA,GAAA,IAAA,CACK,EAG7CuB,EAAA,SAAAK,EAAA,CAA2B,UAAA,IAAA,OAAA,iBAAA,UAAA,CAEvB,OAAAH,CAAO,EAAA,EAAA,GACDvC,EAAA,OAGVqC,EAAA,SAAA,IAAA,OAAA,iBAAA,UAAA,CACE,OAAAG,EAAA,CAAA,CAAqB,EAAA,EAAA,EAEvBH,EAAA,MAAA,CAAwB,UAAA,EACX,aAAA,OAAA,MAAA,KACgB,aAAA,CACb,EAEhBA,EAAA,MAAA,CAAwB,KAAA,IAAA,OAAA,iBAAA,UAAA,CAEpB,MAAA,MAAAP,EAAAS,EAAA,CAAA,EAAAA,EAAA,CAAA,CAAA,EAAA,GAA6D,EAAA,EAAA,EACvD,KAAA,GACF,eAAA,GACU,KAAA,iBACV,iBAAA,OAAA,iBAAA,KACoC,eAAA,OAAA,eAAA,OACJ,YAAA,IAAA,OAAA,WAAA,IAAA,GAAA,CACK,EAG7CD,EAAA,SAAAI,EAAA,CAA4B,UAAA,IAAA,OAAA,iBAAA,UAAA,CAExB,OAAAF,CAAO,EAAA,EAAA,GACDxC,EAAA,OAGVsC,EAAA,SAAA,IAAA,OAAA,iBAAA,UAAA,CACE,OAAAxB,EAAA,CAAA,CAAmB,EAAA,EAAA,EAErBwB,EAAA,MAAA,CAAyB,UAAA,EACZ,aAAA,OAAA,MAAA,KACgB,aAAA,CACb,EAEhBA,EAAA,MAAA,CAAyB,KAAA,IAAA,OAAA,iBAAA,UAAA,CAErB,MAAA,QAAAnC,EAAAJ,EAAAyC,CAAA,CAAA,EAAA,GAGE,EAAA,EAAA,EAEI,KAAA,GACF,eAAA,GACU,KAAA,iBACV,iBAAA,OAAA,iBAAA,KACoC,eAAA,OAAA,eAAA,OACJ,YAAA,IAAA,OAAA,WAAA,KAAA,GAAA,CACM,EAE9C,KAAA,WAAA,SAAA,IAAAF,CAAA,EACA,KAAA,WAAA,SAAA,IAAAD,CAAA,EACA,KAAA,WAAA,SAAA,IAAAD,CAAA,CAA6C,CAC/C,CACF,iBAAApC,EAAA,CAYE,GANAA,EAAAA,GAAA,GACAA,EAAA,MAAAA,EAAA,OAAA,CAAiC,SAAA,OAAA,MAAA,KAAA,UAAA,EAAA,EACU,QAAA,GAChC,aAAA,OAAA,MAAA,KACkB,EAE7B,KAAA,SAAAA,EAAA,CACE,MAAAI,EAAA,KACA,KAAA,oBAAA,CAAyB,SAAA,SAAAM,EAAAiC,EAAA,CAErB,MAAAC,EAAAxC,EAAA,WAAA,SAAA,IAAA,CAAiD,KAAAsC,EAAA,CACzC,UAAAG,EAAAnC,CAAA,GACkDV,EAAA,MAExD,CAAA,EAEF,OAAAA,EAAA,UAAA,YACEA,EAAA,SAAAU,EAAAkC,CAAA,CACF,CACF,CAAA,CACD,CACH,CACF,sBAAA5C,EAAA,CAQE,GAFAA,EAAAA,GAAA,GACAA,EAAA,MAAAA,EAAA,OAAA,CAAA,EACA,KAAA,SAAAA,EAAA,CACE,MAAAI,EAAA,KACA0C,EAAA,IAAAC,EAAA3C,EAAA,OAAA,EACA,KAAA,mBAAA,CAAwB,SAAA,SAAA4C,EAAAC,EAAA,CAEpB,QAAA,IAAAD,CAAA,EACA,MAAAE,EAAAJ,EAAA,iBACAI,EAAA,UAAAJ,EAAA,qBAAA,CAAA,CAAA,EACAI,EAAA,SAAAF,EAAA,OAEA5C,EAAA,WAAA,SAAA,OAAA6C,CAAA,EAEA,MAAAE,EAAA/C,EAAA,WAAA,SAAA,IAAA8C,CAAA,EAEA,OAAAlD,EAAA,UAAA,YACEA,EAAA,SAAA,CAAA,OAAAgD,EAAA,OAAA,OAAAA,EAAA,QAAAG,CAAA,CACF,CACF,CAAA,CACD,CACH,CACF,qBAAAnD,EAAA,CAQE,GAFAA,EAAAA,GAAA,GACAA,EAAA,MAAAA,EAAA,OAAA,CAAA,EACA,KAAA,SAAAA,EAAA,CACE,MAAAI,EAAA,KACA,KAAA,mBAAA,CAAwB,SAAA,SAAA4C,EAAAC,EAAA,CAEpB,MAAAG,EAAAhD,EAAA,WAAA,SAAA,IAAA,CAAkD,SAAA4C,EAAA,OAC/B,SAAA,CACP,OAAAA,EAAA,OAAA,GAAAhD,EAAA,OAC6B,UAAAA,EAAA,WAAAgD,EAAA,OACE,aAAAhD,EAAA,cAAAgD,EAAA,OACM,SAAA,OAAA,MAAA,KAAA,UAAA,EAAA,EACJ,QAAA,GAChC,aAAA,OAAA,MAAA,KACkB,CAC7B,CAAA,EAEF5C,EAAA,WAAA,SAAA,OAAA6C,CAAA,EAEA,OAAAjD,EAAA,UAAA,YACEA,EAAA,SAAA,CAAA,OAAAgD,EAAA,OAAA,OAAAA,EAAA,QAAAI,CAAA,CACF,CACF,CAAA,CACD,CACH,CACF,qBAAApD,EAAA,CAQE,GAFAA,EAAAA,GAAA,GACAA,EAAA,MAAAA,EAAA,OAAA,CAAA,EACA,KAAA,SAAAA,EAAA,CACE,MAAAI,EAAA,KACAA,EAAA,iBAAA,CAAuB,SAAA,SAAAiD,EAAA/C,EAAA,CAEnB,MAAA4C,EAAA,IAAA,OAAA,OACAA,EAAA,SAAA,CAAkB,UAAAL,EAAAQ,CAAA,EACmC,OAAArD,EAAA,QAAA,EACzB,MAAAA,EAAA,OAAA,IACF,WAAA,OAAA,WAAA,QACM,eAAAA,EAAA,gBAAA,EACY,SAAA,OAAA,MAAA,KAAA,UAAA,EAAA,EACD,QAAA,GAChC,aAAA,OAAA,MAAA,KACkB,EAG7BI,EAAA,WAAA,SAAA,OAAAE,CAAA,EAEA,MAAAgD,EAAAlD,EAAA,WAAA,SAAA,IAAA8C,CAAA,EAEA,OAAAlD,EAAA,UAAA,YACEA,EAAA,SAAAqD,EAAAC,CAAA,CACF,CACF,CAAA,CACD,CACH,CAiBF,2BAAAtD,EAAA,CAQE,GAFAA,EAAAA,GAAA,GACAA,EAAA,MAAAA,EAAA,OAAA,CAAA,EACA,KAAA,SAAAA,EAAA,CACE,MAAAI,EAAA,KACAA,EAAA,iBAAA,CAAuB,SAAA,SAAAiD,EAAA/C,EAAA,CAEnB,MAAA4C,EAAA,IAAA,OAAA,OACAA,EAAA,eAAA,CAAwB,UAAAL,EAAAQ,CAAA,EAC6B,MAAAjD,EAAA,cAAA,EAAA,IAAA,GAAA,EACb,WAAA,OAAA,WAAA,QACR,SAAA,OAAA,MAAA,IACP,EAEzBA,EAAA,WAAA,SAAA,OAAAE,CAAA,EAEA,MAAAiD,EAAAnD,EAAA,WAAA,SAAA,IAAA8C,CAAA,EAEA,OAAAlD,EAAA,UAAA,YACEA,EAAA,SAAAqD,EAAAE,CAAA,CACF,CACF,CAAA,CACD,CACH,CAEJ"}
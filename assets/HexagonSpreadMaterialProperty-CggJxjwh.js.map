{"version":3,"file":"HexagonSpreadMaterialProperty-CggJxjwh.js","sources":["../../src/components/Cesium/CesiumMaterialProperty/CustomMaterialLine.ts","../../src/components/Cesium/CesiumMaterialProperty/WaveCircleMaterial.ts","../../src/components/Cesium/CesiumMaterialProperty/CircleFadeMaterial.ts","../../src/components/Cesium/CesiumMaterialProperty/CustomMaterialWall.ts","../../src/components/Cesium/CesiumMaterialProperty/dynamicWallMaterialProperty.ts","../../src/components/Cesium/CesiumMaterialProperty/PolylineTrailLinkMaterialProperty.ts","../../src/components/Cesium/CesiumMaterialProperty/Spriteline1MaterialProperty.ts","../../src/components/Cesium/CesiumMaterialProperty/lineFlickerMaterialProperty.ts","../../src/components/Cesium/CesiumMaterialProperty/LineFlowMaterialProperty.ts","../../src/components/Cesium/CesiumMaterialProperty/HexagonSpreadMaterialProperty.ts"],"sourcesContent":["import {\r\n  defaultValue,\r\n  defined,\r\n  createPropertyDescriptor,\r\n  Event,\r\n  Material,\r\n  Color,\r\n  Property\r\n} from 'cesium'\r\n\r\n/**\r\n *  @description 流动线条材质 单段\r\n *  @param {String} options.color 颜色\r\n *  @param {Number} options.duration 持续时间\r\n *  @param {String} options.image 图片\r\n *  @author jh\r\n *  @date 2024-04-10\r\n *  @use\r\n *  CustomMaterial({\r\n        image: '/src/assets/image/line.png',\r\n        color: Cesium.Color.WHITE,\r\n        duration: 2000\r\n      })\r\n * */\r\n\r\n// 完整调用方式\r\n// viewer.entities.add({\r\n// \tpolyline: {\r\n// \t\tpositions: [\r\n// \t\t\tCesium.Cartesian3.fromDegrees(120.5, 30.1, 0),\r\n// \t\t\tCesium.Cartesian3.fromDegrees(120.2, 30.5, 0),\r\n// \t\t],\r\n// \t\twidth: 10,\r\n// \t\tmaterial: CustomMaterial({\r\n// \t\t\timage: '/src/assets/image/line.png',\r\n// \t\t\tcolor: Cesium.Color.WHITE,\r\n// \t\t\tduration: 2000\r\n// \t\t}),\r\n// \t}\r\n// });\r\nclass PolylineCustomMaterialProperty {\r\n  declare _definitionChanged: Event\r\n\r\n  declare _color: undefined\r\n\r\n  declare _colorSubscription: undefined\r\n\r\n  declare color: string\r\n\r\n  declare duration: number\r\n\r\n  declare _time: any\r\n\r\n  declare image: string\r\n\r\n  constructor(options) {\r\n    //@ts-ignore\r\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT)\r\n\r\n    this._definitionChanged = new Event()\r\n\r\n    this._color = undefined\r\n\r\n    this._colorSubscription = undefined\r\n\r\n    this.color = options.color\r\n\r\n    this.duration = defaultValue(options.duration, 1000)\r\n\r\n    this._time = undefined\r\n\r\n    this.image = options.image\r\n\r\n    this.init()\r\n  }\r\n\r\n  private init() {\r\n    Material.PolylineCustomMaterialType = 'PolylineCustomMaterial'\r\n    // 将定义的材质对象添加到cesium的材质队列中\r\n    Material._materialCache.addMaterial('PolylineCustomMaterial', {\r\n      fabric: {\r\n        type: 'PolylineCustomMaterial',\r\n        uniforms: {\r\n          color: new Color(1, 0.0, 0.0, 1),\r\n          image: this.image,\r\n          time: 20\r\n        },\r\n        // 动态材质shader\r\n        source:\r\n          'czm_material czm_getMaterial(czm_materialInput materialInput)\\n\\\r\n                    {\\n\\\r\n                        czm_material material = czm_getDefaultMaterial(materialInput);\\n\\\r\n                        vec2 st = materialInput.st;\\n\\\r\n                        \\n\\\r\n                        if(texture2D(image, vec2(0.0, 0.0)).a == 1.0){\\n\\\r\n                            discard;\\n\\\r\n                        }else{\\n\\\r\n                            material.alpha = texture2D(image, vec2(1.0 - fract(time - st.s), st.t)).a * color.a;\\n\\\r\n                        }\\n\\\r\n                        \\n\\\r\n                        material.diffuse = max(color.rgb * material.alpha * 3.0, color.rgb);\\n\\\r\n                        \\n\\\r\n                        return material;\\n\\\r\n                    }\\n\\\r\n                    '\r\n      },\r\n      // 透明\r\n      translucent: function (material) {\r\n        return true\r\n      }\r\n    })\r\n  }\r\n\r\n  private getType() {\r\n    //@ts-ignore\r\n    return Material.PolylineCustomMaterialType\r\n  }\r\n\r\n  private getValue(time, result) {\r\n    if (!defined(result)) {\r\n      result = {}\r\n    }\r\n\r\n    //@ts-ignore\r\n    result.color = Property.getValueOrClonedDefault(this._color, time, Color.WHITE, result.color)\r\n\r\n    result.image = this.image\r\n\r\n    if (this._time === undefined) {\r\n      this._time = time.secondsOfDay\r\n    }\r\n    result.time = ((time.secondsOfDay - this._time) * 1000) / this.duration\r\n\r\n    return result\r\n  }\r\n\r\n  private equals(other) {\r\n    //@ts-ignore\r\n    return (\r\n      this === other ||\r\n      (other instanceof PolylineCustomMaterialProperty &&\r\n        Property.equals(this._color, other._color))\r\n    )\r\n  }\r\n\r\n  get isvarant() {\r\n    return false\r\n  }\r\n\r\n  get definitionChanged() {\r\n    return this._definitionChanged\r\n  }\r\n}\r\n\r\nObject.defineProperties(PolylineCustomMaterialProperty.prototype, {\r\n  color: createPropertyDescriptor('color')\r\n})\r\n\r\nconst CustomMaterial = (options: object): PolylineCustomMaterialProperty => {\r\n  return new PolylineCustomMaterialProperty(options)\r\n}\r\n\r\nexport default CustomMaterial\r\n","import {\r\n  defaultValue,\r\n  defined,\r\n  createPropertyDescriptor,\r\n  Event,\r\n  Material,\r\n  Color,\r\n  Property\r\n} from 'cesium'\r\n/**\r\n *  @description 波动圆材质\r\n *  @param {String} options.color 颜色\r\n *  @param {Number} options.duration 持续时间\r\n *  @param {Number} options.count 环数（>0）\r\n *  @param {Number} options.gradient 倾斜度（0-1）\r\n *  @author jh\r\n *  @date 2024-04-10\r\n *  @use new WaveCircleMaterial({\r\n        duration: 2e3,\r\n\r\n        gradient: 0,\r\n\r\n        color: new Cesium.Color(1.0, 0.0, 0.0, 1.0),\r\n\r\n        count: 3\r\n      })\r\n * */\r\n\r\n// 完整调用方式\r\n// viewer.entities.add({\r\n// \tname: 'ellipse',\r\n// \tposition: Cesium.Cartesian3.fromDegrees(120, 30, 5),\r\n// \tellipse: {\r\n// \t\tsemiMajorAxis: 500,\r\n// \t\tsemiMinorAxis: 500,\r\n// \t\tmaterial: WaveCircleMaterial({\r\n// \t\t\tduration: 2e3,\r\n//\r\n// \t\t\tgradient: 0,\r\n//\r\n// \t\t\tcolor: new Cesium.Color(1.0, 0.0, 0.0, 1.0),\r\n//\r\n// \t\t\tcount: 3\r\n// \t\t})\r\n// \t}\r\n// })\r\n\r\nclass CircleWaveMaterialProperty {\r\n  declare _definitionChanged: Event\r\n\r\n  declare _color: undefined\r\n\r\n  declare _colorSubscription: undefined\r\n\r\n  declare color: string\r\n\r\n  declare duration: number\r\n\r\n  declare count: number\r\n\r\n  declare gradient: number\r\n\r\n  declare _time: any\r\n\r\n  // 存储单例\r\n  private static instance\r\n\r\n  // 单例模式调用方式\r\n  static getInstance(options) {\r\n    if (!defined(CircleWaveMaterialProperty.instance)) {\r\n      CircleWaveMaterialProperty.instance = new CircleWaveMaterialProperty(options)\r\n    }\r\n    return CircleWaveMaterialProperty.instance\r\n  }\r\n\r\n  constructor(options) {\r\n    //@ts-ignore\r\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT)\r\n\r\n    this._definitionChanged = new Event()\r\n\r\n    this._color = undefined\r\n\r\n    this._colorSubscription = undefined\r\n\r\n    this.color = options.color\r\n\r\n    this.duration = defaultValue(options.duration, 1e3)\r\n\r\n    this.count = defaultValue(options.count, 2)\r\n\r\n    if (this.count <= 0) this.count = 1\r\n\r\n    this.gradient = defaultValue(options.gradient, 0.1)\r\n\r\n    if (this.gradient < 0) this.gradient = 0\r\n    else if (this.gradient > 1) this.gradient = 1\r\n\r\n    this._time = performance.now()\r\n\r\n    this.init()\r\n  }\r\n\r\n  private init() {\r\n    //@ts-ignore\r\n    Material.CircleWaveMaterialType = 'CircleWaveMaterial'\r\n\r\n    //@ts-ignore\r\n    Material._materialCache.addMaterial('CircleWaveMaterial', {\r\n      fabric: {\r\n        type: 'CircleWaveMaterial',\r\n\r\n        uniforms: {\r\n          color: new Color(1.0, 0.0, 0.0, 1.0),\r\n\r\n          time: 1,\r\n\r\n          count: 1,\r\n\r\n          gradient: 0.1\r\n        },\r\n\r\n        source: `czm_material czm_getMaterial(czm_materialInput materialInput)\r\n \r\n                                        {\r\n \r\n                                            czm_material material = czm_getDefaultMaterial(materialInput);\r\n \r\n                                            material.diffuse = 1.5 * color.rgb;\r\n \r\n                                            vec2 st = materialInput.st;\r\n \r\n                                            vec3 str = materialInput.str;\r\n \r\n                                            float dis = distance(st, vec2(0.5, 0.5));\r\n \r\n                                            float per = fract(time);\r\n \r\n                                            if (abs(str.z) > 0.001) {\r\n \r\n                                                discard;\r\n \r\n                                            }\r\n \r\n                                            if (dis > 0.5) {\r\n \r\n                                                discard;\r\n \r\n                                            } else {\r\n \r\n                                                float perDis = 0.5 / count;\r\n \r\n                                                float disNum;\r\n \r\n                                                float bl = .0;\r\n \r\n                                                for (int i = 0; i <= 999; i++) {\r\n \r\n                                                    if (float(i) <= count) {\r\n \r\n                                                      disNum = perDis * float(i) - dis + per / count;\r\n \r\n                                                        if (disNum > 0.0) {\r\n \r\n                                                            if (disNum < perDis) {\r\n \r\n                                                                bl = 1.0 - disNum / perDis;\r\n \r\n                                                            }\r\n \r\n                                                          else if (disNum - perDis < perDis) {\r\n \r\n                                                                    bl = 1.0 - abs(1.0 - disNum / perDis);\r\n \r\n                                                            }\r\n \r\n                                                            material.alpha = pow(bl, gradient);\r\n \r\n                                                        }\r\n \r\n                                                    }\r\n \r\n                                                }\r\n \r\n                                            }\r\n \r\n                                        return material;\r\n \r\n                                    }`\r\n      },\r\n\r\n      translucent: function (material) {\r\n        return !0\r\n      }\r\n    })\r\n  }\r\n\r\n  private getType() {\r\n    //@ts-ignore\r\n    return Material.CircleWaveMaterialType\r\n  }\r\n\r\n  private getValue(time, result) {\r\n    if (!defined(result)) {\r\n      result = {}\r\n    }\r\n\r\n    //@ts-ignore\r\n    result.color = Property.getValueOrClonedDefault(this._color, time, Color.WHITE, result.color)\r\n\r\n    result.time = (performance.now() - this._time) / this.duration\r\n\r\n    result.count = this.count\r\n\r\n    result.gradient = 1 + 10 * (1 - this.gradient)\r\n\r\n    return result\r\n  }\r\n\r\n  private equals(other) {\r\n    //@ts-ignore\r\n    return (\r\n      this === other ||\r\n      (other instanceof CircleWaveMaterialProperty && Property.equals(this._color, other._color))\r\n    )\r\n  }\r\n\r\n  get isDestroyed() {\r\n    return false\r\n  }\r\n\r\n  get definitionChanged() {\r\n    return this._definitionChanged\r\n  }\r\n}\r\n\r\nObject.defineProperties(CircleWaveMaterialProperty.prototype, {\r\n  color: createPropertyDescriptor('color')\r\n})\r\n\r\nconst WaveCircleMaterial = (options: object): CircleWaveMaterialProperty => {\r\n  return new CircleWaveMaterialProperty(options)\r\n}\r\n\r\nexport default WaveCircleMaterial\r\n","import {\r\n  defaultValue,\r\n  defined,\r\n  createPropertyDescriptor,\r\n  Event,\r\n  Material,\r\n  Color,\r\n  Property\r\n} from 'cesium'\r\n/**\r\n *  @description 渐变圆材质\r\n *  @param {String} options.color 颜色\r\n *  @author jh\r\n *  @date 2024-04-10\r\n * */\r\n\r\nclass CircleFadeMaterialProperty {\r\n  declare _definitionChanged: Event\r\n\r\n  declare _color: undefined\r\n\r\n  declare _colorSubscription: undefined\r\n\r\n  declare color: string\r\n\r\n  declare duration: number\r\n\r\n  declare count: number\r\n\r\n  declare gradient: number\r\n\r\n  declare _time: any\r\n\r\n  // 存储单例\r\n  private static instance\r\n\r\n  // 单例模式调用方式\r\n  static getInstance(options) {\r\n    if (!defined(CircleFadeMaterialProperty.instance)) {\r\n      CircleFadeMaterialProperty.instance = new CircleFadeMaterialProperty(options)\r\n    }\r\n    return CircleFadeMaterialProperty.instance\r\n  }\r\n\r\n  constructor(options) {\r\n    //@ts-ignore\r\n    options = defaultValue(options, defaultValue.EMPTY_OBJECT)\r\n\r\n    this._definitionChanged = new Event()\r\n\r\n    this._color = void 0\r\n\r\n    this._colorSubscription = void 0\r\n\r\n    this.color = defaultValue(options.color, new Color(0, 0, 0, 0))\r\n\r\n    this.duration = defaultValue(options.duration, 1e3)\r\n\r\n    this._time = void 0\r\n\r\n    this.init()\r\n  }\r\n\r\n  private init() {\r\n    //@ts-ignore\r\n    Material.CircleFadeMaterialType = 'CircleFadeMaterial'\r\n\r\n    //@ts-ignore\r\n    Material._materialCache.addMaterial('CircleFadeMaterial', {\r\n      fabric: {\r\n        type: 'CircleFadeMaterial',\r\n\r\n        uniforms: {\r\n          color: new Color(1, 0, 0, 1),\r\n\r\n          time: 1\r\n        },\r\n\r\n        source: `czm_material czm_getMaterial(czm_materialInput materialInput)\\n\r\n                    {\\n\r\n                        czm_material material = czm_getDefaultMaterial(materialInput);\\n\r\n                        material.diffuse = 1.5 * color.rgb;\\n\r\n                        vec2 st = materialInput.st;\\n\r\n                        float dis = distance(st, vec2(0.5, 0.5));\\n\r\n                        float per = fract(time);\\n\r\n                        if(dis > per * 0.5){\\n\r\n                            //material.alpha = 0.0;\\n\r\n                            discard;\\n\r\n                        }else {\\n\r\n                            material.alpha = color.a  * dis / per / 2.0;\\n\r\n                        }\\n\r\n                        return material;\\n\r\n                    }`\r\n      },\r\n\r\n      translucent: function (material) {\r\n        return !0\r\n      }\r\n    })\r\n  }\r\n\r\n  private getType() {\r\n    //@ts-ignore\r\n    return Material.CircleFadeMaterialType\r\n  }\r\n\r\n  private getValue(time, result) {\r\n    if (!defined(result)) {\r\n      result = {}\r\n    }\r\n\r\n    //@ts-ignore\r\n    result.color = Property.getValueOrClonedDefault(\r\n      this._color,\r\n      time,\r\n      new Color(0, 0, 0, 0),\r\n      result.color\r\n    )\r\n\r\n    result.time = (performance.now() - this._time) / this.duration\r\n\r\n    return result\r\n  }\r\n\r\n  private equals(other) {\r\n    //@ts-ignore\r\n    return (\r\n      this === other ||\r\n      (other instanceof CircleFadeMaterialProperty && Property.equals(this._color, other._color))\r\n    )\r\n  }\r\n\r\n  get isDestroyed() {\r\n    return false\r\n  }\r\n\r\n  get definitionChanged() {\r\n    return this._definitionChanged\r\n  }\r\n}\r\n\r\nObject.defineProperties(CircleFadeMaterialProperty.prototype, {\r\n  color: createPropertyDescriptor('color')\r\n})\r\n\r\nconst CircleFadeMaterial = (options: object): CircleFadeMaterialProperty => {\r\n  return new CircleFadeMaterialProperty(options)\r\n}\r\n\r\nexport default CircleFadeMaterial\r\n","import * as Cesium from 'cesium'\r\n//流动墙材质\r\nfunction TrailLineMaterialProperty(options) {\r\n  // 默认参数设置\r\n  this._definitionChanged = new Cesium.Event()\r\n  this._color = undefined\r\n  this._colorSubscription = undefined\r\n  this.color = options.color\r\n  this.duration = options.duration\r\n  this.viewer = options.viewer\r\n  this._time = new Date().getTime()\r\n}\r\nObject.defineProperties(TrailLineMaterialProperty.prototype, {\r\n  isConstant: {\r\n    get: function () {\r\n      return false\r\n    }\r\n  },\r\n  definitionChanged: {\r\n    get: function () {\r\n      return this._definitionChanged\r\n    }\r\n  },\r\n  color: Cesium.createPropertyDescriptor('color')\r\n})\r\nTrailLineMaterialProperty.prototype.getType = function (time) {\r\n  return 'TrailLine'\r\n}\r\nTrailLineMaterialProperty.prototype.getValue = function (time, result) {\r\n  if (!Cesium.defined(result)) {\r\n    result = {}\r\n  }\r\n  result.color = Cesium.Property.getValueOrClonedDefault(\r\n    this._color,\r\n    time,\r\n    Cesium.Color.WHITE,\r\n    result.color\r\n  )\r\n\r\n  if (this.duration) {\r\n    result.time = ((new Date().getTime() - this._time) % this.duration) / this.duration\r\n  }\r\n  this.viewer.scene.requestRender()\r\n  return result\r\n}\r\nTrailLineMaterialProperty.prototype.equals = function (other) {\r\n  return (\r\n    this === other ||\r\n    (other instanceof TrailLineMaterialProperty &&\r\n      Cesium.Property.equals(this._color, other._color))\r\n  )\r\n}\r\nCesium.Material.TrailLineMaterialProperty = TrailLineMaterialProperty\r\nCesium.Material.TrailLineType = 'TrailLine'\r\nCesium.Material.TrailLineImage = '/src/assets/image/arrow.png'\r\nCesium.Material.TrailLineSource =\r\n  'czm_material czm_getMaterial(czm_materialInput materialInput)\\n\\\r\n{\\n\\\r\n   czm_material material = czm_getDefaultMaterial(materialInput);\\n\\\r\n   vec2 st = materialInput.st;\\n\\\r\n   vec4 colorImage = texture2D(image, vec2(fract(st.s - time), st.t));\\n\\\r\n   material.alpha = colorImage.a * color.a;\\n\\\r\n   material.diffuse = (colorImage.rgb+color.rgb)/2.0;\\n\\\r\n   return material;\\n\\\r\n}'\r\nCesium.Material._materialCache.addMaterial(Cesium.Material.TrailLineType, {\r\n  fabric: {\r\n    type: Cesium.Material.TrailLineType,\r\n    uniforms: {\r\n      color: new Cesium.Color(1.0, 1.0, 1.0, 1),\r\n      image: Cesium.Material.TrailLineImage,\r\n      time: 0\r\n    },\r\n    source: Cesium.Material.TrailLineSource\r\n  },\r\n  translucent: function (material) {\r\n    return true\r\n  }\r\n})\r\n\r\nexport default TrailLineMaterialProperty\r\n","/**\r\n * @description:动态立体墙材质\r\n */\r\nimport * as Cesium from 'cesium'\r\n//动态墙材质\r\nfunction DynamicWallMaterialProperty(options) {\r\n  // 默认参数设置\r\n  this._definitionChanged = new Cesium.Event()\r\n  this._color = undefined\r\n  this._colorSubscription = undefined\r\n  this.color = options.color\r\n  this.duration = options.duration\r\n  this.trailImage = options.trailImage\r\n  this.viewer = options.viewer\r\n  this._time = new Date().getTime()\r\n}\r\nObject.defineProperties(DynamicWallMaterialProperty.prototype, {\r\n  isConstant: {\r\n    get: function () {\r\n      return false\r\n    }\r\n  },\r\n  definitionChanged: {\r\n    get: function () {\r\n      return this._definitionChanged\r\n    }\r\n  },\r\n  color: Cesium.createPropertyDescriptor('color')\r\n})\r\nDynamicWallMaterialProperty.prototype.getType = function (time) {\r\n  return 'DynamicWall'\r\n}\r\nDynamicWallMaterialProperty.prototype.getValue = function (time, result) {\r\n  if (!Cesium.defined(result)) {\r\n    result = {}\r\n  }\r\n  result.color = Cesium.Property.getValueOrClonedDefault(\r\n    this._color,\r\n    time,\r\n    Cesium.Color.WHITE,\r\n    result.color\r\n  )\r\n  if (this.trailImage) {\r\n    result.image = this.trailImage\r\n  } else {\r\n    result.image = Cesium.Material.DynamicWallImage\r\n  }\r\n\r\n  if (this.duration) {\r\n    result.time = ((new Date().getTime() - this._time) % this.duration) / this.duration\r\n  }\r\n  this.viewer.scene.requestRender()\r\n  return result\r\n}\r\nDynamicWallMaterialProperty.prototype.equals = function (other) {\r\n  return (\r\n    this === other ||\r\n    (other instanceof DynamicWallMaterialProperty &&\r\n      Cesium.Property.equals(this._color, other._color))\r\n  )\r\n}\r\nCesium.Material.DynamicWallMaterialProperty = DynamicWallMaterialProperty\r\nCesium.Material.DynamicWallType = 'DynamicWall'\r\nCesium.Material.DynamicWallImage = './colors.png'\r\nCesium.Material.DynamicWallSource =\r\n  'czm_material czm_getMaterial(czm_materialInput materialInput)\\n\\\r\n                                            {\\n\\\r\n                                            czm_material material = czm_getDefaultMaterial(materialInput);\\n\\\r\n                                            vec2 st = materialInput.st;\\n\\\r\n                                            vec4 colorImage = texture2D(image, vec2(fract(st.t - time), st.t));\\n\\\r\n                                            vec4 fragColor;\\n\\\r\n                                            fragColor.rgb = color.rgb / 1.0;\\n\\\r\n                                            fragColor = czm_gammaCorrect(fragColor);\\n\\\r\n                                            material.alpha = colorImage.a * color.a;\\n\\\r\n                                            material.diffuse = color.rgb;\\n\\\r\n                                            material.emission = fragColor.rgb;\\n\\\r\n                                            return material;\\n\\\r\n                                            }'\r\nCesium.Material._materialCache.addMaterial(Cesium.Material.DynamicWallType, {\r\n  fabric: {\r\n    type: Cesium.Material.DynamicWallType,\r\n    uniforms: {\r\n      color: new Cesium.Color(1.0, 1.0, 1.0, 1),\r\n      image: Cesium.Material.DynamicWallImage,\r\n      time: 0\r\n    },\r\n    source: Cesium.Material.DynamicWallSource\r\n  },\r\n  translucent: function (material) {\r\n    return true\r\n  }\r\n})\r\n\r\nexport default DynamicWallMaterialProperty\r\n","import * as Cesium from 'cesium'\r\n/**\r\n *  流动线效果 多段线\r\n */\r\nfunction PolylineTrailLinkMaterialProperty(duration: any, color: any, repeat: any, image) {\r\n  //@ts-ignore\r\n  this._definitionChanged = new Cesium.Event()\r\n  //@ts-ignore\r\n  this._color = undefined\r\n  //@ts-ignore\r\n  this._colorSubscription = undefined\r\n  //@ts-ignore\r\n  this.color = color\r\n  //@ts-ignore\r\n  this.duration = duration\r\n  //@ts-ignore\r\n  this._time = new Date().getTime()\r\n  //@ts-ignore\r\n  this._repeat = undefined\r\n  //@ts-ignore\r\n  this.repeat = repeat\r\n\r\n  this.image = image\r\n}\r\n\r\nObject.defineProperties(PolylineTrailLinkMaterialProperty.prototype, {\r\n  isConstant: {\r\n    get: function () {\r\n      return false\r\n    }\r\n  },\r\n  definitionChanged: {\r\n    get: function () {\r\n      return this._definitionChanged\r\n    }\r\n  },\r\n  //@ts-ignore\r\n  color: Cesium.createPropertyDescriptor('color'),\r\n  repeat: Cesium.createPropertyDescriptor('repeat')\r\n})\r\n\r\nPolylineTrailLinkMaterialProperty.prototype.getType = function (time: any) {\r\n  return 'PolylineTrailLink'\r\n}\r\nPolylineTrailLinkMaterialProperty.prototype.getValue = function (\r\n  time: any,\r\n  result: { color?: any; image?: any; time?: any }\r\n) {\r\n  if (!Cesium.defined(result)) {\r\n    result = {}\r\n  }\r\n  //@ts-ignore\r\n  result.color = Cesium.Property.getValueOrClonedDefault(\r\n    this._color,\r\n    time,\r\n    Cesium.Color.WHITE,\r\n    result.color\r\n  )\r\n\r\n  result.repeat = Cesium.Property.getValueOrClonedDefault(\r\n    this._repeat,\r\n    time,\r\n    new Cesium.Cartesian2(1.0, 1.0),\r\n    result.repeat\r\n  )\r\n\r\n  //@ts-ignore\r\n  result.image = this.image\r\n  result.time = ((new Date().getTime() - this._time) % this.duration) / this.duration\r\n  return result\r\n}\r\nPolylineTrailLinkMaterialProperty.prototype.equals = function (other: any) {\r\n  return (\r\n    this === other ||\r\n    (other instanceof PolylineTrailLinkMaterialProperty &&\r\n      //@ts-ignore\r\n      Cesium.Property.equals(this._color, other._color))\r\n  )\r\n}\r\n\r\n//@ts-ignore\r\nCesium.Material.PolylineTrailLinkMaterialProperty = PolylineTrailLinkMaterialProperty\r\n//@ts-ignore\r\nCesium.Material.PolylineTrailLinkType = 'PolylineTrailLink'\r\n//@ts-ignore\r\nCesium.Material.PolylineTrailLinkImage = 'src/assets/image/line8.png'\r\n//@ts-ignore\r\nCesium.Material.PolylineTrailLinkSource =\r\n  'czm_material czm_getMaterial(czm_materialInput materialInput)\\n\\\r\n{\\n\\\r\n  czm_material material = czm_getDefaultMaterial(materialInput);\\n\\\r\n  vec2 st = repeat * materialInput.st;\\n\\\r\n  vec4 colorImage = texture2D(image, vec2(fract(st.s - time), st.t));\\n\\\r\n  material.alpha = colorImage.a * color.a;\\n\\\r\n  material.diffuse = (colorImage.rgb+color.rgb)/2.0;\\n\\\r\n  return material;\\n\\\r\n}'\r\n//@ts-ignore\r\nCesium.Material._materialCache.addMaterial(\r\n  //@ts-ignore\r\n  Cesium.Material.PolylineTrailLinkType,\r\n  {\r\n    fabric: {\r\n      //@ts-ignore\r\n      type: Cesium.Material.PolylineTrailLinkType,\r\n      uniforms: {\r\n        color: new Cesium.Color(255.0, 255.0, 255.0, 1),\r\n        //@ts-ignore\r\n        image: Cesium.Material.PolylineTrailLinkImage,\r\n        repeat: new Cesium.Cartesian2(1.0, 1.0),\r\n        time: 0\r\n      },\r\n      //@ts-ignore\r\n      source: Cesium.Material.PolylineTrailLinkSource\r\n    },\r\n    translucent: function (material: any) {\r\n      return true\r\n    }\r\n  }\r\n)\r\n\r\nexport default PolylineTrailLinkMaterialProperty\r\n","/**\r\n *  精灵穿梭路光效果，\r\n */\r\n\r\nimport * as Cesium from 'cesium'\r\nfunction Spriteline1MaterialProperty(duration, image) {\r\n  this._definitionChanged = new Cesium.Event()\r\n  this.duration = duration\r\n  this.image = image\r\n  this._time = performance.now()\r\n}\r\nObject.defineProperties(Spriteline1MaterialProperty.prototype, {\r\n  isConstant: {\r\n    get: function () {\r\n      return false\r\n    }\r\n  },\r\n  definitionChanged: {\r\n    get: function () {\r\n      return this._definitionChanged\r\n    }\r\n  },\r\n  color: Cesium.createPropertyDescriptor('color'),\r\n  duration: Cesium.createPropertyDescriptor('duration')\r\n})\r\nSpriteline1MaterialProperty.prototype.getType = function (time) {\r\n  return 'Spriteline1'\r\n}\r\nSpriteline1MaterialProperty.prototype.getValue = function (time, result) {\r\n  if (!Cesium.defined(result)) {\r\n    result = {}\r\n  }\r\n  result.image = this.image\r\n  result.time = ((performance.now() - this._time) % this.duration) / this.duration\r\n  return result\r\n}\r\nSpriteline1MaterialProperty.prototype.equals = function (e) {\r\n  return this === e || (e instanceof Spriteline1MaterialProperty && this.duration === e.duration)\r\n}\r\nCesium.Material.Spriteline1MaterialProperty = Spriteline1MaterialProperty\r\nCesium.Material.Spriteline1Type = 'Spriteline1'\r\nCesium.Material.Spriteline1Source = `\r\nczm_material czm_getMaterial(czm_materialInput materialInput)\r\n{\r\nczm_material material = czm_getDefaultMaterial(materialInput);\r\nvec2 st = materialInput.st;\r\nvec4 colorImage = texture2D(image, vec2(fract(st.s - time), st.t));\r\nmaterial.alpha = colorImage.a;\r\nmaterial.diffuse = colorImage.rgb * 1.5 ;\r\nreturn material;\r\n}\r\n`\r\n// st :二维纹理坐标\r\n// czm_material：保存可用于照明的材质信息\r\nCesium.Material._materialCache.addMaterial(Cesium.Material.Spriteline1Type, {\r\n  fabric: {\r\n    type: Cesium.Material.Spriteline1Type,\r\n    uniforms: {\r\n      color: new Cesium.Color(1, 0, 0, 0.5),\r\n      image: '',\r\n      transparent: true,\r\n      time: 20\r\n    },\r\n    source: Cesium.Material.Spriteline1Source\r\n  },\r\n  translucent: function (material) {\r\n    return true\r\n  }\r\n})\r\n\r\nexport default Spriteline1MaterialProperty\r\n","/*\r\n * @Description: 闪烁线材质\r\n */\r\nimport * as Cesium from 'cesium'\r\n\r\nclass LineFlickerMaterialProperty {\r\n  constructor(options) {\r\n    this._definitionChanged = new Cesium.Event()\r\n    this._color = undefined\r\n    this._speed = undefined\r\n    this.color = options.color\r\n    this.speed = options.speed\r\n  }\r\n\r\n  get isConstant() {\r\n    return false\r\n  }\r\n\r\n  get definitionChanged() {\r\n    return this._definitionChanged\r\n  }\r\n\r\n  getType(time) {\r\n    return Cesium.Material.LineFlickerMaterialType\r\n  }\r\n\r\n  getValue(time, result) {\r\n    if (!Cesium.defined(result)) {\r\n      result = {}\r\n    }\r\n\r\n    result.color = Cesium.Property.getValueOrDefault(\r\n      this._color,\r\n      time,\r\n      Cesium.Color.RED,\r\n      result.color\r\n    )\r\n    result.speed = Cesium.Property.getValueOrDefault(this._speed, time, 5.0, result.speed)\r\n    return result\r\n  }\r\n\r\n  equals(other) {\r\n    return (\r\n      this === other ||\r\n      (other instanceof LineFlickerMaterialProperty &&\r\n        Cesium.Property.equals(this._color, other._color) &&\r\n        Cesium.Property.equals(this._speed, other._speed))\r\n    )\r\n  }\r\n}\r\n\r\nObject.defineProperties(LineFlickerMaterialProperty.prototype, {\r\n  color: Cesium.createPropertyDescriptor('color'),\r\n  speed: Cesium.createPropertyDescriptor('speed')\r\n})\r\n\r\nCesium.Material.LineFlickerMaterialProperty = LineFlickerMaterialProperty\r\nCesium.Material.LineFlickerMaterialProperty = 'LineFlickerMaterialProperty'\r\nCesium.Material.LineFlickerMaterialType = 'LineFlickerMaterialType'\r\nCesium.Material.LineFlickerMaterialSource = `\r\nuniform vec4 color;\r\nuniform float speed;\r\nczm_material czm_getMaterial(czm_materialInput materialInput){\r\n  czm_material material = czm_getDefaultMaterial(materialInput);\r\n  float time = fract( czm_frameNumber  *  speed / 1000.0);\r\n  vec2 st = materialInput.st;\r\n  float scalar = smoothstep(0.0,1.0,time);\r\n  material.diffuse = color.rgb * scalar;\r\n  material.alpha = color.a * scalar ;\r\n  return material;\r\n}\r\n`\r\n\r\nCesium.Material._materialCache.addMaterial(Cesium.Material.LineFlickerMaterialType, {\r\n  fabric: {\r\n    type: Cesium.Material.LineFlickerMaterialType,\r\n    uniforms: {\r\n      color: new Cesium.Color(1.0, 0.0, 0.0, 1.0),\r\n      speed: 5.0\r\n    },\r\n    source: Cesium.Material.LineFlickerMaterialSource\r\n  },\r\n  translucent: function (material) {\r\n    return true\r\n  }\r\n})\r\n\r\nexport default LineFlickerMaterialProperty\r\n","/*\r\n * @Description: 飞线效果（参考开源代码）\r\n */\r\nimport * as Cesium from 'cesium'\r\n\r\nclass LineFlowMaterialProperty {\r\n  constructor(options) {\r\n    this._definitionChanged = new Cesium.Event()\r\n    this._color = undefined\r\n    this._speed = undefined\r\n    this._percent = undefined\r\n    this._gradient = undefined\r\n    this.color = options.color\r\n    this.speed = options.speed\r\n    this.percent = options.percent\r\n    this.gradient = options.gradient\r\n  }\r\n\r\n  get isConstant() {\r\n    return false\r\n  }\r\n\r\n  get definitionChanged() {\r\n    return this._definitionChanged\r\n  }\r\n\r\n  getType(time) {\r\n    return Cesium.Material.LineFlowMaterialType\r\n  }\r\n\r\n  getValue(time, result) {\r\n    if (!Cesium.defined(result)) {\r\n      result = {}\r\n    }\r\n\r\n    result.color = Cesium.Property.getValueOrDefault(\r\n      this._color,\r\n      time,\r\n      Cesium.Color.RED,\r\n      result.color\r\n    )\r\n    result.speed = Cesium.Property.getValueOrDefault(this._speed, time, 5.0, result.speed)\r\n    result.percent = Cesium.Property.getValueOrDefault(this._percent, time, 0.1, result.percent)\r\n    result.gradient = Cesium.Property.getValueOrDefault(this._gradient, time, 0.01, result.gradient)\r\n    return result\r\n  }\r\n\r\n  equals(other) {\r\n    return (\r\n      this === other ||\r\n      (other instanceof LineFlowMaterialProperty &&\r\n        Cesium.Property.equals(this._color, other._color) &&\r\n        Cesium.Property.equals(this._speed, other._speed) &&\r\n        Cesium.Property.equals(this._percent, other._percent) &&\r\n        Cesium.Property.equals(this._gradient, other._gradient))\r\n    )\r\n  }\r\n}\r\n\r\nObject.defineProperties(LineFlowMaterialProperty.prototype, {\r\n  color: Cesium.createPropertyDescriptor('color'),\r\n  speed: Cesium.createPropertyDescriptor('speed'),\r\n  percent: Cesium.createPropertyDescriptor('percent'),\r\n  gradient: Cesium.createPropertyDescriptor('gradient')\r\n})\r\n\r\nCesium.Material.LineFlowMaterialProperty = LineFlowMaterialProperty\r\nCesium.Material.LineFlowMaterialProperty = 'LineFlowMaterialProperty'\r\nCesium.Material.LineFlowMaterialType = 'LineFlowMaterialType'\r\nCesium.Material.LineFlowMaterialSource = `\r\n    uniform vec4 color;\r\n    uniform float speed;\r\n    uniform float percent;\r\n    uniform float gradient;\r\n    \r\n    czm_material czm_getMaterial(czm_materialInput materialInput){\r\n      czm_material material = czm_getDefaultMaterial(materialInput);\r\n      vec2 st = materialInput.st;\r\n      float t =fract(czm_frameNumber * speed / 1000.0);\r\n      t *= (1.0 + percent);\r\n      float alpha = smoothstep(t- percent, t, st.s) * step(-t, -st.s);\r\n      alpha += gradient;\r\n      material.diffuse = color.rgb;\r\n      material.alpha = alpha;\r\n      return material;\r\n    }\r\n    `\r\n\r\nCesium.Material._materialCache.addMaterial(Cesium.Material.LineFlowMaterialType, {\r\n  fabric: {\r\n    type: Cesium.Material.LineFlowMaterialType,\r\n    uniforms: {\r\n      color: new Cesium.Color(1.0, 0.0, 0.0, 1.0),\r\n      speed: 10.0,\r\n      percent: 0.1,\r\n      gradient: 0.01\r\n    },\r\n    source: Cesium.Material.LineFlowMaterialSource\r\n  },\r\n  translucent: function (material) {\r\n    return true\r\n  }\r\n})\r\n\r\nexport default LineFlowMaterialProperty\r\n","/***\r\n * 六边形扩散效果\r\n * 参考gitee开源ts代码\r\n * 取消import和export，整合两个类\r\n */\r\n\r\n// 点效果集合 父类\r\nimport * as Cesium from 'cesium'\r\n\r\nclass Effect {\r\n  viewer\r\n  id\r\n  duration\r\n  maxRadius\r\n  pointDraged\r\n  leftDownFlag\r\n  update_position\r\n  constructor(viewer, id) {\r\n    this.viewer = viewer\r\n    this.id = id\r\n    this.duration = 1000\r\n    this.maxRadius = 1000\r\n    this.pointDraged = null\r\n    this.leftDownFlag = false\r\n  }\r\n  change_duration(d) {\r\n    this.duration = d\r\n  }\r\n  change_color(val) {\r\n    const curEntity = this.viewer.entities.getById(this.id)\r\n    curEntity._ellipse._material.color = new Cesium.Color.fromCssColorString(val)\r\n  }\r\n  change_position(p) {\r\n    const cartesian3 = Cesium.Cartesian3.fromDegrees(\r\n      parseFloat(p[0]),\r\n      parseFloat(p[1]),\r\n      parseFloat(p[2])\r\n    )\r\n    const curEntity = this.viewer.entities.getById(this.id)\r\n    curEntity.position = cartesian3\r\n  }\r\n  del() {\r\n    this.viewer.entities.removeById(this.id)\r\n  }\r\n  add(position, color, maxRadius, duration, isEdit = false) {\r\n    const _this = this\r\n    this.duration = duration\r\n    this.maxRadius = maxRadius\r\n    if (!isEdit) {\r\n      return\r\n    }\r\n\r\n    function leftDownAction(e) {\r\n      _this.pointDraged = _this.viewer.scene.pick(e.position) // 选取当前的entity\r\n      if (_this.pointDraged && _this.pointDraged.id && _this.pointDraged.id.id === _this.id) {\r\n        _this.leftDownFlag = true\r\n        _this.viewer.scene.screenSpaceCameraController.enableRotate = false // 锁定相机\r\n      }\r\n    }\r\n\r\n    function leftUpAction(e) {\r\n      _this.leftDownFlag = false\r\n      _this.pointDraged = null\r\n      _this.viewer.scene.screenSpaceCameraController.enableRotate = true // 解锁相机\r\n    }\r\n\r\n    function mouseMoveAction(e) {\r\n      if (\r\n        _this.leftDownFlag === true &&\r\n        _this.pointDraged !== null &&\r\n        _this.pointDraged !== undefined\r\n      ) {\r\n        const ray = _this.viewer.camera.getPickRay(e.endPosition)\r\n        const cartesian = _this.viewer.scene.globe.pick(ray, _this.viewer.scene)\r\n        _this.pointDraged.id.position = cartesian // 此处根据具体entity来处理，也可能是pointDraged.id.position=cartesian;\r\n        // 这里笛卡尔坐标转 经纬度\r\n        const ellipsoid = _this.viewer.scene.globe.ellipsoid\r\n        const cartographic = ellipsoid.cartesianToCartographic(cartesian)\r\n        const lat = Cesium.Math.toDegrees(cartographic.latitude)\r\n        const lng = Cesium.Math.toDegrees(cartographic.longitude)\r\n        let alt = cartographic.height\r\n        alt = alt < 0 ? 0 : alt\r\n        if (_this.update_position) {\r\n          _this.update_position([lng.toFixed(8), lat.toFixed(8), alt])\r\n        }\r\n      }\r\n    }\r\n    this.viewer.screenSpaceEventHandler.setInputAction(\r\n      leftDownAction,\r\n      Cesium.ScreenSpaceEventType.LEFT_DOWN\r\n    )\r\n    this.viewer.screenSpaceEventHandler.setInputAction(\r\n      leftUpAction,\r\n      Cesium.ScreenSpaceEventType.LEFT_UP\r\n    )\r\n    this.viewer.screenSpaceEventHandler.setInputAction(\r\n      mouseMoveAction,\r\n      Cesium.ScreenSpaceEventType.MOUSE_MOVE\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * 六边形扩散材质\r\n */\r\nfunction HexagonSpreadMaterialProperty(color) {\r\n  this._definitionChanged = new Cesium.Event()\r\n  this._color = undefined\r\n  this._colorSubscription = undefined\r\n  this.color = color\r\n  this._time = new Date().getTime()\r\n}\r\nObject.defineProperties(HexagonSpreadMaterialProperty.prototype, {\r\n  isConstant: {\r\n    get: function () {\r\n      return false\r\n    }\r\n  },\r\n  definitionChanged: {\r\n    get: function () {\r\n      return this._definitionChanged\r\n    }\r\n  },\r\n  color: Cesium.createPropertyDescriptor('color')\r\n})\r\nHexagonSpreadMaterialProperty.prototype.getType = function (_time) {\r\n  return Cesium.Material.HexagonSpreadMaterialType\r\n}\r\nHexagonSpreadMaterialProperty.prototype.getValue = function (time, result) {\r\n  if (!Cesium.defined(result)) {\r\n    result = {}\r\n  }\r\n  result.color = Cesium.Property.getValueOrClonedDefault(\r\n    this._color,\r\n    time,\r\n    Cesium.Color.WHITE,\r\n    result.color\r\n  )\r\n  result.image = Cesium.Material.HexagonSpreadMaterialImage\r\n  return result\r\n}\r\nHexagonSpreadMaterialProperty.prototype.equals = function (other) {\r\n  const reData =\r\n    this === other ||\r\n    (other instanceof HexagonSpreadMaterialProperty &&\r\n      Cesium.Property.equals(this._color, other._color))\r\n  return reData\r\n}\r\nCesium.Material.HexagonSpreadMaterialProperty = HexagonSpreadMaterialProperty\r\nCesium.Material.HexagonSpreadMaterialType = 'HexagonSpreadMaterial'\r\nCesium.Material.HexagonSpreadMaterialImage = 'src/assets/image/hexagon.png'\r\nCesium.Material.HexagonSpreadSource = `\r\n  czm_material czm_getMaterial(czm_materialInput materialInput)\r\n  {\r\n       czm_material material = czm_getDefaultMaterial(materialInput);\r\n       vec2 st = materialInput.st;\r\n       vec4 colorImage = texture2D(image,  vec2(st));\r\n       material.alpha = colorImage.a * color.a * 0.5;\r\n       material.diffuse =  1.8 * color.rgb  ;\r\n       return material;\r\n   }\r\n   `\r\nCesium.Material._materialCache.addMaterial(Cesium.Material.HexagonSpreadMaterialType, {\r\n  fabric: {\r\n    type: Cesium.Material.HexagonSpreadMaterialType,\r\n    uniforms: {\r\n      color: new Cesium.Color(1, 0, 0, 0.5),\r\n      image: Cesium.Material.HexagonSpreadMaterialImage\r\n    },\r\n    source: Cesium.Material.HexagonSpreadSource\r\n  },\r\n  translucent: function (material) {\r\n    return true\r\n  }\r\n})\r\n\r\n// 六边形扩散效果\r\nclass HexagonSpread extends Effect {\r\n  constructor(viewer, id) {\r\n    super(viewer, id)\r\n  }\r\n  add(position, color, maxRadius, duration, isedit = false) {\r\n    super.add(position, color, maxRadius, duration, isedit)\r\n    const _this = this\r\n    let currentRadius = 1\r\n    this.viewer.entities.add({\r\n      id: _this.id,\r\n      position: Cesium.Cartesian3.fromDegrees(position[0], position[1], position[2]),\r\n      ellipse: {\r\n        semiMajorAxis: new Cesium.CallbackProperty(function (n) {\r\n          currentRadius += (1000 / _this.duration) * 50\r\n          if (currentRadius > _this.maxRadius) {\r\n            currentRadius = 1\r\n          }\r\n          return currentRadius\r\n        }, false),\r\n        semiMinorAxis: new Cesium.CallbackProperty(function (n) {\r\n          return currentRadius\r\n        }, false),\r\n        material: new HexagonSpreadMaterialProperty(new Cesium.Color.fromCssColorString(color))\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport default HexagonSpread\r\n"],"names":["PolylineCustomMaterialProperty","options","material","time","result","other","CustomMaterial","_CircleWaveMaterialProperty","__publicField","CircleWaveMaterialProperty","WaveCircleMaterial","_CircleFadeMaterialProperty","CircleFadeMaterialProperty","CircleFadeMaterial","TrailLineMaterialProperty","DynamicWallMaterialProperty","PolylineTrailLinkMaterialProperty","duration","color","repeat","image","Spriteline1MaterialProperty","e","LineFlickerMaterialProperty","LineFlowMaterialProperty","Effect","viewer","id","d","val","curEntity","p","cartesian3","position","maxRadius","isEdit","_this","leftDownAction","leftUpAction","mouseMoveAction","ray","cartesian","cartographic","lat","lng","alt","HexagonSpreadMaterialProperty","_time","HexagonSpread","isedit","currentRadius","n"],"mappings":"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"}
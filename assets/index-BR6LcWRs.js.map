{"version":3,"file":"index-BR6LcWRs.js","sources":["../../src/components/Cesium/CesiumGraphics/index.ts"],"sourcesContent":["import * as Cesium from 'cesium'\r\nimport {\r\n  transformCartesianToWGS84,\r\n  transformWGS84ArrayToCartesianArray,\r\n  transformWGS84ToCartesian,\r\n  transformCartesianArrayToWGS84Array\r\n} from '../CesiumBase'\r\n\r\nimport { CircleFadeMaterial, DynamicWallMaterialProperty } from '../CesiumMaterialProperty'\r\n\r\nclass CesiumGraphics {\r\n  declare viewer: any\r\n\r\n  constructor(viewer) {\r\n    this.viewer = viewer\r\n  }\r\n\r\n  // 创建一个实体图形\r\n  public createGraphics() {\r\n    return new Cesium.Entity()\r\n  }\r\n\r\n  //点\r\n  public getPointGraphics({\r\n    color = Cesium.Color.GREEN,\r\n    pixelSize = 5,\r\n    outlineColor = Cesium.Color.WHITE,\r\n    outlineWidth = 1,\r\n    ...args\r\n  } = {}) {\r\n    return new Cesium.PointGraphics(\r\n      Object.assign({ color, pixelSize, outlineColor, outlineWidth }, args)\r\n    )\r\n  }\r\n\r\n  //线\r\n  public getLineGraphics({\r\n    show = true,\r\n    material = Cesium.Color.YELLOW,\r\n    width = 1,\r\n    clampToGround = false,\r\n    ...args\r\n  } = {}) {\r\n    return new Cesium.PolylineGraphics(\r\n      Object.assign({ show, material, width, clampToGround }, args)\r\n    )\r\n  }\r\n\r\n  // 面\r\n  public getPolygonGraphics({\r\n    material = Cesium.Color.RED.withAlpha(0.2),\r\n    clampToGround = false,\r\n    positions = [],\r\n    ...args\r\n  } = {}) {\r\n    return new Cesium.PolygonGraphics(\r\n      Object.assign({ material, clampToGround, hierarchy: positions }, args)\r\n    )\r\n  }\r\n\r\n  //标签\r\n  public getLabelGraphics({\r\n    text = '',\r\n    font = '14px sans-serif',\r\n    fillColor = Cesium.Color.GOLD,\r\n    style = Cesium.LabelStyle.FILL_AND_OUTLINE,\r\n    outlineWidth = 2,\r\n    showBackground = false,\r\n    backgroundColor = new Cesium.Color(0.165, 0.165, 0.165, 0.8),\r\n    verticalOrigin = Cesium.VerticalOrigin.BOTTOM,\r\n    pixelOffset = new Cesium.Cartesian2(0, -30),\r\n    ...args\r\n  } = {}) {\r\n    return new Cesium.LabelGraphics(\r\n      Object.assign(\r\n        {\r\n          text,\r\n          font,\r\n          fillColor,\r\n          style,\r\n          outlineWidth,\r\n          showBackground,\r\n          backgroundColor,\r\n          verticalOrigin,\r\n          pixelOffset\r\n        },\r\n        args\r\n      )\r\n    )\r\n  }\r\n\r\n  //广告牌\r\n  public getBillboardGraphics({\r\n    width = 35,\r\n    height = 35,\r\n    clampToGround = true,\r\n    scale = 1,\r\n    pixelOffset = new Cesium.Cartesian2(0, -20),\r\n    scaleByDistance = undefined,\r\n    ...args\r\n  } = {}) {\r\n    return new Cesium.BillboardGraphics(\r\n      Object.assign(\r\n        {\r\n          width,\r\n          height,\r\n          clampToGround,\r\n          scale,\r\n          pixelOffset,\r\n          scaleByDistance\r\n        },\r\n        args\r\n      )\r\n    )\r\n  }\r\n\r\n  //路径\r\n  public getPathGraphics({\r\n    resolution = 1,\r\n    glowPower = 0.1,\r\n    color = Cesium.Color.YELLOW,\r\n    width = 30,\r\n    ...args\r\n  } = {}) {\r\n    return new Cesium.PathGraphics(\r\n      Object.assign(\r\n        {\r\n          resolution,\r\n          material: new Cesium.PolylineGlowMaterialProperty({\r\n            glowPower,\r\n            color\r\n          }),\r\n          width\r\n        },\r\n        args\r\n      )\r\n    )\r\n  }\r\n\r\n  //模型\r\n  public getModelGraphics({\r\n    show = true,\r\n    uri = '',\r\n    scale = 1,\r\n    minimumPixelSize = 1,\r\n    maximumScale = 10000,\r\n    color = Cesium.Color.WHITE,\r\n    ...args\r\n  } = {}) {\r\n    return new Cesium.ModelGraphics(\r\n      Object.assign(\r\n        {\r\n          show,\r\n          uri,\r\n          scale,\r\n          minimumPixelSize,\r\n          maximumScale,\r\n          color\r\n        },\r\n        args\r\n      )\r\n    )\r\n  }\r\n\r\n  //椭圆\r\n  public getEllipseGraphics({\r\n    semiMajorAxis = 1000000.0, //单位 米\r\n    semiMinorAxis = 1000000.0, //单位 米\r\n    metarial = Cesium.Color.RED.withAlpha(0.5),\r\n    outline = true,\r\n    ...args\r\n  } = {}) {\r\n    return new Cesium.EllipseGraphics(\r\n      Object.assign({ semiMajorAxis, semiMinorAxis, metarial, outline }, args)\r\n    )\r\n  }\r\n\r\n  // 球\r\n  getEllipsoidGraphics({\r\n    radii = new Cesium.Cartesian3(300, 300, 300),\r\n    innerRadii = new Cesium.Cartesian3(100, 100, 100), //球从正北0-360\r\n    minimumClock = Cesium.Math.toRadians(0),\r\n    maximumClock = Cesium.Math.toRadians(360), //球从上到下0-180\r\n    minimumCone = Cesium.Math.toRadians(0),\r\n    maximumCone = Cesium.Math.toRadians(180),\r\n    fill = true, //是否填充\r\n    material = Cesium.Color.fromCssColorString(`rgba(255,0,0,1)`), //填充颜色,\r\n    outline = true, //是否轮廓线\r\n    outlineColor = Cesium.Color.fromCssColorString(`rgba(0,255,0,1)`), //轮廓线的颜色\r\n    ...args\r\n  } = {}) {\r\n    return new Cesium.EllipsoidGraphics(\r\n      Object.assign(\r\n        {\r\n          radii,\r\n          innerRadii,\r\n          minimumClock,\r\n          maximumClock,\r\n          minimumCone,\r\n          material,\r\n          outline,\r\n          maximumCone,\r\n          outlineColor,\r\n          fill\r\n        },\r\n        args\r\n      )\r\n    )\r\n  }\r\n\r\n  // 面\r\n  public getPlaneGraphics({\r\n    plane = new Cesium.Plane(Cesium.Cartesian3.UNIT_Y, 0.0), //面\r\n    dimensions = new Cesium.Cartesian2(1000000.0, 1000000.0), //面宽高\r\n    material = Cesium.Color.BLUE.withAlpha(0.5), //面颜色\r\n    outline = true, //是否显示外边框\r\n    outlineColor = Cesium.Color.YELLOW, //外边框颜色\r\n    ...args\r\n  } = {}) {\r\n    return new Cesium.PlaneGraphics(\r\n      Object.assign(\r\n        {\r\n          plane,\r\n          dimensions,\r\n          material,\r\n          outline,\r\n          outlineColor\r\n        },\r\n        args\r\n      )\r\n    )\r\n  }\r\n\r\n  // 锥体\r\n  public getCylinderGraphics({\r\n    HeightReference = Cesium.HeightReference.RELATIVE_TO_GROUND,\r\n    length = 500.0,\r\n    topRadius = 500.0,\r\n    bottomRadius = 0.0,\r\n    material = new Cesium.Color(0, 1, 1, 0.4),\r\n    slices = 128,\r\n    ...args\r\n  } = {}) {\r\n    return new Cesium.CylinderGraphics(\r\n      Object.assign(\r\n        {\r\n          heightReference: HeightReference,\r\n          length,\r\n          topRadius,\r\n          bottomRadius,\r\n          material,\r\n          slices\r\n        },\r\n        args\r\n      )\r\n    )\r\n  }\r\n\r\n  // 1. 创建点信息\r\n  public createPointsGraphics({\r\n    positions = [],\r\n    name = '',\r\n    oid = 'point',\r\n    point = {},\r\n    billboard = {},\r\n    label = {}\r\n  } = {}) {\r\n    const points = []\r\n    for (const i in positions) {\r\n      const position = positions[i]\r\n      const entity = this.createGraphics()\r\n      entity.name = name\r\n      entity.oid = oid\r\n      entity.position = position\r\n      if (point) entity.point = this.getPointGraphics(point)\r\n      if (billboard) entity.billboard = this.getBillboardGraphics(billboard)\r\n      if (label) entity.label = this.getLabelGraphics(label)\r\n      points.push(this.viewer.entities.add(entity))\r\n    }\r\n    return points\r\n  }\r\n\r\n  // 2. 创建线\r\n  public createLineGraphics({ name = '', oid = 'line', positions = [], ...args } = {}) {\r\n    const entity = this.createGraphics()\r\n    entity.name = name\r\n    entity.oid = oid\r\n    entity.position = positions\r\n    entity.polyline = this.getLineGraphics(Object.assign({ name, oid, positions }, args))\r\n\r\n    return this.viewer.entities.add(entity)\r\n  }\r\n\r\n  // 3. 创建面\r\n  public createPolygonGraphics({ clampToS3M = false, ...args } = {}) {\r\n    const entity = this.createGraphics()\r\n    entity.polygon = this.getPolygonGraphics(args)\r\n    entity.clampToS3M = clampToS3M\r\n\r\n    return this.viewer.entities.add(entity)\r\n  }\r\n\r\n  // 4. 创建模型\r\n  public createModelGraphics({ model, position, orientation }) {\r\n    const entity = this.createGraphics()\r\n    entity.model = this.getModelGraphics(model)\r\n    entity.position = position\r\n    entity.orientation = orientation\r\n    return this.viewer.entities.add(entity)\r\n  }\r\n\r\n  // 创建走廊\r\n  public craeteCorridorGraphics({ positions, height = 6.0, width = 15.0, material, ...args }) {\r\n    const entity = this.createGraphics()\r\n    entity.corridor = {\r\n      positions: positions,\r\n      height: height || 6.0,\r\n      width: width || 15.0,\r\n      material: material,\r\n      args\r\n    }\r\n\r\n    return this.viewer.entities.add(entity)\r\n  }\r\n\r\n  //构建动态线\r\n  public craeteDynamicPolyLineGraphics(options) {\r\n    if (options && options.positions) {\r\n      const entity = this.createGraphics()\r\n      entity.polyline = {\r\n        show: true,\r\n        positions: [],\r\n        material: options.material || Cesium.Color.CHARTREUSE,\r\n        width: options.width || 5,\r\n        clampToGround: options.clampToGround || false\r\n      }\r\n\r\n      entity.polyline.positions = new Cesium.CallbackProperty(function () {\r\n        return options.positions\r\n      }, false)\r\n\r\n      return this.viewer.entities.add(entity)\r\n    }\r\n  }\r\n\r\n  //动态椎体\r\n  public craeteDynamicCylinderGraphics(options) {\r\n    if (options) {\r\n      const entity = this.createGraphics({})\r\n      // $this = this\r\n      entity.cylinder = this.getCylinderGraphics(options)\r\n      entity.position = options.position\r\n      //   new Cesium.CallbackProperty(function () {\r\n      //   const positions = entity.position.getValue($this._viewer.clock.currentTime)\r\n      //   const cartographic = $this._viewer.scene.globe.ellipsoid.cartesianToCartographic(positions)\r\n      //   const lat = Cesium.Math.toDegrees(cartographic.latitude),\r\n      //     lng = Cesium.Math.toDegrees(cartographic.longitude),\r\n      //     hei = parseFloat(cartographic.height / 4)\r\n      //   return Cesium.Cartesian3.fromDegrees(lng, lat, 0)\r\n      // }, false)\r\n\r\n      // entity.cylinder.length = new Cesium.CallbackProperty(function () {\r\n      //   const positions = entity.position.getValue($this._viewer.clock.currentTime)\r\n      //   const cartographic = $this._viewer.scene.globe.ellipsoid.cartesianToCartographic(positions)\r\n      //   return cartographic.height * 2\r\n      // }, false)\r\n\r\n      return this.viewer.entities.add(entity)\r\n    }\r\n  }\r\n\r\n  // 创建渐变锥体\r\n  public createFadeCylinderGraphics(options) {\r\n    options = options || {}\r\n    if (options && options.position) {\r\n      const entity = this.createGraphics()\r\n      entity.position = options.position\r\n      options.material = CircleFadeMaterial({\r\n        color: options.color || Cesium.Color.fromCssColorString('#02ff00'),\r\n        duration: options.duration || 2000\r\n      })\r\n      entity.cylinder = this.getCylinderGraphics(options)\r\n\r\n      return this.viewer.entities.add(entity)\r\n    }\r\n  }\r\n\r\n  // 创建旋转圆柱\r\n  public craeteRotateCylinderGraphics(options) {\r\n    if (options && options.position) {\r\n      const cylinderEntity = this.createGraphics()\r\n      cylinderEntity.cylinder = {\r\n        HeightReference: Cesium.HeightReference.RELATIVE_TO_GROUND,\r\n        length: options.length || 500,\r\n        topRadius: options.topRadius || 500,\r\n        bottomRadius: options.bottomRadius || 500,\r\n        material:\r\n          options.material ||\r\n          new Cesium.ImageMaterialProperty({\r\n            image: 'src/assets/image/cc2.jpg',\r\n            transparent: true,\r\n            repeat: {\r\n              x: 1,\r\n              y: -1\r\n            }\r\n          }),\r\n        slices: options.slices || 128\r\n      }\r\n      cylinderEntity.position = options.position\r\n\r\n      this.setGraphicsRotate({\r\n        entity: cylinderEntity,\r\n        position: transformCartesianToWGS84(options.position),\r\n        rotateAmount: 4\r\n      })\r\n      return this.viewer.entities.add(cylinderEntity)\r\n    }\r\n  }\r\n\r\n  //闪烁圆\r\n  public craeteDynamicBlinkCircleGraphics(options) {\r\n    if (options && options.position) {\r\n      let entity = this.createGraphics(),\r\n        alp = options.alp || 1,\r\n        flog = options.flog || true\r\n      entity.position = options.position\r\n      entity.ellipse = {\r\n        semiMinorAxis: options.semiMinorAxis || 2000.0,\r\n        semiMajorAxis: options.semiMajorAxis || 2000.0,\r\n        height: options.height || 10,\r\n        material: new Cesium.ColorMaterialProperty(\r\n          new Cesium.CallbackProperty(function () {\r\n            if (flog) {\r\n              alp = alp - 0.05\r\n              if (alp <= 0) {\r\n                flog = false // hide\r\n              }\r\n            } else {\r\n              alp = alp + 0.05\r\n              if (alp >= 1) {\r\n                flog = true // show\r\n              }\r\n            }\r\n            return Cesium.Color.RED.withAlpha(alp)\r\n          }, false)\r\n        )\r\n      }\r\n      return this.viewer.entities.add(entity)\r\n    }\r\n  }\r\n\r\n  //动态旋转圆\r\n  public craeteDynamicCricleGraphics(options) {\r\n    if (options && options.center) {\r\n      let entity = this.createGraphics(),\r\n        $this = this,\r\n        _center = options.center,\r\n        _radius = options.radius || 800,\r\n        _rotateAmount = options.rotateAmount || 0.05,\r\n        _stRotation = 0,\r\n        _height = options.height || 1,\r\n        heading = 0,\r\n        pitch = 0,\r\n        roll = 0,\r\n        _scale = options.scale || null,\r\n        _scale2 = options.scale2 || null,\r\n        _material =\r\n          options.material ||\r\n          new Cesium.ImageMaterialProperty({\r\n            image: options.imge || 'data/images/Textures/circle_bg.png',\r\n            transparent: true\r\n          })\r\n\r\n      entity.position = new Cesium.CallbackProperty(function () {\r\n        return transformWGS84ToCartesian(_center)\r\n      }, false)\r\n\r\n      entity.orientation = new Cesium.CallbackProperty(function () {\r\n        return Cesium.Transforms.headingPitchRollQuaternion(\r\n          transformWGS84ToCartesian(_center),\r\n          new Cesium.HeadingPitchRoll(\r\n            Cesium.Math.toRadians(heading),\r\n            Cesium.Math.toRadians(pitch),\r\n            Cesium.Math.toRadians(roll)\r\n          )\r\n        )\r\n      }, false)\r\n      let bg_scale = _radius,\r\n        flag = false\r\n      const updateScalerAxis = () => {\r\n        if (_radius >= _scale || _radius <= bg_scale) {\r\n          flag = !flag\r\n        }\r\n        flag ? (_radius += 2) : (_radius -= 2)\r\n      }\r\n      const updateScalerAxis2 = () => {\r\n        _scale2 >= _radius ? (_radius += 2) : (_radius = bg_scale)\r\n      }\r\n      entity.ellipse = {\r\n        material: _material,\r\n        height: _height,\r\n        semiMajorAxis: new Cesium.CallbackProperty(function () {\r\n          return _radius\r\n        }, false),\r\n        semiMinorAxis: new Cesium.CallbackProperty(function () {\r\n          return _radius\r\n        }, false),\r\n        stRotation: new Cesium.CallbackProperty(function () {\r\n          if (_rotateAmount > 0) {\r\n            _stRotation += _rotateAmount\r\n            if (_stRotation >= 360) {\r\n              _stRotation = 0\r\n            }\r\n          }\r\n          if (_scale) updateScalerAxis()\r\n          if (_scale2) updateScalerAxis2()\r\n          return _stRotation\r\n        }, false)\r\n      }\r\n      return this.viewer.entities.add(entity)\r\n    }\r\n  }\r\n\r\n  //动态渐变墙\r\n  public craeteDynamicShadeWallGraphics(options) {\r\n    if (options && options.positions) {\r\n      let alp = options.alp || 1,\r\n        num = options.num || 20,\r\n        color = options.color || Cesium.Color.RED,\r\n        speed = options.speed || 0.003\r\n\r\n      const wallEntity = this.createGraphics()\r\n      wallEntity.wall = {\r\n        positions: options.positions,\r\n        material: new Cesium.ImageMaterialProperty({\r\n          image: 'data/images/Textures/fence.png',\r\n          transparent: true,\r\n          color: new Cesium.CallbackProperty(function () {\r\n            if (num % 2 === 0) {\r\n              alp -= speed\r\n            } else {\r\n              alp += speed\r\n            }\r\n\r\n            if (alp <= 0.1) {\r\n              num++\r\n            } else if (alp >= 1) {\r\n              num++\r\n            }\r\n            return color.withAlpha(alp)\r\n          }, false)\r\n        })\r\n      }\r\n      return this.viewer.entities.add(wallEntity)\r\n    }\r\n  }\r\n\r\n  // 默认自定义标牌气泡框\r\n  public createCustomDefBillboardGraphics(options) {\r\n    if (options && options.position) {\r\n      const $this = this,\r\n        img = new Image()\r\n      img.src = options.img || 'src/assets/image/div1.png'\r\n      // 绘制canvas\r\n      function drawCompanyTip(options) {\r\n        if (!options.image) return\r\n        const canvas = document.createElement('canvas')\r\n        canvas.width = options.width || 150\r\n        canvas.height = options.height || 80\r\n        const context = canvas.getContext('2d')\r\n        context.drawImage(options.image, 0, 0)\r\n        const dom = options.text\r\n        context.font = '15px bold 宋体'\r\n        context.fillStyle = '#f4fff0'\r\n        context.fillText(dom, 55, 36)\r\n        return canvas\r\n      }\r\n      img.onload = function () {\r\n        options.image = img\r\n        const entity = $this.viewer.entities.add({\r\n          name: options.name || null,\r\n          id: options.id || null,\r\n          position: options.position,\r\n          billboard: {\r\n            image: drawCompanyTip(options),\r\n            scaleByDistance: new Cesium.NearFarScalar(1.5e2, 0.7, 1.5e7, 0.5),\r\n            verticalOrigin: Cesium.VerticalOrigin.BOTTOM,\r\n            pixelOffset: options.pixelOffset || new Cesium.Cartesian2(80, -35),\r\n            width: 140,\r\n            height: 100,\r\n            scale: options.scale || 1.5,\r\n            disableDepthTestDistance: Number.POSITIVE_INFINITY,\r\n            imageSubRegion: { x: 0, y: 0, width: 200, height: 150 }\r\n          }\r\n        })\r\n        if (typeof options.callback === 'function') {\r\n          options.callback(entity)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // 旋转面\r\n  public craeteRotatePlaneGraphics(options) {\r\n    if (options && options.center && options.positions) {\r\n      let entity = this.createGraphics(),\r\n        index = 0,\r\n        _center = options.center,\r\n        _plane,\r\n        positions = options.positions,\r\n        _position = positions[0]\r\n      entity.position = new Cesium.CallbackProperty(function () {\r\n        if (index == 0) {\r\n          ;(_position = positions[0]), (index += 1)\r\n        } else if (index < positions.length - 1) {\r\n          ;(_position = positions[index]), (index += 1)\r\n        } else if (index == positions.length - 1) {\r\n          ;(_position = positions[index]), (index = 0)\r\n        }\r\n        return _position\r\n      }, false)\r\n      entity.plane = {\r\n        // plane: new Cesium.CallbackProperty(function () {\r\n        //     var normaB = Cesium.Cartesian3.normalize(Cesium.Cartesian3.subtract(_center, _position, new Cesium.Cartesian3()), new Cesium.Cartesian3())\r\n        //     _plane = new Cesium.Plane(Cesium.Cartesian3.normalize(Cesium.Cartesian3.add(normaB, _center, new Cesium.Cartesian3()), new Cesium.Cartesian3()), 0.0)\r\n\r\n        //     _plane = Cesium.Plane.fromPointNormal(coefficients, result)\r\n        //     return _plane;\r\n        // }, false),\r\n        plane: new Cesium.Plane(Cesium.Cartesian3.UNIT_Y, 0.0),\r\n        dimensions: options.dimensions || new Cesium.Cartesian2(200.0, 150.0),\r\n        material: new Cesium.ImageMaterialProperty({\r\n          image: options.image\r\n        })\r\n      }\r\n\r\n      return this.viewer.entities.add(entity)\r\n    }\r\n  }\r\n\r\n  // 视频投放\r\n  public createVideoPlaneGraphics(options) {\r\n    if (options && options.position) {\r\n      const entity = this.createGraphics()\r\n      entity.position = options.position\r\n      entity.plane = {\r\n        plane: new Cesium.Plane(options.normal || Cesium.Cartesian3.UNIT_Y, 0.0),\r\n        dimensions: options.dimensions || new Cesium.Cartesian2(200.0, 150.0),\r\n        material: new Cesium.ImageMaterialProperty({\r\n          image: options.videoElement\r\n        })\r\n      }\r\n      return this.viewer.entities.add(entity)\r\n    }\r\n  }\r\n\r\n  //gif 图片投影\r\n  public createGifBillboardGraphics(options) {\r\n    if (SuperGif && options && options.position) {\r\n      let gif = [],\r\n        url = options.url,\r\n        i = 0,\r\n        speed = 6\r\n\r\n      // 遍历gif的每一帧\r\n      function parseGifImages(url, imageArr) {\r\n        const img = document.createElement('img')\r\n        img.src = url\r\n        img.setAttribute('rel:animated_src', url) // gif库需要img标签配置下面两个属性\r\n        img.setAttribute('rel:auto_play', '0')\r\n        document.body.appendChild(img)\r\n        // 新建gif实例\r\n        const rub = new SuperGif({ gif: img })\r\n        return new Promise((resolve) => {\r\n          rub.load(() => {\r\n            for (let i = 1; i <= rub.get_length(); i++) {\r\n              rub.move_to(i) // 遍历gif实例的每一帧\r\n              imageArr.push(rub.get_canvas().toDataURL())\r\n            }\r\n            resolve(imageArr)\r\n            // document.body.removeChild(img)\r\n          })\r\n        })\r\n      }\r\n\r\n      parseGifImages(url, gif)\r\n      return this.viewer.entities.add({\r\n        position: options.position,\r\n        billboard: {\r\n          verticalOrigin: Cesium.VerticalOrigin.BASELINE,\r\n          image: new Cesium.CallbackProperty(function () {\r\n            if (gif.length) {\r\n              // 解析每一帧\r\n              if (i < speed * (gif.length - 1)) {\r\n                i++\r\n              } else {\r\n                i = 0\r\n              }\r\n              return gif[Math.floor(i / speed)]\r\n            } else {\r\n              return url //因为loadGif是异步的，在解析完成之前先使用原图\r\n            }\r\n          }, false),\r\n          scale: 0.2\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  //图形旋转\r\n  public setGraphicsRotate(options) {\r\n    if (options && options.entity && options.rotateAmount) {\r\n      const entity = options.entity,\r\n        rotateAmount = options.rotateAmount,\r\n        _position = options.position,\r\n        $this = this\r\n      ;(_position.heading = 0), (_position.pitch = 0), (_position.roll = 0)\r\n      entity.position = new Cesium.CallbackProperty(function () {\r\n        return transformWGS84ToCartesian(_position)\r\n      }, false)\r\n\r\n      entity.orientation = new Cesium.CallbackProperty(function () {\r\n        if (rotateAmount > 0) {\r\n          _position.heading += rotateAmount\r\n          if (_position.heading === 360) {\r\n            _position.heading = 0\r\n          }\r\n        }\r\n        return Cesium.Transforms.headingPitchRollQuaternion(\r\n          transformWGS84ToCartesian(_position),\r\n          new Cesium.HeadingPitchRoll(\r\n            Cesium.Math.toRadians(_position.heading),\r\n            Cesium.Math.toRadians(_position.pitch),\r\n            Cesium.Math.toRadians(_position.roll)\r\n          )\r\n        )\r\n      }, false)\r\n    }\r\n  }\r\n\r\n  // 图形浮动\r\n  public setGraphicsFloat(options) {\r\n    if (options && options.entity && options.maxHeiht) {\r\n      let entity = options.entity,\r\n        minHeiht = options.minHeiht || 5,\r\n        maxHeiht = options.maxHeiht || 100,\r\n        cartesians = options.cartesians,\r\n        speed = options.speed || 0.06,\r\n        $this = this,\r\n        bg_minHeiht = minHeiht,\r\n        flag = false\r\n      if (cartesians.length) {\r\n        entity.positions = new Cesium.CallbackProperty(function () {\r\n          const positions = transformCartesianArrayToWGS84Array(cartesians)\r\n          for (const i in positions) {\r\n            const position = positions[i]\r\n            if (minHeiht >= maxHeiht || minHeiht <= bg_minHeiht) {\r\n              flag = !flag\r\n            }\r\n            flag ? (minHeiht += speed) : (minHeiht -= speed)\r\n            position.alt = minHeiht\r\n          }\r\n          return transformWGS84ArrayToCartesianArray(positions)\r\n        }, false)\r\n      } else {\r\n        entity.position = new Cesium.CallbackProperty(function () {\r\n          const position = transformCartesianToWGS84(cartesians)\r\n          if (minHeiht >= maxHeiht || minHeiht <= bg_minHeiht) {\r\n            flag = !flag\r\n          }\r\n          flag ? (minHeiht += speed) : (minHeiht -= speed)\r\n          position.alt = minHeiht\r\n          return transformWGS84ToCartesian(position)\r\n        }, false)\r\n      }\r\n    }\r\n  }\r\n\r\n  //canvas 贴图\r\n  public createCanvasGraphics(options) {\r\n    if (options && options.positions) {\r\n      function drawCanvasImage() {\r\n        const canvas = document.createElement('canvas')\r\n        const ctx = canvas.getContext('2d')\r\n        const img = new Image()\r\n        img.src = options.img || '../../images/ysCesium/logo.png'\r\n        ctx.clearRect(0, 0, options.cwidth, options.cheight)\r\n        if (i <= cwidth) {\r\n          ctx.drawImage(img, i, 0)\r\n        } else i = 0\r\n        i += 3\r\n        curCanvas = curCanvas === 'c' ? 'd' : 'c'\r\n        return canvas\r\n      }\r\n\r\n      this.viewer.entities.add({\r\n        rectangle: {\r\n          coordinates: options.positions,\r\n          material: new Cesium.ImageMaterialProperty({\r\n            image: new Cesium.CallbackProperty(drawCanvasImage, false),\r\n            transparent: true\r\n          })\r\n        }\r\n      })\r\n\r\n      if (typeof options.callback === 'function') {\r\n        options.callback()\r\n      }\r\n    }\r\n  }\r\n\r\n  // 报警点位闪烁\r\n  public createAlarmPoint = (options) => {\r\n    let x = 1\r\n    let flog = true\r\n    this.viewer.entities.add({\r\n      position: options.position,\r\n      point: {\r\n        show: true, // default\r\n        color: new Cesium.CallbackProperty(function () {\r\n          if (flog) {\r\n            x = x - 0.05\r\n            if (x <= 0) {\r\n              flog = false\r\n            }\r\n          } else {\r\n            x = x + 0.05\r\n            if (x >= 1) {\r\n              flog = true\r\n            }\r\n          }\r\n          return Cesium.Color.RED.withAlpha(x)\r\n        }, false),\r\n        pixelSize: 10, // default: 1\r\n        outlineWidth: 0\r\n      }\r\n    })\r\n  }\r\n\r\n  // 报警区域闪烁（圆）\r\n  public createAlarmCircle = (options) => {\r\n    let x = 1\r\n    let flog = true\r\n    this.viewer.entities.add({\r\n      position: options.position,\r\n      ellipse: {\r\n        semiMinorAxis: options.semiMinorAxis || 100,\r\n        semiMajorAxis: options.semiMajorAxis || 100,\r\n        height: 0,\r\n        material: new Cesium.ColorMaterialProperty(\r\n          new Cesium.CallbackProperty(function () {\r\n            if (flog) {\r\n              x = x - 0.05\r\n              if (x <= 0) {\r\n                flog = false\r\n              }\r\n            } else {\r\n              x = x + 0.05\r\n              if (x >= 1) {\r\n                flog = true\r\n              }\r\n            }\r\n            return Cesium.Color.RED.withAlpha(x)\r\n          }, false)\r\n        )\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport default CesiumGraphics\r\n"],"names":["CesiumGraphics","viewer","__publicField","options","x","flog","_a","_b","color","pixelSize","outlineColor","outlineWidth","args","__objRest","_c","_d","show","material","width","clampToGround","_e","_f","positions","_g","_h","text","font","fillColor","style","showBackground","backgroundColor","verticalOrigin","pixelOffset","_i","_j","height","scale","scaleByDistance","_k","_l","resolution","glowPower","_m","_n","uri","minimumPixelSize","maximumScale","_o","_p","semiMajorAxis","semiMinorAxis","metarial","outline","_q","_r","radii","innerRadii","minimumClock","maximumClock","minimumCone","maximumCone","fill","_s","_t","plane","dimensions","_u","_v","HeightReference","length","topRadius","bottomRadius","slices","name","oid","point","billboard","label","points","i2","position","entity","_w","_x","_y","_z","clampToS3M","model","orientation","_A","_B","CircleFadeMaterial","cylinderEntity","transformCartesianToWGS84","alp","_center","_radius","_rotateAmount","_stRotation","_height","heading","pitch","roll","_scale","_scale2","_material","transformWGS84ToCartesian","bg_scale","flag","updateScalerAxis","updateScalerAxis2","num","speed","wallEntity","drawCompanyTip","options2","canvas","context","dom","$this","img","index","_position","parseGifImages","url2","imageArr","rub","resolve","i3","gif","url","rotateAmount","minHeiht","maxHeiht","cartesians","bg_minHeiht","transformCartesianArrayToWGS84Array","transformWGS84ArrayToCartesianArray","drawCanvasImage","ctx"],"mappings":"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"}
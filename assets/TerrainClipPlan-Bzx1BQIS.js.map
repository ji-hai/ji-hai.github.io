{"version":3,"file":"TerrainClipPlan-Bzx1BQIS.js","sources":["../../src/components/Cesium/CesiumTerrainClipPlan/index.ts","../../src/views/CesiumDraw/TerrainClipPlan.vue"],"sourcesContent":["import * as Cesium from 'cesium'\r\n\r\nclass TerrainClipPlan {\r\n  declare viewer: any\r\n  declare _positions: object\r\n  declare _height: number\r\n  declare bottomImg: string\r\n  declare wallImg: string\r\n  declare splitNum: number\r\n  declare excavateMinHeight: number\r\n  declare wellData: any\r\n  constructor({ viewer, positions = {}, height = 0, bottomImg, wallImg, splitNum = 50 }) {\r\n    this.viewer = viewer\r\n    this._positions = positions\r\n    this._height = height || 0\r\n    this.bottomImg = bottomImg\r\n    this.wallImg = wallImg\r\n    this.splitNum = splitNum\r\n    this.excavateMinHeight = 0\r\n    this.wellData = null\r\n    this._positions && this._positions.length > 0 && this.updateData(this._positions)\r\n  }\r\n\r\n  get show() {\r\n    return this._show\r\n  }\r\n\r\n  set show(e) {\r\n    ;(this._show = e),\r\n      this.viewer.scene.globe.clippingPlanes &&\r\n        (this.viewer.scene.globe.clippingPlanes.enabled = e),\r\n      this._switchExcavate(e)\r\n  }\r\n\r\n  get height() {\r\n    return this._height\r\n  }\r\n\r\n  set height(e) {\r\n    ;(this._height = e), this._updateExcavateDepth(e)\r\n  }\r\n\r\n  updateData(e) {\r\n    this.clear()\r\n    const t = [],\r\n      i = e.length,\r\n      a = new Cesium.Cartesian3(),\r\n      n = Cesium.Cartesian3.subtract(e[0], e[1], a)\r\n\r\n    if (n.x > 0) this.excavateMinHeight = 9999\r\n\r\n    for (let r = 0; r < i - 1; ++r) {\r\n      const s = (r + 1) % i,\r\n        l = Cesium.Cartesian3.midpoint(e[r], e[s], new Cesium.Cartesian3()),\r\n        u = Cesium.Cartographic.fromCartesian(e[r]),\r\n        c = this.viewer.scene.globe.getHeight(u) || u.height\r\n\r\n      c < this.excavateMinHeight && (this.excavateMinHeight = c)\r\n      let d,\r\n        h = Cesium.Cartesian3.normalize(l, new Cesium.Cartesian3())\r\n\r\n      d = n\r\n        ? Cesium.Cartesian3.subtract(e[r], l, new Cesium.Cartesian3())\r\n        : Cesium.Cartesian3.subtract(e[s], l, new Cesium.Cartesian3())\r\n\r\n      d = Cesium.Cartesian3.normalize(d, d)\r\n\r\n      let f = Cesium.Cartesian3.cross(d, h, new Cesium.Cartesian3())\r\n\r\n      f = Cesium.Cartesian3.normalize(f, f)\r\n      const p = new Cesium.Plane(f, 0),\r\n        m = Cesium.Plane.getPointDistance(p, l)\r\n      t.push(new Cesium.ClippingPlane(f, m))\r\n    }\r\n\r\n    this.viewer.scene.globe.depthTestAgainstTerrain = true\r\n    this.viewer.scene.globe.clippingPlanes = new Cesium.ClippingPlaneCollection({\r\n      planes: t,\r\n      edgeWidth: 1,\r\n      edgeColor: Cesium.Color.WHITE,\r\n      enabled: !0\r\n    })\r\n    this._prepareWell(e)\r\n    this._createWell(this.wellData)\r\n  }\r\n\r\n  clear() {\r\n    if (this.viewer.scene.globe.clippingPlanes) {\r\n      this.viewer.scene.globe.clippingPlanes.removeAll()\r\n\r\n      this.bottomSurface && this.viewer.scene.primitives.remove(this.bottomSurface)\r\n\r\n      this.wellWall && this.viewer.scene.primitives.remove(this.wellWall)\r\n\r\n      delete this.bottomSurface\r\n\r\n      delete this.wellWall\r\n\r\n      this.viewer.scene.render()\r\n    }\r\n    // this.viewer.scene.globe.clippingPlanes &&\r\n    //   ((this.viewer.scene.globe.clippingPlanes.enabled = !1),\r\n    //   this.viewer.scene.globe.clippingPlanes.removeAll(),\r\n    //   this.viewer.scene.globe.clippingPlanes.isDestroyed() ||\r\n    //     this.viewer.scene.globe.clippingPlanes.destroy()),\r\n    //   (this.viewer.scene.globe.clippingPlanes = void 0),\r\n    //   this.bottomSurface && this.viewer.scene.primitives.remove(this.bottomSurface),\r\n    //   this.wellWall && this.viewer.scene.primitives.remove(this.wellWall),\r\n    //   delete this.bottomSurface,\r\n    //   delete this.wellWall,\r\n    //   this.viewer.scene.render()\r\n  }\r\n\r\n  _prepareWell(e) {\r\n    const t = this.splitNum,\r\n      i = e.length\r\n    if (0 != i) {\r\n      for (\r\n        var a = this.excavateMinHeight - this.height, n = [], r = [], s = [], l = 0;\r\n        l < i;\r\n        l++\r\n      ) {\r\n        const u = l == i - 1 ? 0 : l + 1,\r\n          c = Cesium.Cartographic.fromCartesian(e[l]),\r\n          d = Cesium.Cartographic.fromCartesian(e[u]),\r\n          h = [c.longitude, c.latitude],\r\n          f = [d.longitude, d.latitude]\r\n\r\n        0 == l &&\r\n          (s.push(new Cesium.Cartographic(h[0], h[1])),\r\n          r.push(Cesium.Cartesian3.fromRadians(h[0], h[1], a)),\r\n          n.push(Cesium.Cartesian3.fromRadians(h[0], h[1], 0)))\r\n\r\n        for (let p = 1; p <= t; p++) {\r\n          const m = Cesium.Math.lerp(h[0], f[0], p / t),\r\n            g = Cesium.Math.lerp(h[1], f[1], p / t)\r\n          ;(l == i - 1 && p == t) ||\r\n            (s.push(new Cesium.Cartographic(m, g)),\r\n            r.push(Cesium.Cartesian3.fromRadians(m, g, a)),\r\n            n.push(Cesium.Cartesian3.fromRadians(m, g, 0)))\r\n        }\r\n      }\r\n      this.wellData = {\r\n        lerp_pos: s,\r\n        bottom_pos: r,\r\n        no_height_top: n\r\n      }\r\n    }\r\n  }\r\n\r\n  _createWell(e) {\r\n    if (Boolean(this.viewer.terrainProvider._layers)) {\r\n      const t = this\r\n      this._createBottomSurface(e.bottom_pos)\r\n      const i = Cesium.sampleTerrainMostDetailed(this.viewer.terrainProvider, e.lerp_pos)\r\n      Cesium.when(i, function (i) {\r\n        for (var a = i.length, n = [], r = 0; r < a; r++) {\r\n          const s = Cesium.Cartesian3.fromRadians(i[r].longitude, i[r].latitude, i[r].height)\r\n          n.push(s)\r\n        }\r\n        t._createWellWall(e.bottom_pos, n)\r\n      })\r\n    } else {\r\n      this._createBottomSurface(e.bottom_pos)\r\n      this._createWellWall(e.bottom_pos, e.no_height_top)\r\n    }\r\n  }\r\n\r\n  _getMinHeight(e) {\r\n    let minHeight = 5000000\r\n    let minPoint = null\r\n    for (let i = 0; i < e.length; i++) {\r\n      const height = e[i]['z']\r\n      if (height < minHeight) {\r\n        minHeight = height\r\n        minPoint = this._ellipsoidToLonLat(e[i])\r\n      }\r\n    }\r\n    return minPoint.altitude\r\n  }\r\n\r\n  _ellipsoidToLonLat(c) {\r\n    const ellipsoid = this.viewer.scene.globe.ellipsoid\r\n    const cartesian3 = new Cesium.Cartesian3(c.x, c.y, c.z)\r\n    const cartographic = ellipsoid.cartesianToCartographic(cartesian3)\r\n    const lat = Cesium.Math.toDegrees(cartographic.latitude)\r\n    const lng = Cesium.Math.toDegrees(cartographic.longitude)\r\n    const alt = cartographic.height\r\n    return {\r\n      longitude: lng,\r\n      latitude: lat,\r\n      altitude: alt\r\n    }\r\n  }\r\n\r\n  _createBottomSurface(e) {\r\n    if (e.length) {\r\n      const minHeight = this._getMinHeight(e)\r\n      const positions = []\r\n      for (let i = 0; i < e.length; i++) {\r\n        const p = this._ellipsoidToLonLat(e[i])\r\n        positions.push(p.longitude)\r\n        positions.push(p.latitude)\r\n        positions.push(minHeight)\r\n      }\r\n\r\n      const polygon = new Cesium.PolygonGeometry({\r\n        polygonHierarchy: new Cesium.PolygonHierarchy(\r\n          Cesium.Cartesian3.fromDegreesArrayHeights(positions)\r\n        ),\r\n        perPositionHeight: true\r\n      })\r\n      const geometry = Cesium.PolygonGeometry.createGeometry(polygon)\r\n\r\n      const i = new Cesium.Material({\r\n          fabric: {\r\n            type: 'Image',\r\n            uniforms: {\r\n              image: this.bottomImg\r\n            }\r\n          }\r\n        }),\r\n        a = new Cesium.MaterialAppearance({\r\n          translucent: !1,\r\n          flat: !0,\r\n          material: i\r\n        })\r\n      ;(this.bottomSurface = new Cesium.Primitive({\r\n        geometryInstances: new Cesium.GeometryInstance({\r\n          geometry: geometry\r\n        }),\r\n        appearance: a,\r\n        asynchronous: !1\r\n      })),\r\n        this.viewer.scene.primitives.add(this.bottomSurface)\r\n    }\r\n  }\r\n\r\n  _createWellWall(e, t) {\r\n    const minHeight = this._getMinHeight(e)\r\n    const maxHeights = []\r\n    const minHeights = []\r\n    for (let i = 0; i < t.length; i++) {\r\n      maxHeights.push(this._ellipsoidToLonLat(t[i]).altitude)\r\n      minHeights.push(minHeight)\r\n    }\r\n    const wall = new Cesium.WallGeometry({\r\n      positions: t,\r\n      maximumHeights: maxHeights,\r\n      minimumHeights: minHeights\r\n    })\r\n    const geometry = Cesium.WallGeometry.createGeometry(wall)\r\n    const a = new Cesium.Material({\r\n        fabric: {\r\n          type: 'Image',\r\n          uniforms: {\r\n            image: this.wallImg\r\n          }\r\n        }\r\n      }),\r\n      n = new Cesium.MaterialAppearance({\r\n        translucent: !1,\r\n        flat: !0,\r\n        material: a\r\n      })\r\n    ;(this.wellWall = new Cesium.Primitive({\r\n      geometryInstances: new Cesium.GeometryInstance({\r\n        geometry: geometry,\r\n        attributes: {\r\n          color: Cesium.ColorGeometryInstanceAttribute.fromColor(Cesium.Color.GREY)\r\n        },\r\n        id: 'PitWall'\r\n      }),\r\n      appearance: n,\r\n      asynchronous: !1\r\n    })),\r\n      this.viewer.scene.primitives.add(this.wellWall)\r\n  }\r\n  _switchExcavate(e) {\r\n    e\r\n      ? ((this.viewer.scene.globe.material = Cesium.Material.fromType('WaJue')),\r\n        (this.wellWall.show = !0),\r\n        (this.bottomSurface.show = !0))\r\n      : ((this.viewer.scene.globe.material = null),\r\n        (this.wellWall.show = !1),\r\n        (this.bottomSurface.show = !1))\r\n  }\r\n  _updateExcavateDepth(e) {\r\n    this.bottomSurface && this.viewer.scene.primitives.remove(this.bottomSurface),\r\n      this.wellWall && this.viewer.scene.primitives.remove(this.wellWall)\r\n    for (var t = this.wellData.lerp_pos, i = [], a = t.length, n = 0; n < a; n++)\r\n      i.push(\r\n        Cesium.Cartesian3.fromRadians(t[n].longitude, t[n].latitude, this.excavateMinHeight - e)\r\n      )\r\n    ;(this.wellData.bottom_pos = i),\r\n      this._createWell(this.wellData),\r\n      this.viewer.scene.primitives.add(this.bottomSurface),\r\n      this.viewer.scene.primitives.add(this.wellWall)\r\n  }\r\n}\r\n\r\nexport default TerrainClipPlan\r\n","<script setup lang=\"ts\">\r\nimport { ContentWrap } from '@/components/ContentWrap'\r\nimport CesiumComponent from '@/components/Cesium/Cesium.component.vue'\r\n\r\nimport { ElButton } from 'element-plus'\r\nimport { useCesium } from '@/hooks/web/useCesium'\r\nimport * as Cesium from 'cesium'\r\n\r\nimport CesiumDraw from '@/components/Cesium/CesiumDraw'\r\nimport { DynamicWallMaterialProperty } from '@/components/Cesium/CesiumMaterialProperty'\r\nimport TerrainClipPlan from '@/components/Cesium/CesiumTerrainClipPlan'\r\nimport { transformWGS84ArrayToCartesianArray } from '@/components/Cesium/CesiumBase'\r\n\r\nconst { mapRegister, mapMethods } = useCesium()\r\n\r\nconst { getMap } = mapMethods\r\n\r\ndefineOptions({\r\n  name: 'TerrainClipPlan'\r\n})\r\n\r\nlet cesiumDraw\r\nlet terrainClipPlan\r\nconst cesiumLoadCB = (viewer) => {\r\n  cesiumDraw = new CesiumDraw(viewer)\r\n  terrainClipPlan = new TerrainClipPlan({\r\n    viewer: viewer,\r\n    // positions: transformWGS84ArrayToCartesianArray(polygon),\r\n    height: 200,\r\n    splitNum: 100,\r\n    wallImg: 'src/assets/image/excavate_side_min.jpg',\r\n    bottomImg: 'src/assets/image/excavate_bottom_min.jpg'\r\n  })\r\n}\r\n\r\nconst start = () => {\r\n  cesiumDraw.drawPolygonGraphics({\r\n    callback: (polygon, polygonObj) => {\r\n      cesiumDraw.drawLayer.entities.remove(polygonObj)\r\n      terrainClipPlan.updateData(transformWGS84ArrayToCartesianArray(polygon))\r\n    }\r\n  })\r\n}\r\n</script>\r\n\r\n<template>\r\n  <ContentWrap title=\"地形开挖\">\r\n    <ElButton @click=\"start\">开挖</ElButton>\r\n    <div class=\"w-[100%] h-[100%]\">\r\n      <cesium-component\r\n        @register=\"mapRegister\"\r\n        :config=\"{\r\n          // homeButton: true\r\n        }\"\r\n        tiandituTk=\"80cd3c8ae46ae32fa0ac19f6d739d310\"\r\n        :cesiumLoadCB=\"cesiumLoadCB\"\r\n      />\r\n    </div>\r\n  </ContentWrap>\r\n</template>\r\n"],"names":["TerrainClipPlan","viewer","positions","height","bottomImg","wallImg","splitNum","t","i","a","n","s","l","u","c","d","h","f","m","g","i2","r","minHeight","minPoint","ellipsoid","cartesian3","cartographic","lat","lng","alt","p","polygon","geometry","maxHeights","minHeights","wall","mapRegister","mapMethods","useCesium","cesiumDraw","terrainClipPlan","cesiumLoadCB","CesiumDraw","start","polygonObj","transformWGS84ArrayToCartesianArray"],"mappings":"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"}
{"version":3,"mappings":"2lBAAA,MAAeA,GAAA,4BCIFC,EAAWC,GACfC,EAAEC,EAAMF,CAAK,ECkBhBG,EAAa,qFAhBb,MAAE,aAAAC,GAAiBC,IAEnBC,EAAOC,EAEPC,EAAYJ,EAAa,cAAc,EAEvCK,EAAMV,EAAQ,CAAE,KAAM,wBAAyB,MAAO,UAAW,EAEjEW,EAAeX,EAAQ,CAAE,KAAM,kCAAmC,MAAO,UAAW,EAEpFY,EAAWC,IAGXC,EAASC,EAAIH,EAAS,SAAS,EAK/BI,EAAeC,GAAiB,CACpCL,EAAS,UAAUK,CAAG,EACtBV,EAAK,SAAUU,CAAG,qVCvBdC,EAAmBC,GAAuB,CAC9C,MAAMC,EAAcC,IAEhBC,EAAK,OAAS,SAChBA,EAAK,OAAO,OAASH,EAEnBG,EAAK,OAAO,OAAe,MAAQH,EAEvCC,EAAY,iBAAiB,CAC3B,KAAMD,CAAA,CACP,EACDI,EAAgBJ,CAAM,CACxB,EAEaK,EAAY,KAahB,CACL,aAX0BL,GAAuBM,EAAA,wBACjD,MAAMC,EAAaJ,EAAK,OAElBK,EAAa,MAAMC,yLAAA,iBAAAT,CAAA,OAEdO,EAAA,iBAAiBP,EAAQQ,EAAW,OAAO,EAEtDT,EAAgBC,CAAM,GAItB,yECxBE,MAAE,aAAAd,GAAiBC,IAEnBG,EAAYJ,EAAa,iBAAiB,EAM1Ce,EAAcS,IAEdC,EAAUC,EAAS,IAAMX,EAAY,YAAY,EAEjDY,EAAcD,EAAS,IAAMX,EAAY,gBAAgB,EAEzDa,EAAWC,GAAqB,CAChC,GAAAA,IAASC,EAAMH,CAAW,EAAE,KAAM,OAEtC,OAAO,SAAS,SAChBZ,EAAY,iBAAiB,CAC3B,KAAAc,CAAA,CACD,EACK,MAAE,aAAAE,GAAiBZ,IACzBY,EAAaF,CAAI","names":["_imports_0","useIcon","props","h","Icon","blackColor","getPrefixCls","useDesign","emit","__emit","prefixCls","Sun","CrescentMoon","appStore","useAppStore","isDark","ref","themeChange","val","setI18nLanguage","locale","localeStore","useLocaleStoreWithOut","i18n","setHtmlPageLang","useLocale","__async","globalI18n","langModule","__variableDynamicImportRuntimeHelper","useLocaleStore","langMap","computed","currentLang","setLang","lang","unref","changeLocale"],"sources":["../../src/assets/imgs/logo.png","../../src/hooks/web/useIcon.ts","../../src/components/ThemeSwitch/src/ThemeSwitch.vue","../../src/hooks/web/useLocale.ts","../../src/components/LocaleDropdown/src/LocaleDropdown.vue"],"sourcesContent":["export default \"__VITE_ASSET__DacSPZ0B__\"","import { h } from 'vue'\r\nimport type { VNode } from 'vue'\r\nimport { Icon, IconTypes } from '@/components/Icon'\r\n\r\nexport const useIcon = (props: IconTypes): VNode => {\r\n  return h(Icon, props)\r\n}\r\n","<script setup lang=\"ts\">\r\nimport { ref } from 'vue'\r\nimport { useAppStore } from '@/store/modules/app'\r\nimport { ElSwitch } from 'element-plus'\r\nimport { useIcon } from '@/hooks/web/useIcon'\r\nimport { useDesign } from '@/hooks/web/useDesign'\r\n\r\nconst { getPrefixCls } = useDesign()\r\n\r\nconst emit = defineEmits(['change'])\r\n\r\nconst prefixCls = getPrefixCls('theme-switch')\r\n\r\nconst Sun = useIcon({ icon: 'emojione-monotone:sun', color: '#fde047' })\r\n\r\nconst CrescentMoon = useIcon({ icon: 'emojione-monotone:crescent-moon', color: '#fde047' })\r\n\r\nconst appStore = useAppStore()\r\n\r\n// 初始化获取是否是暗黑主题\r\nconst isDark = ref(appStore.getIsDark)\r\n\r\n// 设置switch的背景颜色\r\nconst blackColor = 'var(--el-color-black)'\r\n\r\nconst themeChange = (val: boolean) => {\r\n  appStore.setIsDark(val)\r\n  emit('change', val)\r\n}\r\n</script>\r\n\r\n<template>\r\n  <ElSwitch\r\n    :class=\"prefixCls\"\r\n    v-model=\"isDark\"\r\n    inline-prompt\r\n    :border-color=\"blackColor\"\r\n    :inactive-color=\"blackColor\"\r\n    :active-color=\"blackColor\"\r\n    :active-icon=\"Sun\"\r\n    :inactive-icon=\"CrescentMoon\"\r\n    @change=\"themeChange\"\r\n  />\r\n</template>\r\n\r\n<style lang=\"less\" scoped>\r\n:deep(.el-switch__core .el-switch__inner .is-icon) {\r\n  overflow: visible;\r\n}\r\n</style>\r\n","import { i18n } from '@/plugins/vueI18n'\r\nimport { useLocaleStoreWithOut } from '@/store/modules/locale'\r\nimport { setHtmlPageLang } from '@/plugins/vueI18n/helper'\r\n\r\nconst setI18nLanguage = (locale: LocaleType) => {\r\n  const localeStore = useLocaleStoreWithOut()\r\n\r\n  if (i18n.mode === 'legacy') {\r\n    i18n.global.locale = locale\r\n  } else {\r\n    ;(i18n.global.locale as any).value = locale\r\n  }\r\n  localeStore.setCurrentLocale({\r\n    lang: locale\r\n  })\r\n  setHtmlPageLang(locale)\r\n}\r\n\r\nexport const useLocale = () => {\r\n  // Switching the language will change the locale of useI18n\r\n  // And submit to configuration modification\r\n  const changeLocale = async (locale: LocaleType) => {\r\n    const globalI18n = i18n.global\r\n\r\n    const langModule = await import(`../../locales/${locale}.ts`)\r\n\r\n    globalI18n.setLocaleMessage(locale, langModule.default)\r\n\r\n    setI18nLanguage(locale)\r\n  }\r\n\r\n  return {\r\n    changeLocale\r\n  }\r\n}\r\n","<script setup lang=\"ts\">\r\nimport { computed, unref } from 'vue'\r\nimport { ElDropdown, ElDropdownMenu, ElDropdownItem } from 'element-plus'\r\nimport { useLocaleStore } from '@/store/modules/locale'\r\nimport { useLocale } from '@/hooks/web/useLocale'\r\nimport { propTypes } from '@/utils/propTypes'\r\nimport { useDesign } from '@/hooks/web/useDesign'\r\n\r\nconst { getPrefixCls } = useDesign()\r\n\r\nconst prefixCls = getPrefixCls('locale-dropdown')\r\n\r\ndefineProps({\r\n  color: propTypes.string.def('')\r\n})\r\n\r\nconst localeStore = useLocaleStore()\r\n\r\nconst langMap = computed(() => localeStore.getLocaleMap)\r\n\r\nconst currentLang = computed(() => localeStore.getCurrentLocale)\r\n\r\nconst setLang = (lang: LocaleType) => {\r\n  if (lang === unref(currentLang).lang) return\r\n  // 需要重新加载页面让整个语言多初始化\r\n  window.location.reload()\r\n  localeStore.setCurrentLocale({\r\n    lang\r\n  })\r\n  const { changeLocale } = useLocale()\r\n  changeLocale(lang)\r\n}\r\n</script>\r\n\r\n<template>\r\n  <ElDropdown :class=\"prefixCls\" trigger=\"click\" @command=\"setLang\">\r\n    <Icon\r\n      :size=\"18\"\r\n      icon=\"ion:language-sharp\"\r\n      class=\"cursor-pointer !p-0\"\r\n      :class=\"$attrs.class\"\r\n      :color=\"color\"\r\n    />\r\n    <template #dropdown>\r\n      <ElDropdownMenu>\r\n        <ElDropdownItem v-for=\"item in langMap\" :key=\"item.lang\" :command=\"item.lang\">\r\n          {{ item.name }}\r\n        </ElDropdownItem>\r\n      </ElDropdownMenu>\r\n    </template>\r\n  </ElDropdown>\r\n</template>\r\n"],"file":"assets/LocaleDropdown.vue_vue_type_script_setup_true_lang-CH_h7pI9.js"}
{"version":3,"file":"CodeView-CPUzNJte.js","sources":["../../src/views/CodeView/data.ts","../../src/views/CodeView/CodeView.vue"],"sourcesContent":["export const data = [{\r\n   type: 'javaScript',\r\n   activeNames: [],\r\n   list: [\r\n      {\r\n         title: '递归求和',\r\n         code: `  递归求和\r\n      let nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n      function fn(i){\r\n        return i >= nums.length ? 0: nums[i] + fn(i + 1)\r\n      }\r\n    \r\n      console.log(fn(0));\r\n    `\r\n      },\r\n      {\r\n         title: '加法运算法则',\r\n         code: `  加法运算法则\r\n      1. 如果都是原始类型--有字符串直接拼接，没有字符串转为数字相加(含有NaN返回NaN)\r\n      2. 如果是引用类型--调用valueof()--调用toString()--报错\r\n    \r\n      1 + 1 = 2\r\n      '1' + 1 = '11'\r\n      NaN + 1 = NaN\r\n      NaN + '1' = 'NaN1'\r\n      null + 1 = 1\r\n      null + '1' = 'null1'\r\n      [1] + 1 = '11'\r\n      [1,2] + [1] = '1,21'\r\n      [1] + {n: 1} = '1[object Object]'\r\n      null + undefined = 'NaN'\r\n      NaN + '1' = 'NaN1'\r\n    `\r\n      },\r\n      {\r\n         title: '对象属性次序',\r\n         code: `  对象属性次序\r\n      const obj = {\r\n        'a': '1',\r\n        'b': '2',\r\n        1: '3',\r\n        2: '4'\r\n      }\r\n    \r\n      console.log(Object.keys(obj));\r\n    `\r\n      },\r\n      {\r\n         title: '找单身狗',\r\n         code: `  找单身狗\r\n    nums 数组中包含1个或多个正整数\r\n    其他数字都出现两次，只有一个数字只出现1次\r\n    找出只出现1次的数字\r\n    function uniqueNumber(nums){\r\n      let result = 0\r\n      for(let i = 0; i< nums.length; i++){\r\n        result = result ^ nums[i]\r\n      }\r\n    \r\n      return result\r\n    \r\n    }\r\n    `\r\n      },\r\n      {\r\n         title: '属性类型',\r\n         code: `  属性类型\r\n    对象属性类型只能是字符串和symbol\r\n    let a = {};\r\n    b = { key: 'b'};\r\n    c = { key: 'c'};\r\n    a[b] = 123;\r\n    a[c] = 456\r\n    \r\n    console.log(a[b]);\r\n    `\r\n      },\r\n      {\r\n         title: '分时函数',\r\n         code: `\r\n      const chunkArray = (array, process, count) => {\r\n      let obj, t\r\n      let start = function () {\r\n        for (let i = 0; i < Math.min(count, array.length); i++) {\r\n          let obj = array.shift()\r\n          process(obj)\r\n        }\r\n      }\r\n    \r\n      return function () {\r\n        t = setInterval(function () {\r\n          if (array.length === 0) {\r\n            return clearInterval(t)\r\n          }\r\n    \r\n          start()\r\n        }, 200)\r\n      }\r\n    }\r\n    \r\n    // 使用示例\r\n    const largeArray = new Array(10000).fill(null).map((_, index) => index)\r\n    \r\n    chunkArray(\r\n      largeArray,\r\n      (item, index) => {\r\n        console.log(item)\r\n      },\r\n      1000\r\n    )()\r\n        `\r\n      },\r\n      {\r\n         title: '属性类型',\r\n         code: `  属性类型\r\n    对象属性类型只能是字符串和symbol\r\n    let a = {};\r\n    b = { key: 'b'};\r\n    c = { key: 'c'};\r\n    a[b] = 123;\r\n    a[c] = 456\r\n    \r\n    console.log(a[b]);\r\n    `\r\n      },\r\n   ]\r\n}, {\r\n   type: 'html',\r\n   activeNames: [],\r\n   list: [\r\n      {\r\n         title: '递归求和',\r\n         code: `  递归求和\r\n      let nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n      function fn(i){\r\n        return i >= nums.length ? 0: nums[i] + fn(i + 1)\r\n      }\r\n    \r\n      console.log(fn(0));\r\n    `\r\n      },\r\n   ]\r\n}]","<script setup lang=\"ts\">\r\nimport { ref } from 'vue'\r\nimport { ContentWrap } from '@/components/ContentWrap'\r\n\r\nimport { PrismEditor } from 'vue-prism-editor'\r\nimport 'vue-prism-editor/dist/prismeditor.min.css'\r\n\r\nimport { highlight, languages } from 'prismjs/components/prism-core'\r\nimport 'prismjs/components/prism-clike'\r\nimport 'prismjs/components/prism-javascript'\r\nimport 'prismjs/themes/prism-tomorrow.css'\r\nimport { ElCollapse, ElCollapseItem, ElTabPane, ElTabs } from 'element-plus'\r\n\r\nimport {data} from './data'\r\n\r\nconst highlight1 = (code: string) => {\r\n  return highlight(code, languages.js, 'js')\r\n}\r\n\r\nconst activeName = ref('javaScript')\r\n\r\n</script>\r\n\r\n<template>\r\n  <ContentWrap title=\"代码例子\">\r\n   <ElTabs v-model=\"activeName\">\r\n    <ElTabPane v-for=\"item in data\" :key=\"item.type\" :label=\"item.type\" :name=\"item.type\">\r\n      <ElCollapse v-model=\"item.activeNames\">\r\n      <template v-for=\"(datum, index) in item.list\" :key=\"datum\">\r\n        <ElCollapseItem :title=\"index + 1 + '.' + datum.title\" :name=\"index + 1\">\r\n          <PrismEditor\r\n            class=\"my-editor\"\r\n            :readonly=\"true\"\r\n            v-model=\"datum.code\"\r\n            :highlight=\"highlight1\"\r\n            line-numbers\r\n          />\r\n        </ElCollapseItem>\r\n      </template>\r\n    </ElCollapse>\r\n    </ElTabPane>\r\n  </ElTabs>\r\n  </ContentWrap>\r\n</template>\r\n<style scoped>\r\n/* required class */\r\n.my-editor {\r\n  /* we dont use `language-` classes anymore so thats why we need to add background and text color manually */\r\n  background: #2d2d2d;\r\n  color: #ccc;\r\n\r\n  /* you must provide font-family font-size line-height. Example: */\r\n  font-family:\r\n    Fira code,\r\n    Fira Mono,\r\n    Consolas,\r\n    Menlo,\r\n    Courier,\r\n    monospace;\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n  padding: 5px;\r\n}\r\n\r\n/* optional class for removing the outline */\r\n.prism-editor__textarea:focus {\r\n  outline: none;\r\n}\r\n</style>\r\n"],"names":["data","highlight1","code","highlight","languages","activeName","ref"],"mappings":"8XAAO,MAAMA,EAAO,CAAC,CAClB,KAAM,aACN,YAAa,CAAC,EACd,KAAM,CACH,CACG,MAAO,OACP,KAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQT,EACA,CACG,MAAO,SACP,KAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAgBT,EACA,CACG,MAAO,SACP,KAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUT,EACA,CACG,MAAO,OACP,KAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAcT,EACA,CACG,MAAO,OACP,KAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUT,EACA,CACG,MAAO,OACP,KAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAgCT,EACA,CACG,MAAO,OACP,KAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUT,CACH,CACH,EAAG,CACA,KAAM,OACN,YAAa,CAAC,EACd,KAAM,CACH,CACG,MAAO,OACP,KAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQT,CACH,CACH,CAAC,kCC/HK,MAAAC,EAAcC,GACXC,EAAU,UAAAD,EAAME,EAAU,UAAA,GAAI,IAAI,EAGrCC,EAAaC,EAAI,YAAY"}
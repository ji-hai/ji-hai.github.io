{"version":3,"file":"Demo2-BY3pDOCD.js","sources":["../../src/views/CesiumDemo/Demo2.vue"],"sourcesContent":["<script setup lang=\"ts\">\r\nimport { ContentWrap } from '@/components/ContentWrap'\r\nimport CesiumComponent from '@/components/Cesium/Cesium.component.vue'\r\nimport { useCesium } from '@/hooks/web/useCesium'\r\nimport { ElLink } from 'element-plus'\r\nimport * as Cesium from 'cesium'\r\n\r\nimport CesiumGraphics from '@/components/Cesium/CesiumGraphics'\r\nimport Service from '@/axios'\r\n\r\nimport {\r\n  CustomMaterial,\r\n  CustomMaterialWall,\r\n  DynamicWallMaterialProperty,\r\n  PolylineTrailLinkMaterialProperty,\r\n  Spriteline1MaterialProperty,\r\n  LineFlickerMaterialProperty,\r\n  LineFlowMaterialProperty\r\n} from '@/components/Cesium/CesiumMaterialProperty'\r\n\r\nconst { mapRegister, mapMethods } = useCesium()\r\n\r\nconst { getMap } = mapMethods\r\n\r\ndefineOptions({\r\n  name: 'Demo2'\r\n})\r\n\r\n//  实心圆\r\nconst computeCircleFill = (a) => {\r\n  a = Number(a) / 1000\r\n  a = a / 2\r\n  var b = []\r\n  for (var i = 0; i < 360; i++) {\r\n    var c = Cesium.Math.toRadians(i)\r\n    b.push(new Cesium.Cartesian2(a * Math.cos(c), a * Math.sin(c)))\r\n  }\r\n  return b\r\n}\r\n//  空心圆\r\nconst computeCircle = (a) => {\r\n  a = Number(a) / 1000\r\n  a = a / 2\r\n  var startAngle = 0\r\n  var endAngle = 360\r\n  var hd = a / 3\r\n  var b = []\r\n  for (var i = startAngle; i <= endAngle; i++) {\r\n    var c = Cesium.Math.toRadians(i)\r\n    b.push(new Cesium.Cartesian2(a * Math.cos(c), a * Math.sin(c)))\r\n  }\r\n  for (var i = endAngle; i >= startAngle; i--) {\r\n    var radians = Cesium.Math.toRadians(i)\r\n    b.push(new Cesium.Cartesian2((a - hd) * Math.cos(radians), (a - hd) * Math.sin(radians)))\r\n  }\r\n  return b\r\n}\r\n\r\nconst getData = async (type: number = 2) => {\r\n  return await Service.post({\r\n    url: 'http://42.192.73.101:7933/api/sewage/SewageMapScreen/outWellSiteList',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    data: {\r\n      outWellType: type\r\n    },\r\n    params: {\r\n      token: '0263563941e58bfa562f22e1776ffbd6'\r\n    }\r\n  })\r\n}\r\n\r\nconst getNetWorkSiteList = async (type: number = 2) => {\r\n  return await Service.post({\r\n    url: 'http://42.192.73.101:7933/api/sewage/SewageMapScreen/netWorkSiteList',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    data: {\r\n      pipeNetworkType: type\r\n    },\r\n    params: {\r\n      token: '0263563941e58bfa562f22e1776ffbd6'\r\n    }\r\n  })\r\n}\r\n\r\nconst cesiumLoadCB = async (viewer) => {\r\n  viewer.camera.setView({\r\n    destination: Cesium.Cartesian3.fromDegrees(119.858963, 30.801224, 5000.0)\r\n  })\r\n  let cesiumGraphics = new CesiumGraphics(viewer)\r\n  const data = await getData(2) // 雨水窨井\r\n  const data1 = await getData(1) // 污水窨井\r\n  const data2 = await getNetWorkSiteList(2) // 雨水管网\r\n  const data3 = await getNetWorkSiteList(1) // 污水管网\r\n\r\n  data.data.forEach((item) => {\r\n    // 模型\r\n    // cesiumGraphics.createModelGraphics({\r\n    //   position: Cesium.Cartesian3.fromDegrees(Number(item.lon), Number(item.lat), 0),\r\n    //   orientation: Cesium.Transforms.headingPitchRollQuaternion(\r\n    //     Cesium.Cartesian3.fromDegrees(120.84, 30.15, 5000),\r\n    //     new Cesium.HeadingPitchRoll(\r\n    //       Cesium.Math.toRadians(0), // 方向\r\n    //       Cesium.Math.toRadians(0),\r\n    //       Cesium.Math.toRadians(0)\r\n    //     )\r\n    //   ),\r\n    //   model: {\r\n    //     uri: 'src/assets/SampleData/glb/NoLod_0.glb',\r\n    //     minimumPixelSize: 20,\r\n    //     maximumScale: 1000,\r\n    //     scale: 0.05\r\n    //   }\r\n    // })\r\n    viewer.entities.add({\r\n      position: Cesium.Cartesian3.fromDegrees(Number(item.lon), Number(item.lat), 0), // 点的经纬度坐标\r\n      cylinder: {\r\n        length: 10,\r\n        topRadius: 5.0,\r\n        bottomRadius: 5.0,\r\n        material: Cesium.Color.fromCssColorString('#0bbabb'),\r\n        heightReference: Cesium.HeightReference.CLAMP_TO_GROUND,\r\n        outline: false,\r\n        outlineColor: Cesium.Color.WHITE,\r\n        numberOfVerticalLines: 1\r\n        // distanceDisplayCondition: new Cesium.DistanceDisplayCondition(100.0, 2000.0)\r\n      }\r\n    })\r\n  })\r\n\r\n  data1.data.forEach((item) => {\r\n    viewer.entities.add({\r\n      position: Cesium.Cartesian3.fromDegrees(Number(item.lon), Number(item.lat), 0), // 点的经纬度坐标\r\n      cylinder: {\r\n        length: 10,\r\n        topRadius: 5.0,\r\n        bottomRadius: 5.0,\r\n        material: Cesium.Color.fromCssColorString('#af15e3'),\r\n        heightReference: Cesium.HeightReference.CLAMP_TO_GROUND,\r\n        outline: false,\r\n        outlineColor: Cesium.Color.WHITE,\r\n        numberOfVerticalLines: 1\r\n        // distanceDisplayCondition: new Cesium.DistanceDisplayCondition(100.0, 2000.0)\r\n      }\r\n    })\r\n  })\r\n  // 管网数据\r\n  data2.data.forEach((item) => {\r\n    fetch(decodeURIComponent(item.pipeNetworkUrl).replace(new RegExp('&amp;', 'g'), '&'), {\r\n      method: 'get'\r\n    })\r\n      .then((res) => res.json())\r\n      .then((ress) => {\r\n        ress.features.forEach((item) => {\r\n          let positions = []\r\n          item.geometry.coordinates[0].forEach((item) => {\r\n            positions.push(Cesium.Cartesian3.fromDegrees(item[0], item[1], 0))\r\n          })\r\n          viewer.entities.add({\r\n            polylineVolume: {\r\n              positions: positions,\r\n              cornerType: Cesium.CornerType.ROUNDED,\r\n              shape: computeCircle(3000),\r\n              material: new PolylineTrailLinkMaterialProperty(\r\n                2000,\r\n                new Cesium.Color(1, 36, 46),\r\n                new Cesium.Cartesian2(20.0, 1.0),\r\n                'src/assets/image/line15.png'\r\n              ),\r\n              outline: true,\r\n              outlineColor: Cesium.Color.BLUE.withAlpha(0.3),\r\n            }\r\n          })\r\n        })\r\n      })\r\n  })\r\n\r\n  //  透明材质\r\n  // new Cesium.StripeMaterialProperty({\r\n  //   evenColor: Cesium.Color.WHITE.withAlpha(0.5),\r\n  //   oddColor: Cesium.Color.BLUE.withAlpha(0.5),\r\n  //   repeat: 5.0\r\n  // })\r\n  // 管网数据\r\n  data3.data.forEach((item) => {\r\n    fetch(decodeURIComponent(item.pipeNetworkUrl).replace(new RegExp('&amp;', 'g'), '&'), {\r\n      method: 'get'\r\n    })\r\n      .then((res) => res.json())\r\n      .then((ress) => {\r\n        ress.features.forEach((item) => {\r\n          let positions = []\r\n          item.geometry.coordinates[0].forEach((item) => {\r\n            positions.push(Cesium.Cartesian3.fromDegrees(item[0], item[1], 0))\r\n          })\r\n          viewer.entities.add({\r\n            polylineVolume: {\r\n              positions: positions,\r\n              cornerType: Cesium.CornerType.ROUNDED,\r\n              shape: computeCircle(3000),\r\n              material: Cesium.Color.fromCssColorString('#af15e3')\r\n            }\r\n          })\r\n        })\r\n      })\r\n  })\r\n}\r\n</script>\r\n\r\n<template>\r\n  <ContentWrap title=\"和平管网演示\">\r\n    <div class=\"h-[calc(100vh-280px)]\">\r\n      <cesium-component\r\n        @register=\"mapRegister\"\r\n        :config=\"{\r\n          // homeButton: true\r\n        }\"\r\n        tiandituTk=\"80cd3c8ae46ae32fa0ac19f6d739d310\"\r\n        :cesiumLoadCB=\"cesiumLoadCB\"\r\n      />\r\n    </div>\r\n  </ContentWrap>\r\n</template>\r\n"],"names":["mapRegister","mapMethods","useCesium","computeCircle","a","startAngle","endAngle","hd","b","i","c","radians","getData","type","__async","Service","getNetWorkSiteList","cesiumLoadCB","viewer","data","data1","data2","data3","item","res","ress","item2","positions","item3","PolylineTrailLinkMaterialProperty"],"mappings":"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"}
{"version":3,"file":"CesiumNavigation-CQWp0lj0.js","sources":["../../node_modules/.pnpm/cesium-navigation-es6@3.0.8/node_modules/cesium-navigation-es6/dist/core/createFragmentFromTemplate.js","../../node_modules/.pnpm/cesium-navigation-es6@3.0.8/node_modules/cesium-navigation-es6/dist/core/loadView.js","../../node_modules/.pnpm/cesium-navigation-es6@3.0.8/node_modules/cesium-navigation-es6/dist/viewModels/DistanceLegendViewModel.js","../../node_modules/.pnpm/cesium-navigation-es6@3.0.8/node_modules/cesium-navigation-es6/dist/svgPaths/svgReset.js","../../node_modules/.pnpm/cesium-navigation-es6@3.0.8/node_modules/cesium-navigation-es6/dist/viewModels/UserInterfaceControl.js","../../node_modules/.pnpm/cesium-navigation-es6@3.0.8/node_modules/cesium-navigation-es6/dist/viewModels/NavigationControl.js","../../node_modules/.pnpm/cesium-navigation-es6@3.0.8/node_modules/cesium-navigation-es6/dist/viewModels/ResetViewNavigationControl.js","../../node_modules/.pnpm/cesium-navigation-es6@3.0.8/node_modules/cesium-navigation-es6/dist/core/Utils.js","../../node_modules/.pnpm/cesium-navigation-es6@3.0.8/node_modules/cesium-navigation-es6/dist/viewModels/ZoomNavigationControl.js","../../node_modules/.pnpm/cesium-navigation-es6@3.0.8/node_modules/cesium-navigation-es6/dist/svgPaths/svgCompassOuterRing.js","../../node_modules/.pnpm/cesium-navigation-es6@3.0.8/node_modules/cesium-navigation-es6/dist/svgPaths/svgCompassGyro.js","../../node_modules/.pnpm/cesium-navigation-es6@3.0.8/node_modules/cesium-navigation-es6/dist/svgPaths/svgCompassRotationMarker.js","../../node_modules/.pnpm/cesium-navigation-es6@3.0.8/node_modules/cesium-navigation-es6/dist/viewModels/NavigationViewModel.js","../../node_modules/.pnpm/cesium-navigation-es6@3.0.8/node_modules/cesium-navigation-es6/dist/CesiumNavigation.js","../../src/components/Cesium/CesiumNavigation/index.ts","../../src/views/CesiumNavigation/CesiumNavigation.vue"],"sourcesContent":["\r\nconst createFragmentFromTemplate = function (htmlString) {\r\n  var holder = document.createElement('div')\r\n  holder.innerHTML = htmlString\r\n  var fragment = document.createDocumentFragment()\r\n  while (holder.firstChild) {\r\n    fragment.appendChild(holder.firstChild)\r\n  }\r\n\r\n  return fragment\r\n}\r\n\r\nexport default createFragmentFromTemplate\r\n","/* eslint-disable no-unused-vars */\r\nimport { knockout, getElement } from 'cesium'\r\nimport createFragmentFromTemplate from './createFragmentFromTemplate'\r\nvar Knockout = knockout\r\n\r\nvar loadView = function (htmlString, container, viewModel) {\r\n  container = getElement(container)\r\n\r\n  var fragment = createFragmentFromTemplate(htmlString)\r\n\r\n  // Sadly, fragment.childNodes doesn't have a slice function.\r\n  // This code could be replaced with Array.prototype.slice.call(fragment.childNodes)\r\n  // but that seems slightly error prone.\r\n  var nodes = []\r\n\r\n  var i\r\n  for (i = 0; i < fragment.childNodes.length; ++i) {\r\n    nodes.push(fragment.childNodes[i])\r\n  }\r\n\r\n  container.appendChild(fragment)\r\n\r\n  for (i = 0; i < nodes.length; ++i) {\r\n    var node = nodes[i]\r\n    if (node.nodeType === 1 || node.nodeType === 8) {\r\n      Knockout.applyBindings(viewModel, node)\r\n    }\r\n  }\r\n\r\n  return nodes\r\n}\r\n\r\nexport default loadView\r\n","/* eslint-disable no-unused-vars */\r\nimport { defined, DeveloperError, EllipsoidGeodesic, Cartesian2, getTimestamp, EventHelper, knockout } from 'cesium'\r\nimport loadView from '../core/loadView'\r\nvar Knockout = knockout\r\n\r\nvar DistanceLegendViewModel = function (options) {\r\n  if (!defined(options) || !defined(options.terria)) {\r\n    throw new DeveloperError('options.terria is required.')\r\n  }\r\n\r\n  this.terria = options.terria\r\n  this._removeSubscription = undefined\r\n  this._lastLegendUpdate = undefined\r\n  this.eventHelper = new EventHelper()\r\n\r\n  this.distanceLabel = undefined\r\n  this.barWidth = undefined\r\n\r\n  this.enableDistanceLegend = (defined(options.enableDistanceLegend)) ? options.enableDistanceLegend : true\r\n\r\n  Knockout.track(this, ['distanceLabel', 'barWidth'])\r\n\r\n  this.eventHelper.add(this.terria.afterWidgetChanged, function () {\r\n    if (defined(this._removeSubscription)) {\r\n      this._removeSubscription()\r\n      this._removeSubscription = undefined\r\n    }\r\n  }, this)\r\n  //        this.terria.beforeWidgetChanged.addEventListener(function () {\r\n  //            if (defined(this._removeSubscription)) {\r\n  //                this._removeSubscription();\r\n  //                this._removeSubscription = undefined;\r\n  //            }\r\n  //        }, this);\r\n\r\n  var that = this\r\n\r\n  function addUpdateSubscription() {\r\n    if (defined(that.terria)) {\r\n      var scene = that.terria.scene\r\n      that._removeSubscription = scene.postRender.addEventListener(function () {\r\n        updateDistanceLegendCesium(this, scene)\r\n      }, that)\r\n    }\r\n  }\r\n\r\n  addUpdateSubscription()\r\n  this.eventHelper.add(this.terria.afterWidgetChanged, function () {\r\n    addUpdateSubscription()\r\n  }, this)\r\n  // this.terria.afterWidgetChanged.addEventListener(function() {\r\n  //    addUpdateSubscription();\r\n  // }, this);\r\n}\r\n\r\nDistanceLegendViewModel.prototype.destroy = function () {\r\n  this.eventHelper.removeAll()\r\n}\r\n\r\nDistanceLegendViewModel.prototype.show = function (container) {\r\n  var testing\r\n  if (this.enableDistanceLegend) {\r\n    testing = '<div class=\"distance-legend\" data-bind=\"visible: distanceLabel && barWidth\">' +\r\n      '<div class=\"distance-legend-label\" data-bind=\"text: distanceLabel\"></div>' +\r\n      '<div class=\"distance-legend-scale-bar\" data-bind=\"style: { width: barWidth + \\'px\\', left: (5 + (125 - barWidth) / 2) + \\'px\\' }\"></div>' +\r\n      '</div>'\r\n  } else {\r\n    testing = '<div class=\"distance-legend\"  style=\"display: none;\" data-bind=\"visible: distanceLabel && barWidth\">' +\r\n      '<div class=\"distance-legend-label\"  data-bind=\"text: distanceLabel\"></div>' +\r\n      '<div class=\"distance-legend-scale-bar\"  data-bind=\"style: { width: barWidth + \\'px\\', left: (5 + (125 - barWidth) / 2) + \\'px\\' }\"></div>' +\r\n      '</div>'\r\n  }\r\n  loadView(testing, container, this)\r\n  // loadView(distanceLegendTemplate, container, this);\r\n  // loadView(require('fs').readFileSync(__dirname + '/../Views/DistanceLegend.html', 'utf8'), container, this);\r\n}\r\n\r\nDistanceLegendViewModel.create = function (options) {\r\n  var result = new DistanceLegendViewModel(options)\r\n  result.show(options.container)\r\n  return result\r\n}\r\n\r\nvar geodesic = new EllipsoidGeodesic()\r\n\r\nvar distances = [\r\n  1, 2, 3, 5,\r\n  10, 20, 30, 50,\r\n  100, 200, 300, 500,\r\n  1000, 2000, 3000, 5000,\r\n  10000, 20000, 30000, 50000,\r\n  100000, 200000, 300000, 500000,\r\n  1000000, 2000000, 3000000, 5000000,\r\n  10000000, 20000000, 30000000, 50000000]\r\n\r\nfunction updateDistanceLegendCesium(viewModel, scene) {\r\n  if (!viewModel.enableDistanceLegend) {\r\n    viewModel.barWidth = undefined\r\n    viewModel.distanceLabel = undefined\r\n    return\r\n  }\r\n  var now = getTimestamp()\r\n  if (now < viewModel._lastLegendUpdate + 250) {\r\n    return\r\n  }\r\n\r\n  viewModel._lastLegendUpdate = now\r\n\r\n  // Find the distance between two pixels at the bottom center of the screen.\r\n  var width = scene.canvas.clientWidth\r\n  var height = scene.canvas.clientHeight\r\n\r\n  var left = scene.camera.getPickRay(new Cartesian2((width / 2) | 0, height - 1))\r\n  var right = scene.camera.getPickRay(new Cartesian2(1 + (width / 2) | 0, height - 1))\r\n\r\n  var globe = scene.globe\r\n  var leftPosition = globe.pick(left, scene)\r\n  var rightPosition = globe.pick(right, scene)\r\n\r\n  if (!defined(leftPosition) || !defined(rightPosition)) {\r\n    viewModel.barWidth = undefined\r\n    viewModel.distanceLabel = undefined\r\n    return\r\n  }\r\n\r\n  var leftCartographic = globe.ellipsoid.cartesianToCartographic(leftPosition)\r\n  var rightCartographic = globe.ellipsoid.cartesianToCartographic(rightPosition)\r\n\r\n  geodesic.setEndPoints(leftCartographic, rightCartographic)\r\n  var pixelDistance = geodesic.surfaceDistance\r\n\r\n  // Find the first distance that makes the scale bar less than 100 pixels.\r\n  var maxBarWidth = 100\r\n  var distance\r\n  for (var i = distances.length - 1; !defined(distance) && i >= 0; --i) {\r\n    if (distances[i] / pixelDistance < maxBarWidth) {\r\n      distance = distances[i]\r\n    }\r\n  }\r\n\r\n  if (defined(distance)) {\r\n    var label\r\n    if (distance >= 1000) {\r\n      label = (distance / 1000).toString() + ' km'\r\n    } else {\r\n      label = distance.toString() + ' m'\r\n    }\r\n\r\n    viewModel.barWidth = (distance / pixelDistance) | 0\r\n    viewModel.distanceLabel = label\r\n  } else {\r\n    viewModel.barWidth = undefined\r\n    viewModel.distanceLabel = undefined\r\n  }\r\n}\r\n\r\nexport default DistanceLegendViewModel\r\n","var svgReset = 'M 7.5,0 C 3.375,0 0,3.375 0,7.5 0,11.625 3.375,15 7.5,15 c 3.46875,0 6.375,-2.4375 7.21875,-5.625 l -1.96875,0 C 12,11.53125 9.9375,13.125 7.5,13.125 4.40625,13.125 1.875,10.59375 1.875,7.5 1.875,4.40625 4.40625,1.875 7.5,1.875 c 1.59375,0 2.90625,0.65625 3.9375,1.6875 l -3,3 6.5625,0 L 15,0 12.75,2.25 C 11.4375,0.84375 9.5625,0 7.5,0 z'\r\n\r\nexport default svgReset\r\n","import { defined, DeveloperError, knockout } from 'cesium'\r\n\r\nvar Knockout = knockout;\r\n/**\r\n * The view-model for a control in the user interface\r\n *\r\n * @alias UserInterfaceControl\r\n * @constructor\r\n * @abstract\r\n *\r\n * @param {Terria} terria The Terria instance.\r\n */\r\nvar UserInterfaceControl = function (terria) {\r\n  if (!defined(terria)) {\r\n    throw new DeveloperError('terria is required')\r\n  }\r\n\r\n  this._terria = terria\r\n\r\n  /**\r\n   * Gets or sets the name of the control which is set as the controls title.\r\n   * This property is observable.\r\n   * @type {String}\r\n   */\r\n  this.name = 'Unnamed Control'\r\n\r\n  /**\r\n   * Gets or sets the text to be displayed in the UI control.\r\n   * This property is observable.\r\n   * @type {String}\r\n   */\r\n  this.text = undefined\r\n\r\n  /**\r\n   * Gets or sets the svg icon of the control.  This property is observable.\r\n   * @type {Object}\r\n   */\r\n  this.svgIcon = undefined\r\n\r\n  /**\r\n   * Gets or sets the height of the svg icon.  This property is observable.\r\n   * @type {Integer}\r\n   */\r\n  this.svgHeight = undefined\r\n\r\n  /**\r\n   * Gets or sets the width of the svg icon.  This property is observable.\r\n   * @type {Integer}\r\n   */\r\n  this.svgWidth = undefined\r\n\r\n  /**\r\n   * Gets or sets the CSS class of the control. This property is observable.\r\n   * @type {String}\r\n   */\r\n  this.cssClass = undefined\r\n\r\n  /**\r\n   * Gets or sets the property describing whether or not the control is in the active state.\r\n   * This property is observable.\r\n   * @type {Boolean}\r\n   */\r\n  this.isActive = false\r\n\r\n  Knockout.track(this, ['name', 'svgIcon', 'svgHeight', 'svgWidth', 'cssClass', 'isActive'])\r\n}\r\n\r\nObject.defineProperties(UserInterfaceControl.prototype, {\r\n  /**\r\n   * Gets the Terria instance.\r\n   * @memberOf UserInterfaceControl.prototype\r\n   * @type {Terria}\r\n   */\r\n  terria: {\r\n    get: function () {\r\n      return this._terria\r\n    }\r\n  },\r\n  /**\r\n   * Gets a value indicating whether this button has text associated with it.\r\n   * @type {Object}\r\n   */\r\n  hasText: {\r\n    get: function () {\r\n      return defined(this.text) && typeof this.text === 'string'\r\n    }\r\n  }\r\n\r\n})\r\n\r\n/**\r\n * When implemented in a derived class, performs an action when the user clicks\r\n * on this control.\r\n * @abstract\r\n * @protected\r\n */\r\nUserInterfaceControl.prototype.activate = function () {\r\n  throw new DeveloperError('activate must be implemented in the derived class.')\r\n}\r\n\r\nexport default UserInterfaceControl\r\n","import UserInterfaceControl from './UserInterfaceControl'\r\n/**\r\n * The view-model for a control in the navigation control tool bar\r\n *\r\n * @alias NavigationControl\r\n * @constructor\r\n * @abstract\r\n *\r\n * @param {Terria} terria The Terria instance.\r\n */\r\nvar NavigationControl = function (terria) {\r\n  UserInterfaceControl.apply(this, arguments)\r\n}\r\n\r\nNavigationControl.prototype = Object.create(UserInterfaceControl.prototype)\r\n\r\nexport default NavigationControl\r\n","\r\nimport { defined, Camera, Rectangle, Cartographic, Math as CesiumMath } from 'cesium'\r\nimport svgReset from '../svgPaths/svgReset'\r\nimport NavigationControl from './NavigationControl'\r\n\r\n/**\r\n * The model for a zoom in control in the navigation control tool bar\r\n *\r\n * @alias ResetViewNavigationControl\r\n * @constructor\r\n * @abstract\r\n *\r\n * @param {Terria} terria The Terria instance.\r\n */\r\nvar ResetViewNavigationControl = function (terria) {\r\n  NavigationControl.apply(this, arguments)\r\n\r\n  /**\r\n   * Gets or sets the name of the control which is set as the control's title.\r\n   * This property is observable.\r\n   * @type {String}\r\n   */\r\n  this.name = terria.options.resetTooltip ? terria.options.resetTooltip : '重置视图'\r\n  this.navigationLocked = false\r\n\r\n  /**\r\n   * Gets or sets the svg icon of the control.  This property is observable.\r\n   * @type {Object}\r\n   */\r\n  this.svgIcon = terria.options.resetSvg ? \"\" : svgReset\r\n  this.resetSvg = terria.options.resetSvg\r\n  /**\r\n   * Gets or sets the height of the svg icon.  This property is observable.\r\n   * @type {Integer}\r\n   */\r\n  this.svgHeight = 15\r\n\r\n  /**\r\n   * Gets or sets the width of the svg icon.  This property is observable.\r\n   * @type {Integer}\r\n   */\r\n  this.svgWidth = 15\r\n\r\n  /**\r\n   * Gets or sets the CSS class of the control. This property is observable.\r\n   * @type {String}\r\n   */\r\n  this.cssClass = 'navigation-control-icon-reset'\r\n}\r\n\r\nResetViewNavigationControl.prototype = Object.create(NavigationControl.prototype)\r\n\r\nResetViewNavigationControl.prototype.setNavigationLocked = function (locked) {\r\n  this.navigationLocked = locked\r\n}\r\n\r\nResetViewNavigationControl.prototype.resetView = function () {\r\n  // this.terria.analytics.logEvent('navigation', 'click', 'reset');\r\n  if (this.navigationLocked) {\r\n    return\r\n  }\r\n  var scene = this.terria.scene\r\n\r\n  var sscc = scene.screenSpaceCameraController\r\n  if (!sscc.enableInputs) {\r\n    return\r\n  }\r\n\r\n  this.isActive = true\r\n\r\n  var camera = scene.camera\r\n\r\n  if (defined(this.terria.trackedEntity)) {\r\n    // when tracking do not reset to default view but to default view of tracked entity\r\n    var trackedEntity = this.terria.trackedEntity\r\n    this.terria.trackedEntity = undefined\r\n    this.terria.trackedEntity = trackedEntity\r\n  } else {\r\n    // reset to a default position or view defined in the options\r\n    const duration = this.terria.options.duration ? this.terria.options.duration : 3\r\n    if (this.terria.options.defaultResetView) {\r\n      const orientation = this.terria.options.orientation ? this.terria.options.orientation : {\r\n        heading: CesiumMath.toRadians(5.729578)\r\n      }\r\n      if (this.terria.options.defaultResetView && this.terria.options.defaultResetView instanceof Cartographic) {\r\n        camera.flyTo({\r\n          destination: scene.globe.ellipsoid.cartographicToCartesian(this.terria.options.defaultResetView),\r\n          orientation,\r\n          duration\r\n        })\r\n      } else if (this.terria.options.defaultResetView && this.terria.options.defaultResetView instanceof Rectangle) {\r\n        try {\r\n          Rectangle.validate(this.terria.options.defaultResetView)\r\n          camera.flyTo({\r\n            destination: this.terria.options.defaultResetView,\r\n            orientation,\r\n            duration\r\n          })\r\n        } catch (e) {\r\n          console.log('Cesium-navigation/ResetViewNavigationControl:   options.defaultResetView Cesium rectangle is  invalid!')\r\n        }\r\n      }\r\n    } else if (typeof camera.flyHome === 'function') {\r\n      camera.flyHome(1)\r\n    } else {\r\n      camera.flyTo({ destination: Camera.DEFAULT_VIEW_RECTANGLE, duration })\r\n    }\r\n  }\r\n  this.isActive = false\r\n}\r\n\r\n/**\r\n * When implemented in a derived class, performs an action when the user clicks\r\n * on this control\r\n * @abstract\r\n * @protected\r\n */\r\nResetViewNavigationControl.prototype.activate = function () {\r\n  this.resetView()\r\n}\r\n\r\nexport default ResetViewNavigationControl\r\n","/* eslint-disable no-unused-vars */\r\nimport { defined, Ray, Cartesian3, Cartographic, ReferenceFrame, SceneMode } from 'cesium'\r\n\r\nvar Utils = {}\r\n\r\nvar unprojectedScratch = new Cartographic()\r\nvar rayScratch = new Ray()\r\n\r\n/**\r\n * gets the focus point of the camera\r\n * @param {Viewer|Widget} terria The terria\r\n * @param {boolean} inWorldCoordinates true to get the focus in world coordinates, otherwise get it in projection-specific map coordinates, in meters.\r\n * @param {Cartesian3} [result] The object in which the result will be stored.\r\n * @return {Cartesian3} The modified result parameter, a new instance if none was provided or undefined if there is no focus point.\r\n */\r\nUtils.getCameraFocus = function (terria, inWorldCoordinates, result) {\r\n  var scene = terria.scene\r\n  var camera = scene.camera\r\n\r\n  if (scene.mode === SceneMode.MORPHING) {\r\n    return undefined\r\n  }\r\n\r\n  if (!defined(result)) {\r\n    result = new Cartesian3()\r\n  }\r\n\r\n  // TODO bug when tracking: if entity moves the current position should be used and not only the one when starting orbiting/rotating\r\n  // TODO bug when tracking: reset should reset to default view of tracked entity\r\n\r\n  if (defined(terria.trackedEntity)) {\r\n    result = terria.trackedEntity.position.getValue(terria.clock.currentTime, result)\r\n  } else {\r\n    rayScratch.origin = camera.positionWC\r\n    rayScratch.direction = camera.directionWC\r\n    result = scene.globe.pick(rayScratch, scene, result)\r\n  }\r\n\r\n  if (!defined(result)) {\r\n    return undefined\r\n  }\r\n\r\n  if (scene.mode === SceneMode.SCENE2D || scene.mode === SceneMode.COLUMBUS_VIEW) {\r\n    result = camera.worldToCameraCoordinatesPoint(result, result)\r\n\r\n    if (inWorldCoordinates) {\r\n      result = scene.globe.ellipsoid.cartographicToCartesian(scene.mapProjection.unproject(result, unprojectedScratch), result)\r\n    }\r\n  } else {\r\n    if (!inWorldCoordinates) {\r\n      result = camera.worldToCameraCoordinatesPoint(result, result)\r\n    }\r\n  }\r\n\r\n  return result\r\n}\r\nexport default Utils\r\n","import { defined, Ray, IntersectionTests, Cartesian3, SceneMode } from 'cesium'\r\nimport NavigationControl from './NavigationControl'\r\nimport Utils from '../core/Utils'\r\n\r\n/**\r\n * The model for a zoom in control in the navigation control tool bar\r\n *\r\n * @alias ZoomOutNavigationControl\r\n * @constructor\r\n * @abstract\r\n *\r\n * @param {Terria} terria The Terria instance.\r\n * @param {boolean} zoomIn is used for zooming in (true) or out (false)\r\n */\r\nvar ZoomNavigationControl = function (terria, zoomIn) {\r\n  NavigationControl.apply(this, arguments)\r\n\r\n  /**\r\n   * Gets or sets the name of the control which is set as the control's title.\r\n   * This property is observable.\r\n   * @type {String}\r\n   */\r\n  // this.name = 'Zoom ' + (zoomIn ? 'In' : 'Out')\r\n  this.name = zoomIn ? (terria.options.zoomInTooltip ? terria.options.zoomInTooltip : \"放大\") : (terria.options.zoomOutTooltip ? terria.options.zoomOutTooltip : \"缩小\")\r\n\r\n  /**\r\n   * Gets or sets the text to be displayed in the nav control. Controls that\r\n   * have text do not display the svgIcon.\r\n   * This property is observable.\r\n   * @type {String}\r\n   */\r\n  if (zoomIn) {\r\n    if (terria.options.zoomInSvg) {\r\n      this.zoomInSvg = terria.options.zoomInSvg\r\n    } else {\r\n      this.text = '+'\r\n    }\r\n  } else {\r\n    if (terria.options.zoomOutSvg) {\r\n      this.zoomOutSvg = terria.options.zoomOutSvg\r\n    } else {\r\n      this.text = '-'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets or sets the CSS class of the control. This property is observable.\r\n   * @type {String}\r\n   */\r\n  this.cssClass = 'navigation-control-icon-zoom-' + (zoomIn ? 'in' : 'out')\r\n\r\n  this.relativeAmount = 2\r\n\r\n  if (zoomIn) {\r\n    // this ensures that zooming in is the inverse of zooming out and vice versa\r\n    // e.g. the camera position remains when zooming in and out\r\n    this.relativeAmount = 1 / this.relativeAmount\r\n  }\r\n}\r\n\r\nZoomNavigationControl.prototype.relativeAmount = 1\r\n\r\nZoomNavigationControl.prototype = Object.create(NavigationControl.prototype)\r\n\r\n/**\r\n * When implemented in a derived class, performs an action when the user clicks\r\n * on this control\r\n * @abstract\r\n * @protected\r\n */\r\nZoomNavigationControl.prototype.activate = function () {\r\n  this.zoom(this.relativeAmount)\r\n}\r\n\r\nvar cartesian3Scratch = new Cartesian3()\r\n\r\nZoomNavigationControl.prototype.zoom = function (relativeAmount) {\r\n  // this.terria.analytics.logEvent('navigation', 'click', 'zoomIn');\r\n\r\n  this.isActive = true\r\n\r\n  if (defined(this.terria)) {\r\n    var scene = this.terria.scene\r\n\r\n    var sscc = scene.screenSpaceCameraController\r\n    // do not zoom if it is disabled\r\n    if (!sscc.enableInputs || !sscc.enableZoom) {\r\n      return\r\n    }\r\n    // TODO\r\n    //            if(scene.mode == SceneMode.COLUMBUS_VIEW && !sscc.enableTranslate) {\r\n    //                return;\r\n    //            }\r\n\r\n    var camera = scene.camera\r\n    var orientation\r\n\r\n    switch (scene.mode) {\r\n      case SceneMode.MORPHING:\r\n        break\r\n      case SceneMode.SCENE2D:\r\n        camera.zoomIn(camera.positionCartographic.height * (1 - this.relativeAmount))\r\n        break\r\n      default:\r\n        var focus\r\n\r\n        if (defined(this.terria.trackedEntity)) {\r\n          focus = new Cartesian3()\r\n        } else {\r\n          focus = Utils.getCameraFocus(this.terria, false)\r\n        }\r\n\r\n        if (!defined(focus)) {\r\n          // Camera direction is not pointing at the globe, so use the ellipsoid horizon point as\r\n          // the focal point.\r\n          var ray = new Ray(camera.worldToCameraCoordinatesPoint(scene.globe.ellipsoid.cartographicToCartesian(camera.positionCartographic)), camera.directionWC)\r\n          focus = IntersectionTests.grazingAltitudeLocation(ray, scene.globe.ellipsoid)\r\n\r\n          orientation = {\r\n            heading: camera.heading,\r\n            pitch: camera.pitch,\r\n            roll: camera.roll\r\n          }\r\n        } else {\r\n          orientation = {\r\n            direction: camera.direction,\r\n            up: camera.up\r\n          }\r\n        }\r\n\r\n        if (camera.position.z >= 406944828719368.56) {\r\n          //then run behind code will error\r\n          return\r\n        }\r\n\r\n        var direction = Cartesian3.subtract(camera.position, focus, cartesian3Scratch)\r\n        var movementVector = Cartesian3.multiplyByScalar(direction, relativeAmount, direction)\r\n        var endPosition = Cartesian3.add(focus, movementVector, focus)\r\n\r\n        if (defined(this.terria.trackedEntity) || scene.mode === SceneMode.COLUMBUS_VIEW) {\r\n          // sometimes flyTo does not work (jumps to wrong position) so just set the position without any animation\r\n          // do not use flyTo when tracking an entity because during animatiuon the position of the entity may change\r\n          camera.position = endPosition\r\n        } else {\r\n          camera.flyTo({\r\n            destination: endPosition,\r\n            orientation: orientation,\r\n            duration: 0.5,\r\n            convert: false\r\n          })\r\n        }\r\n    }\r\n  }\r\n\r\n  // this.terria.notifyRepaintRequired();\r\n  this.isActive = false\r\n}\r\n\r\nexport default ZoomNavigationControl\r\n","\r\nvar svgCompassOuterRing = 'm 66.5625,0 0,15.15625 3.71875,0 0,-10.40625 5.5,10.40625 4.375,0 0,-15.15625 -3.71875,0 0,10.40625 L 70.9375,0 66.5625,0 z M 72.5,20.21875 c -28.867432,0 -52.28125,23.407738 -52.28125,52.28125 0,28.87351 23.413818,52.3125 52.28125,52.3125 28.86743,0 52.28125,-23.43899 52.28125,-52.3125 0,-28.873512 -23.41382,-52.28125 -52.28125,-52.28125 z m 0,1.75 c 13.842515,0 26.368948,5.558092 35.5,14.5625 l -11.03125,11 0.625,0.625 11.03125,-11 c 8.9199,9.108762 14.4375,21.579143 14.4375,35.34375 0,13.764606 -5.5176,26.22729 -14.4375,35.34375 l -11.03125,-11 -0.625,0.625 11.03125,11 c -9.130866,9.01087 -21.658601,14.59375 -35.5,14.59375 -13.801622,0 -26.321058,-5.53481 -35.4375,-14.5 l 11.125,-11.09375 c 6.277989,6.12179 14.857796,9.90625 24.3125,9.90625 19.241896,0 34.875,-15.629154 34.875,-34.875 0,-19.245847 -15.633104,-34.84375 -34.875,-34.84375 -9.454704,0 -18.034511,3.760884 -24.3125,9.875 L 37.0625,36.4375 C 46.179178,27.478444 58.696991,21.96875 72.5,21.96875 z m -0.875,0.84375 0,13.9375 1.75,0 0,-13.9375 -1.75,0 z M 36.46875,37.0625 47.5625,48.15625 C 41.429794,54.436565 37.65625,63.027539 37.65625,72.5 c 0,9.472461 3.773544,18.055746 9.90625,24.34375 L 36.46875,107.9375 c -8.96721,-9.1247 -14.5,-21.624886 -14.5,-35.4375 0,-13.812615 5.53279,-26.320526 14.5,-35.4375 z M 72.5,39.40625 c 18.297686,0 33.125,14.791695 33.125,33.09375 0,18.302054 -14.827314,33.125 -33.125,33.125 -18.297687,0 -33.09375,-14.822946 -33.09375,-33.125 0,-18.302056 14.796063,-33.09375 33.09375,-33.09375 z M 22.84375,71.625 l 0,1.75 13.96875,0 0,-1.75 -13.96875,0 z m 85.5625,0 0,1.75 14,0 0,-1.75 -14,0 z M 71.75,108.25 l 0,13.9375 1.71875,0 0,-13.9375 -1.71875,0 z'\r\nexport default svgCompassOuterRing\r\n","\r\nvar svgCompassGyro = 'm 72.71875,54.375 c -0.476702,0 -0.908208,0.245402 -1.21875,0.5625 -0.310542,0.317098 -0.551189,0.701933 -0.78125,1.1875 -0.172018,0.363062 -0.319101,0.791709 -0.46875,1.25 -6.91615,1.075544 -12.313231,6.656514 -13,13.625 -0.327516,0.117495 -0.661877,0.244642 -0.9375,0.375 -0.485434,0.22959 -0.901634,0.471239 -1.21875,0.78125 -0.317116,0.310011 -0.5625,0.742111 -0.5625,1.21875 l 0.03125,0 c 0,0.476639 0.245384,0.877489 0.5625,1.1875 0.317116,0.310011 0.702066,0.58291 1.1875,0.8125 0.35554,0.168155 0.771616,0.32165 1.21875,0.46875 1.370803,6.10004 6.420817,10.834127 12.71875,11.8125 0.146999,0.447079 0.30025,0.863113 0.46875,1.21875 0.230061,0.485567 0.470708,0.870402 0.78125,1.1875 0.310542,0.317098 0.742048,0.5625 1.21875,0.5625 0.476702,0 0.876958,-0.245402 1.1875,-0.5625 0.310542,-0.317098 0.582439,-0.701933 0.8125,-1.1875 0.172018,-0.363062 0.319101,-0.791709 0.46875,-1.25 6.249045,-1.017063 11.256351,-5.7184 12.625,-11.78125 0.447134,-0.1471 0.86321,-0.300595 1.21875,-0.46875 0.485434,-0.22959 0.901633,-0.502489 1.21875,-0.8125 0.317117,-0.310011 0.5625,-0.710861 0.5625,-1.1875 l -0.03125,0 c 0,-0.476639 -0.245383,-0.908739 -0.5625,-1.21875 C 89.901633,71.846239 89.516684,71.60459 89.03125,71.375 88.755626,71.244642 88.456123,71.117495 88.125,71 87.439949,64.078341 82.072807,58.503735 75.21875,57.375 c -0.15044,-0.461669 -0.326927,-0.884711 -0.5,-1.25 -0.230061,-0.485567 -0.501958,-0.870402 -0.8125,-1.1875 -0.310542,-0.317098 -0.710798,-0.5625 -1.1875,-0.5625 z m -0.0625,1.40625 c 0.03595,-0.01283 0.05968,0 0.0625,0 0.0056,0 0.04321,-0.02233 0.1875,0.125 0.144288,0.147334 0.34336,0.447188 0.53125,0.84375 0.06385,0.134761 0.123901,0.309578 0.1875,0.46875 -0.320353,-0.01957 -0.643524,-0.0625 -0.96875,-0.0625 -0.289073,0 -0.558569,0.04702 -0.84375,0.0625 C 71.8761,57.059578 71.936151,56.884761 72,56.75 c 0.18789,-0.396562 0.355712,-0.696416 0.5,-0.84375 0.07214,-0.07367 0.120304,-0.112167 0.15625,-0.125 z m 0,2.40625 c 0.448007,0 0.906196,0.05436 1.34375,0.09375 0.177011,0.592256 0.347655,1.271044 0.5,2.03125 0.475097,2.370753 0.807525,5.463852 0.9375,8.9375 -0.906869,-0.02852 -1.834463,-0.0625 -2.78125,-0.0625 -0.92298,0 -1.802327,0.03537 -2.6875,0.0625 0.138529,-3.473648 0.493653,-6.566747 0.96875,-8.9375 0.154684,-0.771878 0.320019,-1.463985 0.5,-2.0625 0.405568,-0.03377 0.804291,-0.0625 1.21875,-0.0625 z m -2.71875,0.28125 c -0.129732,0.498888 -0.259782,0.987558 -0.375,1.5625 -0.498513,2.487595 -0.838088,5.693299 -0.96875,9.25 -3.21363,0.15162 -6.119596,0.480068 -8.40625,0.9375 -0.682394,0.136509 -1.275579,0.279657 -1.84375,0.4375 0.799068,-6.135482 5.504716,-11.036454 11.59375,-12.1875 z M 75.5,58.5 c 6.043169,1.18408 10.705093,6.052712 11.5,12.15625 -0.569435,-0.155806 -1.200273,-0.302525 -1.875,-0.4375 -2.262525,-0.452605 -5.108535,-0.783809 -8.28125,-0.9375 -0.130662,-3.556701 -0.470237,-6.762405 -0.96875,-9.25 C 75.761959,59.467174 75.626981,58.990925 75.5,58.5 z m -2.84375,12.09375 c 0.959338,0 1.895843,0.03282 2.8125,0.0625 C 75.48165,71.267751 75.5,71.871028 75.5,72.5 c 0,1.228616 -0.01449,2.438313 -0.0625,3.59375 -0.897358,0.0284 -1.811972,0.0625 -2.75,0.0625 -0.927373,0 -1.831062,-0.03473 -2.71875,-0.0625 -0.05109,-1.155437 -0.0625,-2.365134 -0.0625,-3.59375 0,-0.628972 0.01741,-1.232249 0.03125,-1.84375 0.895269,-0.02827 1.783025,-0.0625 2.71875,-0.0625 z M 68.5625,70.6875 c -0.01243,0.60601 -0.03125,1.189946 -0.03125,1.8125 0,1.22431 0.01541,2.407837 0.0625,3.5625 -3.125243,-0.150329 -5.92077,-0.471558 -8.09375,-0.90625 -0.784983,-0.157031 -1.511491,-0.316471 -2.125,-0.5 -0.107878,-0.704096 -0.1875,-1.422089 -0.1875,-2.15625 0,-0.115714 0.02849,-0.228688 0.03125,-0.34375 0.643106,-0.20284 1.389577,-0.390377 2.25,-0.5625 2.166953,-0.433487 4.97905,-0.75541 8.09375,-0.90625 z m 8.3125,0.03125 c 3.075121,0.15271 5.824455,0.446046 7.96875,0.875 0.857478,0.171534 1.630962,0.360416 2.28125,0.5625 0.0027,0.114659 0,0.228443 0,0.34375 0,0.735827 -0.07914,1.450633 -0.1875,2.15625 -0.598568,0.180148 -1.29077,0.34562 -2.0625,0.5 -2.158064,0.431708 -4.932088,0.754666 -8.03125,0.90625 0.04709,-1.154663 0.0625,-2.33819 0.0625,-3.5625 0,-0.611824 -0.01924,-1.185379 -0.03125,-1.78125 z M 57.15625,72.5625 c 0.0023,0.572772 0.06082,1.131112 0.125,1.6875 -0.125327,-0.05123 -0.266577,-0.10497 -0.375,-0.15625 -0.396499,-0.187528 -0.665288,-0.387337 -0.8125,-0.53125 -0.147212,-0.143913 -0.15625,-0.182756 -0.15625,-0.1875 0,-0.0047 -0.02221,-0.07484 0.125,-0.21875 0.147212,-0.143913 0.447251,-0.312472 0.84375,-0.5 0.07123,-0.03369 0.171867,-0.06006 0.25,-0.09375 z m 31.03125,0 c 0.08201,0.03503 0.175941,0.05872 0.25,0.09375 0.396499,0.187528 0.665288,0.356087 0.8125,0.5 0.14725,0.14391 0.15625,0.21405 0.15625,0.21875 0,0.0047 -0.009,0.04359 -0.15625,0.1875 -0.147212,0.143913 -0.416001,0.343722 -0.8125,0.53125 -0.09755,0.04613 -0.233314,0.07889 -0.34375,0.125 0.06214,-0.546289 0.09144,-1.094215 0.09375,-1.65625 z m -29.5,3.625 c 0.479308,0.123125 0.983064,0.234089 1.53125,0.34375 2.301781,0.460458 5.229421,0.787224 8.46875,0.9375 0.167006,2.84339 0.46081,5.433176 0.875,7.5 0.115218,0.574942 0.245268,1.063612 0.375,1.5625 -5.463677,-1.028179 -9.833074,-5.091831 -11.25,-10.34375 z m 27.96875,0 C 85.247546,81.408945 80.919274,85.442932 75.5,86.5 c 0.126981,-0.490925 0.261959,-0.967174 0.375,-1.53125 0.41419,-2.066824 0.707994,-4.65661 0.875,-7.5 3.204493,-0.15162 6.088346,-0.480068 8.375,-0.9375 0.548186,-0.109661 1.051942,-0.220625 1.53125,-0.34375 z M 70.0625,77.53125 c 0.865391,0.02589 1.723666,0.03125 2.625,0.03125 0.912062,0 1.782843,-0.0048 2.65625,-0.03125 -0.165173,2.736408 -0.453252,5.207651 -0.84375,7.15625 -0.152345,0.760206 -0.322989,1.438994 -0.5,2.03125 -0.437447,0.03919 -0.895856,0.0625 -1.34375,0.0625 -0.414943,0 -0.812719,-0.02881 -1.21875,-0.0625 -0.177011,-0.592256 -0.347655,-1.271044 -0.5,-2.03125 -0.390498,-1.948599 -0.700644,-4.419842 -0.875,-7.15625 z m 1.75,10.28125 c 0.284911,0.01545 0.554954,0.03125 0.84375,0.03125 0.325029,0 0.648588,-0.01171 0.96875,-0.03125 -0.05999,0.148763 -0.127309,0.31046 -0.1875,0.4375 -0.18789,0.396562 -0.386962,0.696416 -0.53125,0.84375 -0.144288,0.147334 -0.181857,0.125 -0.1875,0.125 -0.0056,0 -0.07446,0.02233 -0.21875,-0.125 C 72.355712,88.946416 72.18789,88.646562 72,88.25 71.939809,88.12296 71.872486,87.961263 71.8125,87.8125 z'\r\n\r\nexport default svgCompassGyro\r\n\r\n","var svgCompassRotationMarker = 'M 72.46875,22.03125 C 59.505873,22.050338 46.521615,27.004287 36.6875,36.875 L 47.84375,47.96875 C 61.521556,34.240041 83.442603,34.227389 97.125,47.90625 l 11.125,-11.125 C 98.401629,26.935424 85.431627,22.012162 72.46875,22.03125 z'\r\nexport default svgCompassRotationMarker\r\n","import { defined, Math as CesiumMath, getTimestamp, EventHelper, Transforms, SceneMode, Cartesian2, Cartesian3, Matrix4, BoundingSphere, HeadingPitchRange, knockout } from 'cesium'\r\nimport loadView from '../core/loadView'\r\nimport ResetViewNavigationControl from './ResetViewNavigationControl'\r\nimport ZoomNavigationControl from './ZoomNavigationControl'\r\nimport svgCompassOuterRing from '../svgPaths/svgCompassOuterRing'\r\nimport svgCompassGyro from '../svgPaths/svgCompassGyro'\r\nimport svgCompassRotationMarker from '../svgPaths/svgCompassRotationMarker'\r\nimport Utils from '../core/Utils'\r\nvar Knockout = knockout;\r\n\r\nvar NavigationViewModel = function (options) {\r\n  this.terria = options.terria\r\n  this.eventHelper = new EventHelper()\r\n  this.enableZoomControls = (defined(options.enableZoomControls)) ? options.enableZoomControls : true\r\n  this.enableCompass = (defined(options.enableCompass)) ? options.enableCompass : true\r\n  this.navigationLocked = false\r\n  this.controls = options.controls\r\n  if (!defined(this.controls)) {\r\n    this.controls = [\r\n      new ZoomNavigationControl(this.terria, true),\r\n      new ResetViewNavigationControl(this.terria),\r\n      new ZoomNavigationControl(this.terria, false)\r\n    ]\r\n  }\r\n\r\n  this.svgCompassOuterRing = svgCompassOuterRing\r\n  this.svgCompassGyro = svgCompassGyro\r\n  this.svgCompassRotationMarker = svgCompassRotationMarker\r\n\r\n  this.showCompass = defined(this.terria) && this.enableCompass\r\n  this.heading = this.showCompass ? this.terria.scene.camera.heading : 0.0\r\n\r\n  this.isOrbiting = false\r\n  this.orbitCursorAngle = 0\r\n  this.orbitCursorOpacity = 0.0\r\n  this.orbitLastTimestamp = 0\r\n  this.orbitFrame = undefined\r\n  this.orbitIsLook = false\r\n  this.orbitMouseMoveFunction = undefined\r\n  this.orbitMouseUpFunction = undefined\r\n\r\n  this.isRotating = false\r\n  this.rotateInitialCursorAngle = undefined\r\n  this.rotateFrame = undefined\r\n  this.rotateIsLook = false\r\n  this.rotateMouseMoveFunction = undefined\r\n  this.rotateMouseUpFunction = undefined\r\n\r\n  this._unsubcribeFromPostRender = undefined\r\n\r\n  Knockout.track(this, ['controls', 'showCompass', 'heading', 'isOrbiting', 'orbitCursorAngle', 'isRotating'])\r\n\r\n  var that = this\r\n\r\n  NavigationViewModel.prototype.setNavigationLocked = function (locked) {\r\n    this.navigationLocked = locked\r\n    if (this.controls && this.controls.length > 1) {\r\n      this.controls[1].setNavigationLocked(this.navigationLocked)\r\n    }\r\n  }\r\n\r\n  function widgetChange() {\r\n    if (defined(that.terria)) {\r\n      if (that._unsubcribeFromPostRender) {\r\n        that._unsubcribeFromPostRender()\r\n        that._unsubcribeFromPostRender = undefined\r\n      }\r\n\r\n      that.showCompass = true && that.enableCompass\r\n\r\n      that._unsubcribeFromPostRender = that.terria.scene.postRender.addEventListener(function () {\r\n        that.heading = that.terria.scene.camera.heading\r\n      })\r\n    } else {\r\n      if (that._unsubcribeFromPostRender) {\r\n        that._unsubcribeFromPostRender()\r\n        that._unsubcribeFromPostRender = undefined\r\n      }\r\n      that.showCompass = false\r\n    }\r\n  }\r\n\r\n  this.eventHelper.add(this.terria.afterWidgetChanged, widgetChange, this)\r\n  // this.terria.afterWidgetChanged.addEventListener(widgetChange);\r\n\r\n  widgetChange()\r\n}\r\n\r\nNavigationViewModel.prototype.destroy = function () {\r\n  this.eventHelper.removeAll()\r\n}\r\n\r\nNavigationViewModel.prototype.show = function (container) {\r\n  const closeStr = '</div>'\r\n  const divCloseStr = '>'\r\n  const hiddenStr = ' style=\"display: none;\"'\r\n  const enableCompassOuterRing = this.terria.options.enableCompassOuterRing !== undefined ? this.terria.options.enableCompassOuterRing : true\r\n\r\n  const compassPre = '<div class=\"compass\"'\r\n  const compassPreAfter = enableCompassOuterRing ? 'title=\"\" data-bind=\"visible: showCompass, event: { mousedown: handleMouseDown,touchstart:handleMouseDown, dblclick: handleDoubleClick }\">' : 'title=\"\" data-bind=\"visible: showCompass\">'\r\n  const compassOuterRingBackground = '<div class=\"compass-outer-ring-background\"></div>'\r\n\r\n  const compassRotationMarkerPre = ' <div class=\"compass-rotation-marker\" data-bind=\"visible: isOrbiting, style: { transform: \\'rotate(-\\' + orbitCursorAngle + \\'rad)\\', \\'-webkit-transform\\': \\'rotate(-\\' + orbitCursorAngle + \\'rad)\\', opacity: orbitCursorOpacity }'\r\n  const compassRotationMarkerDefaultSvg = compassRotationMarkerPre + ', cesiumSvgPath: { path: svgCompassRotationMarker, width: 145, height: 145 }\"' + divCloseStr\r\n  const compassRotationMarkerSelf = compassRotationMarkerPre + '\"' + divCloseStr + this.terria.options.compassRotationMarkerSvg //self define svg\r\n  const compassRotationMarker = (this.terria.options.compassRotationMarkerSvg ? compassRotationMarkerSelf : compassRotationMarkerDefaultSvg) + closeStr\r\n\r\n  const compassOuterRingPre = ' <div class=\"compass-outer-ring\" title=\"\" data-bind=\"style: { transform: \\'rotate(-\\' + heading + \\'rad)\\', \\'-webkit-transform\\': \\'rotate(-\\' + heading + \\'rad)\\' }'\r\n  const compassOuterRingDefaultSvg = compassOuterRingPre + ', cesiumSvgPath: { path: svgCompassOuterRing, width: 145, height: 145 }\"' + divCloseStr\r\n  const compassOuterRingSelf = compassOuterRingPre + '\"' + divCloseStr + this.terria.options.compassOuterRingSvg //self define svg\r\n  const compassOuterRing = (this.terria.options.compassOuterRingSvg ? compassOuterRingSelf : compassOuterRingDefaultSvg) + closeStr\r\n\r\n\r\n  const compassGyroBackground = ' <div class=\"compass-gyro-background\"></div>'\r\n  const compassGyroPre = ' <div class=\"compass-gyro\" data-bind=\"css: { \\'compass-gyro-active\\': isOrbiting }'\r\n  const compassGyroDefaultSvg = compassGyroPre + ',cesiumSvgPath: { path: svgCompassGyro, width: 145, height: 145 } \"' + divCloseStr\r\n  const compassGyroSelf = compassGyroPre + '\"' + divCloseStr + this.terria.options.compassGyroSvg\r\n  const compassGyro = (this.terria.options.compassGyroSvg ? compassGyroSelf : compassGyroDefaultSvg) + closeStr\r\n\r\n  const compassDivPublicStr = compassPreAfter +\r\n    compassOuterRingBackground +\r\n    compassRotationMarker +\r\n    compassOuterRing +\r\n    compassGyroBackground +\r\n    compassGyro +\r\n    closeStr\r\n  const compassDivStr = compassPre + compassDivPublicStr\r\n  const compassDivHiddenStr = compassPre + hiddenStr + compassDivPublicStr\r\n\r\n  const navigationControlsPre = '<div class=\"navigation-controls\"'\r\n  const resetSvg = this.terria.options.resetSvg\r\n  const zoomInSvg = this.terria.options.zoomInSvg\r\n  const zoomOutSvg = this.terria.options.zoomOutSvg\r\n\r\n\r\n  const navigationControlsDivPublicStr = divCloseStr + '<!-- ko foreach: controls -->' +\r\n    '<div data-bind=\"click: activate, attr: { title: $data.name }, css: $root.isLastControl($data) ? \\'navigation-control-last\\' : \\'navigation-control\\' \">' +\r\n    '   <!-- ko if: $data.hasText -->' +\r\n    '   <div data-bind=\"text: $data.text, css: $data.isActive ?  \\'navigation-control-icon-active \\' + $data.cssClass : $data.cssClass\"></div>' +\r\n    '   <!-- /ko -->' +\r\n    '  <!-- ko ifnot: $data.hasText -->' +\r\n    '  <!-- ko if: $data.svgIcon -->' +\r\n    '  <div data-bind=\"cesiumSvgPath: { path: $data.svgIcon, width: $data.svgWidth, height: $data.svgHeight }, css: $data.isActive ?  \\'navigation-control-icon-active \\' + $data.cssClass : $data.cssClass\"></div>' +\r\n    '  <!-- /ko -->' +\r\n    '  <!-- ko ifnot: $data.svgIcon -->' +\r\n\r\n    '  <!-- ko if: $data.resetSvg -->' +\r\n    '  <div class=\"navigation-control-icon-svg\">' + resetSvg + '</div>' +\r\n    '  <!-- /ko -->' +\r\n\r\n    '  <!-- ko ifnot: $data.resetSvg -->' +\r\n    '  <!-- ko if: $data.zoomInSvg -->' +\r\n    '  <div class=\"navigation-control-icon-svg\">' + zoomInSvg + '</div>' +\r\n    '  <!-- /ko -->' +\r\n\r\n    '  <!-- ko ifnot: $data.zoomInSvg -->' +\r\n    '  <!-- ko if: $data.zoomOutSvg -->' +\r\n    '  <div class=\"navigation-control-icon-svg\">' + zoomOutSvg + '</div>' +\r\n    '  <!-- /ko -->' +\r\n    '  <!-- /ko -->' +\r\n    '  <!-- /ko -->' +\r\n\r\n    '  <!-- /ko -->' +\r\n    '  <!-- /ko -->' +\r\n    ' </div>' +\r\n    ' <!-- /ko -->' +\r\n    closeStr\r\n\r\n  const navigationControlsDivStr = navigationControlsPre + navigationControlsDivPublicStr\r\n  const navigationControlsDivHiddenStr = navigationControlsPre + hiddenStr + divCloseStr + navigationControlsDivPublicStr\r\n\r\n  const testing = (this.enableCompass ? compassDivStr : compassDivHiddenStr) + (this.enableZoomControls ? navigationControlsDivStr : navigationControlsDivHiddenStr)\r\n  loadView(testing, container, this)\r\n}\r\n\r\n/**\r\n * Adds a control to this toolbar.\r\n * @param {NavControl} control The control to add.\r\n */\r\nNavigationViewModel.prototype.add = function (control) {\r\n  this.controls.push(control)\r\n}\r\n\r\n/**\r\n * Removes a control from this toolbar.\r\n * @param {NavControl} control The control to remove.\r\n */\r\nNavigationViewModel.prototype.remove = function (control) {\r\n  this.controls.remove(control)\r\n}\r\n\r\n/**\r\n * Checks if the control given is the last control in the control array.\r\n * @param {NavControl} control The control to remove.\r\n */\r\nNavigationViewModel.prototype.isLastControl = function (control) {\r\n  return (control === this.controls[this.controls.length - 1])\r\n}\r\n\r\nvar vectorScratch = new Cartesian2()\r\n\r\nconst getClientXY = (e) => {\r\n  let temp;\r\n  if (e.touches) {\r\n    temp = e.touches[0];\r\n  } else {\r\n    temp = e;\r\n  }\r\n  const { clientX, clientY } = temp;\r\n  return { clientX, clientY }\r\n}\r\n\r\nNavigationViewModel.prototype.handleMouseDown = function (viewModel, e) {\r\n  const { clientX, clientY } = getClientXY(e)\r\n  var scene = this.terria.scene\r\n  if (scene.mode === SceneMode.MORPHING) {\r\n    return true\r\n  }\r\n  if (viewModel.navigationLocked) {\r\n    return true\r\n  }\r\n\r\n  var compassElement = e.currentTarget\r\n  var compassRectangle = e.currentTarget.getBoundingClientRect()\r\n  var maxDistance = compassRectangle.width / 2.0\r\n  var center = new Cartesian2((compassRectangle.right - compassRectangle.left) / 2.0, (compassRectangle.bottom - compassRectangle.top) / 2.0)\r\n  var clickLocation = new Cartesian2(clientX - compassRectangle.left, clientY - compassRectangle.top)\r\n  var vector = Cartesian2.subtract(clickLocation, center, vectorScratch)\r\n  var distanceFromCenter = Cartesian2.magnitude(vector)\r\n\r\n  var distanceFraction = distanceFromCenter / maxDistance\r\n\r\n  var nominalTotalRadius = 145\r\n  var norminalGyroRadius = 50\r\n\r\n  if (distanceFraction < norminalGyroRadius / nominalTotalRadius) {\r\n    orbit(this, compassElement, vector)\r\n    //            return false;\r\n  } else if (distanceFraction < 1.0) {\r\n    rotate(this, compassElement, vector)\r\n    //            return false;\r\n  } else {\r\n    return true\r\n  }\r\n}\r\n\r\nvar oldTransformScratch = new Matrix4()\r\nvar newTransformScratch = new Matrix4()\r\nvar centerScratch = new Cartesian3()\r\n\r\nNavigationViewModel.prototype.handleDoubleClick = function (viewModel, e) {\r\n  var scene = viewModel.terria.scene\r\n  var camera = scene.camera\r\n\r\n  var sscc = scene.screenSpaceCameraController\r\n\r\n  if (scene.mode === SceneMode.MORPHING || !sscc.enableInputs) {\r\n    return true\r\n  }\r\n  if (viewModel.navigationLocked) {\r\n    return true\r\n  }\r\n  if (scene.mode === SceneMode.COLUMBUS_VIEW && !sscc.enableTranslate) {\r\n    return\r\n  }\r\n  if (scene.mode === SceneMode.SCENE3D || scene.mode === SceneMode.COLUMBUS_VIEW) {\r\n    if (!sscc.enableLook) {\r\n      return\r\n    }\r\n\r\n    if (scene.mode === SceneMode.SCENE3D) {\r\n      if (!sscc.enableRotate) {\r\n        return\r\n      }\r\n    }\r\n  }\r\n\r\n  var center = Utils.getCameraFocus(viewModel.terria, true, centerScratch)\r\n\r\n  if (!defined(center)) {\r\n    // Globe is barely visible, so reset to home view.\r\n\r\n    this.controls[1].resetView()\r\n    return\r\n  }\r\n\r\n  var cameraPosition = scene.globe.ellipsoid.cartographicToCartesian(camera.positionCartographic, new Cartesian3())\r\n\r\n  var surfaceNormal = scene.globe.ellipsoid.geodeticSurfaceNormal(center)\r\n\r\n  var focusBoundingSphere = new BoundingSphere(center, 0)\r\n\r\n  camera.flyToBoundingSphere(focusBoundingSphere, {\r\n    offset: new HeadingPitchRange(0,\r\n      // do not use camera.pitch since the pitch at the center/target is required\r\n      CesiumMath.PI_OVER_TWO - Cartesian3.angleBetween(\r\n        surfaceNormal,\r\n        camera.directionWC\r\n      ),\r\n      // distanceToBoundingSphere returns wrong values when in 2D or Columbus view so do not use\r\n      // camera.distanceToBoundingSphere(focusBoundingSphere)\r\n      // instead calculate distance manually\r\n      Cartesian3.distance(cameraPosition, center)\r\n    ),\r\n    duration: 1.5\r\n  })\r\n}\r\n\r\nNavigationViewModel.create = function (options) {\r\n  var result = new NavigationViewModel(options)\r\n  result.show(options.container)\r\n  return result\r\n}\r\nconst addOrbitEventListener = (viewModel) => {\r\n  document.addEventListener('mousemove', viewModel.orbitMouseMoveFunction, false)\r\n  document.addEventListener('touchmove', viewModel.orbitMouseMoveFunction, false)\r\n\r\n  document.addEventListener('mouseup', viewModel.orbitMouseUpFunction, false)\r\n  document.addEventListener('touchend', viewModel.orbitMouseUpFunction, false)\r\n}\r\nconst addRotateEventListener = (viewModel) => {\r\n  document.addEventListener('mousemove', viewModel.rotateMouseMoveFunction, false)\r\n  document.addEventListener('touchmove', viewModel.rotateMouseMoveFunction, false)\r\n\r\n  document.addEventListener('mouseup', viewModel.rotateMouseUpFunction, false)\r\n  document.addEventListener('touchend', viewModel.rotateMouseUpFunction, false)\r\n}\r\n\r\nconst removeOrbitEventListener = (viewModel) => {\r\n  document.removeEventListener('mousemove', viewModel.orbitMouseMoveFunction, false)\r\n  document.removeEventListener('touchmove', viewModel.orbitMouseMoveFunction, false)\r\n\r\n  document.removeEventListener('mouseup', viewModel.orbitMouseUpFunction, false)\r\n  document.removeEventListener('touchend', viewModel.orbitMouseUpFunction, false)\r\n}\r\nconst removeRotateEventListener = (viewModel) => {\r\n  document.removeEventListener('mousemove', viewModel.rotateMouseMoveFunction, false)\r\n  document.removeEventListener('touchmove', viewModel.rotateMouseMoveFunction, false)\r\n\r\n  document.removeEventListener('mouseup', viewModel.rotateMouseUpFunction, false)\r\n  document.removeEventListener('touchend', viewModel.rotateMouseUpFunction, false)\r\n}\r\nfunction orbit(viewModel, compassElement, cursorVector) {\r\n  var scene = viewModel.terria.scene\r\n\r\n  var sscc = scene.screenSpaceCameraController\r\n\r\n  // do not orbit if it is disabled\r\n  if (scene.mode === SceneMode.MORPHING || !sscc.enableInputs) {\r\n    return\r\n  }\r\n  if (viewModel.navigationLocked) {\r\n    return true\r\n  }\r\n\r\n  switch (scene.mode) {\r\n    case SceneMode.COLUMBUS_VIEW:\r\n      if (sscc.enableLook) {\r\n        break\r\n      }\r\n\r\n      if (!sscc.enableTranslate || !sscc.enableTilt) {\r\n        return\r\n      }\r\n      break\r\n    case SceneMode.SCENE3D:\r\n      if (sscc.enableLook) {\r\n        break\r\n      }\r\n\r\n      if (!sscc.enableTilt || !sscc.enableRotate) {\r\n        return\r\n      }\r\n      break\r\n    case SceneMode.SCENE2D:\r\n      if (!sscc.enableTranslate) {\r\n        return\r\n      }\r\n      break\r\n  }\r\n\r\n  // Remove existing event handlers, if any.\r\n  removeOrbitEventListener(viewModel)\r\n\r\n  if (defined(viewModel.orbitTickFunction)) {\r\n    viewModel.terria.clock.onTick.removeEventListener(viewModel.orbitTickFunction)\r\n  }\r\n\r\n  viewModel.orbitMouseMoveFunction = undefined\r\n  viewModel.orbitMouseUpFunction = undefined\r\n  viewModel.orbitTickFunction = undefined\r\n\r\n  viewModel.isOrbiting = true\r\n  viewModel.orbitLastTimestamp = getTimestamp()\r\n\r\n  var camera = scene.camera\r\n\r\n  if (defined(viewModel.terria.trackedEntity)) {\r\n    // when tracking an entity simply use that reference frame\r\n    viewModel.orbitFrame = undefined\r\n    viewModel.orbitIsLook = false\r\n  } else {\r\n    var center = Utils.getCameraFocus(viewModel.terria, true, centerScratch)\r\n\r\n    if (!defined(center)) {\r\n      viewModel.orbitFrame = Transforms.eastNorthUpToFixedFrame(camera.positionWC, scene.globe.ellipsoid, newTransformScratch)\r\n      viewModel.orbitIsLook = true\r\n    } else {\r\n      viewModel.orbitFrame = Transforms.eastNorthUpToFixedFrame(center, scene.globe.ellipsoid, newTransformScratch)\r\n      viewModel.orbitIsLook = false\r\n    }\r\n  }\r\n\r\n  viewModel.orbitTickFunction = function (e) {\r\n    var timestamp = getTimestamp()\r\n    var deltaT = timestamp - viewModel.orbitLastTimestamp\r\n    var rate = (viewModel.orbitCursorOpacity - 0.5) * 2.5 / 1000\r\n    var distance = deltaT * rate\r\n\r\n    var angle = viewModel.orbitCursorAngle + CesiumMath.PI_OVER_TWO\r\n    var x = Math.cos(angle) * distance\r\n    var y = Math.sin(angle) * distance\r\n\r\n    var oldTransform\r\n\r\n    if (viewModel.navigationLocked) {\r\n      return true\r\n    }\r\n\r\n    if (defined(viewModel.orbitFrame)) {\r\n      oldTransform = Matrix4.clone(camera.transform, oldTransformScratch)\r\n\r\n      camera.lookAtTransform(viewModel.orbitFrame)\r\n    }\r\n\r\n    // do not look up/down or rotate in 2D mode\r\n    if (scene.mode === SceneMode.SCENE2D) {\r\n      camera.move(new Cartesian3(x, y, 0), Math.max(scene.canvas.clientWidth, scene.canvas.clientHeight) / 100 * camera.positionCartographic.height * distance)\r\n    } else {\r\n      if (viewModel.orbitIsLook) {\r\n        camera.look(Cartesian3.UNIT_Z, -x)\r\n        camera.look(camera.right, -y)\r\n      } else {\r\n        camera.rotateLeft(x)\r\n        camera.rotateUp(y)\r\n      }\r\n    }\r\n\r\n    if (defined(viewModel.orbitFrame)) {\r\n      camera.lookAtTransform(oldTransform)\r\n    }\r\n\r\n    // viewModel.terria.cesium.notifyRepaintRequired();\r\n\r\n    viewModel.orbitLastTimestamp = timestamp\r\n  }\r\n\r\n  function updateAngleAndOpacity(vector, compassWidth) {\r\n    var angle = Math.atan2(-vector.y, vector.x)\r\n    viewModel.orbitCursorAngle = CesiumMath.zeroToTwoPi(angle - CesiumMath.PI_OVER_TWO)\r\n\r\n    var distance = Cartesian2.magnitude(vector)\r\n    var maxDistance = compassWidth / 2.0\r\n    var distanceFraction = Math.min(distance / maxDistance, 1.0)\r\n    var easedOpacity = 0.5 * distanceFraction * distanceFraction + 0.5\r\n    viewModel.orbitCursorOpacity = easedOpacity\r\n\r\n    // viewModel.terria.cesium.notifyRepaintRequired();\r\n  }\r\n\r\n  viewModel.orbitMouseMoveFunction = function (e) {\r\n    const { clientX, clientY } = getClientXY(e)\r\n    var compassRectangle = compassElement.getBoundingClientRect()\r\n    var center = new Cartesian2((compassRectangle.right - compassRectangle.left) / 2.0, (compassRectangle.bottom - compassRectangle.top) / 2.0)\r\n    var clickLocation = new Cartesian2(clientX - compassRectangle.left, clientY - compassRectangle.top)\r\n    var vector = Cartesian2.subtract(clickLocation, center, vectorScratch)\r\n    updateAngleAndOpacity(vector, compassRectangle.width)\r\n  }\r\n\r\n  viewModel.orbitMouseUpFunction = function (e) {\r\n    // TODO: if mouse didn't move, reset view to looking down, north is up?\r\n\r\n    viewModel.isOrbiting = false\r\n    removeOrbitEventListener(viewModel)\r\n    if (defined(viewModel.orbitTickFunction)) {\r\n      viewModel.terria.clock.onTick.removeEventListener(viewModel.orbitTickFunction)\r\n    }\r\n\r\n    viewModel.orbitMouseMoveFunction = undefined\r\n    viewModel.orbitMouseUpFunction = undefined\r\n    viewModel.orbitTickFunction = undefined\r\n  }\r\n\r\n  addOrbitEventListener(viewModel)\r\n  viewModel.terria.clock.onTick.addEventListener(viewModel.orbitTickFunction)\r\n\r\n  updateAngleAndOpacity(cursorVector, compassElement.getBoundingClientRect().width)\r\n}\r\n\r\nfunction rotate(viewModel, compassElement, cursorVector) {\r\n  var scene = viewModel.terria.scene\r\n  var camera = scene.camera\r\n\r\n  var sscc = scene.screenSpaceCameraController\r\n  // do not rotate in 2D mode or if rotating is disabled\r\n  if (scene.mode === SceneMode.MORPHING || scene.mode === SceneMode.SCENE2D || !sscc.enableInputs) {\r\n    return\r\n  }\r\n  if (viewModel.navigationLocked) {\r\n    return true\r\n  }\r\n\r\n  if (!sscc.enableLook && (scene.mode === SceneMode.COLUMBUS_VIEW || (scene.mode === SceneMode.SCENE3D && !sscc.enableRotate))) {\r\n    return\r\n  }\r\n\r\n  // Remove existing event handlers, if any.\r\n  removeRotateEventListener(viewModel)\r\n  viewModel.rotateMouseMoveFunction = undefined\r\n  viewModel.rotateMouseUpFunction = undefined\r\n\r\n  viewModel.isRotating = true\r\n  viewModel.rotateInitialCursorAngle = Math.atan2(-cursorVector.y, cursorVector.x)\r\n\r\n  if (defined(viewModel.terria.trackedEntity)) {\r\n    // when tracking an entity simply use that reference frame\r\n    viewModel.rotateFrame = undefined\r\n    viewModel.rotateIsLook = false\r\n  } else {\r\n    var viewCenter = Utils.getCameraFocus(viewModel.terria, true, centerScratch)\r\n\r\n    if (!defined(viewCenter) || (scene.mode === SceneMode.COLUMBUS_VIEW && !sscc.enableLook && !sscc.enableTranslate)) {\r\n      viewModel.rotateFrame = Transforms.eastNorthUpToFixedFrame(camera.positionWC, scene.globe.ellipsoid, newTransformScratch)\r\n      viewModel.rotateIsLook = true\r\n    } else {\r\n      viewModel.rotateFrame = Transforms.eastNorthUpToFixedFrame(viewCenter, scene.globe.ellipsoid, newTransformScratch)\r\n      viewModel.rotateIsLook = false\r\n    }\r\n  }\r\n\r\n  var oldTransform\r\n  if (defined(viewModel.rotateFrame)) {\r\n    oldTransform = Matrix4.clone(camera.transform, oldTransformScratch)\r\n    camera.lookAtTransform(viewModel.rotateFrame)\r\n  }\r\n\r\n  viewModel.rotateInitialCameraAngle = -camera.heading\r\n\r\n  if (defined(viewModel.rotateFrame)) {\r\n    camera.lookAtTransform(oldTransform)\r\n  }\r\n\r\n  viewModel.rotateMouseMoveFunction = function (e) {\r\n    const { clientX, clientY } = getClientXY(e)\r\n    var compassRectangle = compassElement.getBoundingClientRect()\r\n    var center = new Cartesian2((compassRectangle.right - compassRectangle.left) / 2.0, (compassRectangle.bottom - compassRectangle.top) / 2.0)\r\n    var clickLocation = new Cartesian2(clientX - compassRectangle.left, clientY - compassRectangle.top)\r\n    var vector = Cartesian2.subtract(clickLocation, center, vectorScratch)\r\n    var angle = Math.atan2(-vector.y, vector.x)\r\n\r\n    var angleDifference = angle - viewModel.rotateInitialCursorAngle\r\n    var newCameraAngle = CesiumMath.zeroToTwoPi(viewModel.rotateInitialCameraAngle - angleDifference)\r\n\r\n    var camera = viewModel.terria.scene.camera\r\n\r\n    var oldTransform\r\n    if (defined(viewModel.rotateFrame)) {\r\n      oldTransform = Matrix4.clone(camera.transform, oldTransformScratch)\r\n      camera.lookAtTransform(viewModel.rotateFrame)\r\n    }\r\n\r\n    var currentCameraAngle = -camera.heading\r\n    camera.rotateRight(newCameraAngle - currentCameraAngle)\r\n\r\n    if (defined(viewModel.rotateFrame)) {\r\n      camera.lookAtTransform(oldTransform)\r\n    }\r\n\r\n    // viewModel.terria.cesium.notifyRepaintRequired();\r\n  }\r\n\r\n  viewModel.rotateMouseUpFunction = function (e) {\r\n    viewModel.isRotating = false\r\n    removeRotateEventListener(viewModel)\r\n    viewModel.rotateMouseMoveFunction = undefined\r\n    viewModel.rotateMouseUpFunction = undefined\r\n  }\r\n\r\n  addRotateEventListener(viewModel)\r\n}\r\n\r\nexport default NavigationViewModel\r\n","import \"./styles/cesium-navigation.css\"\r\nimport { defined, Event, DeveloperError } from 'cesium'\r\nimport DistanceLegendViewModel from './viewModels/DistanceLegendViewModel'\r\nimport NavigationViewModel from './viewModels/NavigationViewModel'\r\n\r\n\r\nvar CesiumEvent = Event\r\n\r\n/**\r\n * @alias CesiumNavigation\r\n * @constructor\r\n *\r\n * @param {Viewer|CesiumWidget} viewerCesiumWidget The Viewer or CesiumWidget instance\r\n */\r\nvar CesiumNavigation = function (viewerCesiumWidget) {\r\n  initialize.apply(this, arguments)\r\n\r\n  this._onDestroyListeners = []\r\n}\r\n\r\nCesiumNavigation.prototype.distanceLegendViewModel = undefined\r\nCesiumNavigation.prototype.navigationViewModel = undefined\r\nCesiumNavigation.prototype.navigationDiv = undefined\r\nCesiumNavigation.prototype.distanceLegendDiv = undefined\r\nCesiumNavigation.prototype.terria = undefined\r\nCesiumNavigation.prototype.container = undefined\r\nCesiumNavigation.prototype._onDestroyListeners = undefined\r\nCesiumNavigation.prototype._navigationLocked = false\r\n\r\nCesiumNavigation.prototype.setNavigationLocked = function (locked) {\r\n  this._navigationLocked = locked\r\n  this.navigationViewModel.setNavigationLocked(this._navigationLocked)\r\n}\r\n\r\nCesiumNavigation.prototype.getNavigationLocked = function () {\r\n  return this._navigationLocked\r\n}\r\n\r\nCesiumNavigation.prototype.destroy = function () {\r\n  if (defined(this.navigationViewModel)) {\r\n    this.navigationViewModel.destroy()\r\n  }\r\n  if (defined(this.distanceLegendViewModel)) {\r\n    this.distanceLegendViewModel.destroy()\r\n  }\r\n\r\n  if (defined(this.navigationDiv)) {\r\n    this.navigationDiv.parentNode.removeChild(this.navigationDiv)\r\n  }\r\n  delete this.navigationDiv\r\n\r\n  if (defined(this.distanceLegendDiv)) {\r\n    this.distanceLegendDiv.parentNode.removeChild(this.distanceLegendDiv)\r\n  }\r\n  delete this.distanceLegendDiv\r\n\r\n  if (defined(this.container)) {\r\n    this.container.parentNode.removeChild(this.container)\r\n  }\r\n  delete this.container\r\n\r\n  for (var i = 0; i < this._onDestroyListeners.length; i++) {\r\n    this._onDestroyListeners[i]()\r\n  }\r\n}\r\n\r\nCesiumNavigation.prototype.addOnDestroyListener = function (callback) {\r\n  if (typeof callback === 'function') {\r\n    this._onDestroyListeners.push(callback)\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Viewer|CesiumWidget} viewerCesiumWidget The Viewer or CesiumWidget instance\r\n * @param options\r\n */\r\nfunction initialize(viewerCesiumWidget, options) {\r\n  if (!defined(viewerCesiumWidget)) {\r\n    throw new DeveloperError('CesiumWidget or Viewer is required.')\r\n  }\r\n\r\n  var cesiumWidget = defined(viewerCesiumWidget.cesiumWidget) ? viewerCesiumWidget.cesiumWidget : viewerCesiumWidget\r\n\r\n  var container = document.createElement('div')\r\n  container.className = 'cesium-widget-cesiumNavigationContainer'\r\n  cesiumWidget.container.appendChild(container)\r\n  this.terria = viewerCesiumWidget\r\n  this.terria.options = (defined(options)) ? options : {}\r\n  this.terria.afterWidgetChanged = new CesiumEvent()\r\n  this.terria.beforeWidgetChanged = new CesiumEvent()\r\n  this.container = container\r\n\r\n  if (!defined(this.terria.options.enableDistanceLegend) || this.terria.options.enableDistanceLegend) {\r\n    this.distanceLegendDiv = document.createElement('div')\r\n    container.appendChild(this.distanceLegendDiv)\r\n    this.distanceLegendDiv.setAttribute('id', 'distanceLegendDiv')\r\n    this.distanceLegendViewModel = DistanceLegendViewModel.create({\r\n      container: this.distanceLegendDiv,\r\n      terria: this.terria,\r\n      mapElement: container,\r\n      enableDistanceLegend: true\r\n    })\r\n  }\r\n\r\n  if ((!defined(this.terria.options.enableZoomControls) || this.terria.options.enableZoomControls) && (!defined(this.terria.options.enableCompass) || this.terria.options.enableCompass)) {\r\n    this.navigationDiv = document.createElement('div')\r\n    this.navigationDiv.setAttribute('id', 'navigationDiv')\r\n    container.appendChild(this.navigationDiv)\r\n    // Create the navigation controls.\r\n    this.navigationViewModel = NavigationViewModel.create({\r\n      container: this.navigationDiv,\r\n      terria: this.terria,\r\n      enableZoomControls: true,\r\n      enableCompass: true\r\n    })\r\n  } else if ((defined(this.terria.options.enableZoomControls) && !this.terria.options.enableZoomControls) && (!defined(this.terria.options.enableCompass) || this.terria.options.enableCompass)) {\r\n    this.navigationDiv = document.createElement('div')\r\n    this.navigationDiv.setAttribute('id', 'navigationDiv')\r\n    container.appendChild(this.navigationDiv)\r\n    // Create the navigation controls.\r\n    this.navigationViewModel = NavigationViewModel.create({\r\n      container: this.navigationDiv,\r\n      terria: this.terria,\r\n      enableZoomControls: false,\r\n      enableCompass: true\r\n    })\r\n  } else if ((!defined(this.terria.options.enableZoomControls) || this.terria.options.enableZoomControls) && (defined(this.terria.options.enableCompass) && !this.terria.options.enableCompass)) {\r\n    this.navigationDiv = document.createElement('div')\r\n    this.navigationDiv.setAttribute('id', 'navigationDiv')\r\n    container.appendChild(this.navigationDiv)\r\n    // Create the navigation controls.\r\n    this.navigationViewModel = NavigationViewModel.create({\r\n      container: this.navigationDiv,\r\n      terria: this.terria,\r\n      enableZoomControls: true,\r\n      enableCompass: false\r\n    })\r\n  } else if ((defined(this.terria.options.enableZoomControls) && !this.terria.options.enableZoomControls) && (defined(this.terria.options.enableCompass) && !this.terria.options.enableCompass)) {\r\n    // this.navigationDiv.setAttribute(\"id\", \"navigationDiv\");\r\n    // container.appendChild(this.navigationDiv);\r\n    // Create the navigation controls.\r\n    //            this.navigationViewModel = NavigationViewModel.create({\r\n    //                container: this.navigationDiv,\r\n    //                terria: this.terria,\r\n    //                enableZoomControls: false,\r\n    //                enableCompass: false\r\n    //            });\r\n  }\r\n}\r\n\r\nexport default CesiumNavigation\r\n","import CesiumNavigation from 'cesium-navigation-es6'\r\n\r\nimport * as Cesium from 'cesium'\r\n/**\r\n * @description: 导航插件\r\n * @param {*} options 导航配置\r\n * @return {*}\r\n */\r\nconst options = {\r\n  // 默认视角\r\n  defaultResetView: Cesium.Cartographic.fromDegrees(120.318977, 30.114155, 2000),\r\n  //相机方向\r\n  orientation: { pitch: Cesium.Math.toRadians(-45) },\r\n  //相机延时\r\n  // duration = 4, //默认为3s\r\n  // 用于启用或禁用罗盘。true是启用罗盘，false是禁用罗盘。默认值为true。如果将选项设置为false，则罗盘将不会添加到地图中。\r\n  enableCompass: true,\r\n  // 用于启用或禁用缩放控件。true是启用，false是禁用。默认值为true。如果将选项设置为false，则缩放控件将不会添加到地图中。\r\n  enableZoomControls: true,\r\n  // 用于启用或禁用距离图例。true是启用，false是禁用。默认值为true。如果将选项设置为false，距离图例将不会添加到地图中。\r\n  enableDistanceLegend: false,\r\n  // 用于启用或禁用指南针外环。true是启用，false是禁用。默认值为true。如果将选项设置为false，则该环将可见但无效。\r\n  enableCompassOuterRing: true, //修改重置视图的tooltip\r\n  resetTooltip: '重置视图',\r\n  // 修改放大按钮的tooltip\r\n  zoomInTooltip: '放大',\r\n  // 修改缩小按钮的tooltip\r\n  zoomOutTooltip: '缩小'\r\n}\r\n\r\nlet camera\r\nexport const cesiumNavigation = (viewer: any) => {\r\n  // @ts-ignore\r\n  if (camera) {\r\n    camera.destroy()\r\n  }\r\n  camera = new CesiumNavigation(viewer, options)\r\n}\r\n","<style scoped>\r\n::v-deep(.compass){\r\n  /* right: 450px; */\r\n}\r\n::v-deep(.compass-outer-ring){\r\n  fill: #04abc2\r\n}\r\n::v-deep(.compass-outer-ring-background){\r\n  border: 12px solid #135764;\r\n}\r\n::v-deep(.compass-gyro-background){\r\n  border: 1px solid #04abc2;\r\n  background-color: #135764;\r\n}\r\n\r\n::v-deep(.navigation-controls){\r\n  /* right: 480px; */\r\n  background-color: #135764;\r\n  border-radius: 4px;\r\n}\r\n\r\n::v-deep(.navigation-control-icon-zoom-in){\r\n  color: #04abc2;\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n}\r\n\r\n::v-deep(.navigation-control-icon-zoom-out){\r\n  color: #04abc2;\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n}\r\n\r\n::v-deep(.navigation-control-icon-reset){\r\n  fill: #04abc2;\r\n  font-size: 24px;\r\n}\r\n</style>\r\n<script setup lang=\"ts\">\r\nimport { ContentWrap } from '@/components/ContentWrap'\r\nimport CesiumComponent from '@/components/Cesium/Cesium.component.vue'\r\nimport { useCesium } from '@/hooks/web/useCesium'\r\n\r\nimport { cesiumNavigation } from '@/components/Cesium/CesiumNavigation/index.ts'\r\n\r\nimport * as Cesium from 'cesium'\r\n\r\nconst { mapRegister, mapMethods } = useCesium()\r\n\r\nconst { getMap } = mapMethods\r\n\r\ndefineOptions({\r\n  name: 'CesiumNavigation'\r\n})\r\n\r\nconst cesiumLoadCB = async (viewer) => {\r\n  cesiumNavigation(viewer)\r\n  viewer.camera.setView({\r\n    destination: Cesium.Cartesian3.fromDegrees(119.858963, 30.801224, 5000.0)\r\n  })\r\n}\r\n</script>\r\n\r\n<template>\r\n  <ContentWrap title=\"导航插件\">\r\n    <div class=\"h-[calc(100vh-280px)]\">\r\n      <cesium-component\r\n        @register=\"mapRegister\"\r\n        :config=\"{\r\n          // homeButton: true\r\n        }\"\r\n        tiandituTk=\"80cd3c8ae46ae32fa0ac19f6d739d310\"\r\n        :cesiumLoadCB=\"cesiumLoadCB\"\r\n      />\r\n    </div>\r\n  </ContentWrap>\r\n</template>"],"names":["createFragmentFromTemplate","htmlString","holder","fragment","Knockout","loadView","container","viewModel","nodes","i","node","DistanceLegendViewModel","options","that","addUpdateSubscription","scene","updateDistanceLegendCesium","testing","result","geodesic","distances","now","width","height","left","right","globe","leftPosition","rightPosition","leftCartographic","rightCartographic","pixelDistance","maxBarWidth","distance","label","svgReset","UserInterfaceControl","terria","NavigationControl","ResetViewNavigationControl","locked","sscc","camera","trackedEntity","duration","orientation","e","Utils","unprojectedScratch","rayScratch","inWorldCoordinates","ZoomNavigationControl","zoomIn","cartesian3Scratch","relativeAmount","focus","ray","direction","movementVector","endPosition","svgCompassOuterRing","svgCompassGyro","svgCompassRotationMarker","NavigationViewModel","widgetChange","closeStr","divCloseStr","hiddenStr","enableCompassOuterRing","compassPre","compassPreAfter","compassOuterRingBackground","compassRotationMarkerPre","compassRotationMarkerDefaultSvg","compassRotationMarkerSelf","compassRotationMarker","compassOuterRingPre","compassOuterRingDefaultSvg","compassOuterRingSelf","compassOuterRing","compassGyroBackground","compassGyroPre","compassGyroDefaultSvg","compassGyroSelf","compassGyro","compassDivPublicStr","compassDivStr","compassDivHiddenStr","navigationControlsPre","resetSvg","zoomInSvg","zoomOutSvg","navigationControlsDivPublicStr","navigationControlsDivStr","navigationControlsDivHiddenStr","control","vectorScratch","getClientXY","temp","clientX","clientY","compassElement","compassRectangle","maxDistance","center","clickLocation","vector","distanceFromCenter","distanceFraction","nominalTotalRadius","norminalGyroRadius","orbit","rotate","oldTransformScratch","newTransformScratch","centerScratch","cameraPosition","surfaceNormal","focusBoundingSphere","addOrbitEventListener","addRotateEventListener","removeOrbitEventListener","removeRotateEventListener","cursorVector","timestamp","deltaT","rate","angle","x","y","oldTransform","updateAngleAndOpacity","compassWidth","easedOpacity","viewCenter","angleDifference","newCameraAngle","currentCameraAngle","CesiumEvent","CesiumNavigation","viewerCesiumWidget","initialize","callback","cesiumWidget","cesiumNavigation","viewer","mapRegister","mapMethods","useCesium","cesiumLoadCB","__async"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13]}